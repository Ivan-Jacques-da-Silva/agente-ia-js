import { gerarMudancaInteligente, gerarDiff, analisarDiferencas } from "./analisador.js";
import { criarMudancaPendente, salvarConversa, registrarHistorico } from "./database.js";
import { chat_simples } from "./llm.js";
import path from "node:path";
import fs from "node:fs";

function ehReferenciaAoProjeto(mensagem) {
  const msgLower = mensagem.toLowerCase().trim();
  
  const palavrasChaveProjeto = [
    'meu projeto', 'meu c√≥digo', 'minha aplica√ß√£o', 'meu app',
    'este projeto', 'esse projeto', 'o projeto', 'no projeto',
    'os arquivos', 'meus arquivos', 'este c√≥digo', 'esse c√≥digo',
    'sintaxe', 'syntax', 'erro', 'bug', 'problema',
    'analisar', 'verificar', 'checar', 'revisar',
    'refatorar', 'melhorar', 'otimizar', 'corrigir',
    'adicionar', 'criar', 'modificar', 'alterar', 'mudar',
    'implementar', 'desenvolver', 'construir'
  ];
  
  for (const palavra of palavrasChaveProjeto) {
    if (msgLower.includes(palavra)) {
      return true;
    }
  }
  
  return false;
}

function ehSolicitacaoDeAnalise(mensagem) {
  const msgLower = mensagem.toLowerCase().trim();
  
  const palavrasAnalise = ['analisar', 'verificar', 'checar', 'revisar', 'ver se', 'tem algum', 'existe'];
  const palavrasChecagem = ['erro', 'bug', 'problema', 'sintaxe', 'syntax', 'issue'];
  const palavrasNegacao = ['n√£o', 'sem', 'nenhum'];
  const palavrasAcao = [
    'corrigir', 'consertar', 'adicionar', 'criar', 'modificar', 'alterar', 
    'mudar', 'implementar', 'desenvolver', 'construir', 'refatorar',
    'remover', 'deletar', 'ajustar', 'atualizar', 'melhorar'
  ];
  
  const temAcao = palavrasAcao.some(p => msgLower.includes(p));
  
  if (temAcao) {
    return false;
  }
  
  let temAnalise = false;
  let temChecagem = false;
  
  for (const palavra of palavrasAnalise) {
    if (msgLower.includes(palavra)) {
      temAnalise = true;
      break;
    }
  }
  
  for (const palavra of palavrasChecagem) {
    if (msgLower.includes(palavra)) {
      temChecagem = true;
      break;
    }
  }
  
  const temNegacao = palavrasNegacao.some(p => msgLower.includes(p));
  
  return (temAnalise && temChecagem) || (temAnalise && !temAcao) || (temChecagem && temNegacao);
}

function ehMensagemDeConversa(mensagem) {
  const msgLower = mensagem.toLowerCase().trim();
  
  if (ehReferenciaAoProjeto(mensagem)) {
    return false;
  }
  
  if (msgLower.length > 100) {
    return false;
  }
  
  const saudacoesExatas = ['ol√°', 'oi', 'ola', 'bom dia', 'boa tarde', 'boa noite', 'hello', 'hi', 'hey'];
  const agradecimentosExatos = ['obrigado', 'obrigada', 'valeu', 'thanks', 'thank you'];
  const perguntasSimples = ['como voc√™ est√°', 'tudo bem', 'como vai', 'quem √© voc√™', 'o que voc√™ faz'];
  
  for (const saudacao of saudacoesExatas) {
    if (msgLower === saudacao || msgLower === saudacao + '!' || msgLower === saudacao + '?') {
      return true;
    }
  }
  
  for (const agradecimento of agradecimentosExatos) {
    if (msgLower === agradecimento || msgLower === agradecimento + '!' || msgLower === agradecimento + '.') {
      return true;
    }
  }
  
  if (msgLower.length < 30) {
    for (const pergunta of perguntasSimples) {
      if (msgLower === pergunta || msgLower === pergunta + '?' || msgLower.includes(pergunta)) {
        return true;
      }
    }
  }
  
  return false;
}

export async function processarChatComStreaming(mensagem, estado, arvore, res) {
  res.setHeader('Content-Type', 'text/event-stream');
  res.setHeader('Cache-Control', 'no-cache');
  res.setHeader('Connection', 'keep-alive');
  res.setHeader('Access-Control-Allow-Origin', '*');

  let abortado = false;
  const enviarEtapa = (etapa) => {
    if (!abortado) {
      res.write(`data: ${JSON.stringify({ tipo: 'etapa', conteudo: etapa })}\n\n`);
    }
  };

  const enviarPensamento = (texto, status = 'running', detalhes = []) => {
    if (!abortado) {
      res.write(`data: ${JSON.stringify({ 
        tipo: 'pensamento', 
        conteudo: { text: texto, status, details: detalhes }
      })}\n\n`);
    }
  };

  try {
    if (ehMensagemDeConversa(mensagem)) {
      enviarPensamento('Identificando tipo de mensagem', 'running');
      enviarPensamento('Identificando tipo de mensagem', 'completed');
      enviarPensamento('Respondendo sua mensagem', 'running');
      
      const resposta = await chat_simples(mensagem, "Conversa com o usu√°rio");
      salvarConversa(estado.projetoId, mensagem, resposta);
      
      enviarPensamento('Respondendo sua mensagem', 'completed');
      
      res.write(`data: ${JSON.stringify({
        tipo: 'completo',
        resposta,
        mudancas: []
      })}\n\n`);
      res.end();
      return;
    }
    
    if (ehSolicitacaoDeAnalise(mensagem) && ehReferenciaAoProjeto(mensagem)) {
      enviarPensamento('üîç Identificando solicita√ß√£o de an√°lise', 'running');
      enviarPensamento('üîç Identificando solicita√ß√£o de an√°lise', 'completed');
      
      enviarPensamento('üìÇ Carregando arquivos do projeto', 'running', [
        `üìä Total de arquivos: ${arvore.filter(a => a.tipo === 'file').length}`
      ]);
      
      const arquivos = arvore.filter(a => a.tipo === 'file').map(a => a.path);
      const arquivosPrincipais = arquivos.filter(a => 
        a.endsWith('.js') || a.endsWith('.jsx') || 
        a.endsWith('.ts') || a.endsWith('.tsx') ||
        a.endsWith('.py') || a.endsWith('.java') ||
        a.includes('package.json') || a.includes('index')
      ).slice(0, 10);
      
      let contextoProjeto = `Estrutura do projeto (${arquivos.length} arquivos):\n${arquivos.slice(0, 50).join('\n')}`;
      
      for (const arquivo of arquivosPrincipais.slice(0, 5)) {
        const arquivoPath = path.join(estado.pasta, arquivo);
        try {
          const conteudo = await fs.promises.readFile(arquivoPath, 'utf-8');
          if (conteudo.length < 3000) {
            contextoProjeto += `\n\nüìÑ ${arquivo}:\n\`\`\`\n${conteudo}\n\`\`\``;
          }
        } catch (e) {}
      }
      
      enviarPensamento('üìÇ Carregando arquivos do projeto', 'completed');
      enviarPensamento('ü§î Analisando c√≥digo em busca de problemas', 'running');
      
      const prompt = `Voc√™ √© um desenvolvedor experiente analisando um projeto.

SOLICITA√á√ÉO DO USU√ÅRIO:
"${mensagem}"

CONTEXTO DO PROJETO:
${contextoProjeto}

Por favor, analise o projeto e responda a solicita√ß√£o do usu√°rio de forma clara e direta. 
- Se encontrar erros/problemas, liste-os
- Se n√£o encontrar problemas, confirme que est√° tudo ok
- Seja espec√≠fico e √∫til
- Responda de forma amig√°vel com emojis quando apropriado`;

      const resposta = await chat_simples(prompt, "An√°lise de projeto");
      salvarConversa(estado.projetoId, mensagem, resposta);
      
      enviarPensamento('ü§î Analisando c√≥digo em busca de problemas', 'completed');
      
      res.write(`data: ${JSON.stringify({
        tipo: 'completo',
        resposta,
        mudancas: []
      })}\n\n`);
      res.end();
      return;
    }
    
    enviarPensamento('üîç Analisando sua solicita√ß√£o', 'running', ['Entendendo o que voc√™ precisa', 'Identificando arquivos relevantes']);
    await new Promise(resolve => setTimeout(resolve, 500));
    enviarPensamento('üîç Analisando sua solicita√ß√£o', 'completed');
    
    enviarPensamento('üìÇ Carregando contexto do projeto', 'running', [
      `üìä Total de arquivos: ${arvore.filter(a => a.tipo === 'file').length}`,
      `‚úÖ Estrutura compreendida`
    ]);
    await new Promise(resolve => setTimeout(resolve, 300));
    enviarPensamento('üìÇ Carregando contexto do projeto', 'completed');
    
    enviarPensamento('üéØ Identificando os melhores arquivos', 'running');
    
    const resultado = await gerarMudancaInteligente(mensagem, estado.projetoId, estado.pasta, arvore);
    
    enviarPensamento('üéØ Identificando os melhores arquivos', 'completed');
    
    if (resultado.analise && resultado.analise.passos) {
      enviarPensamento('üí° Executando an√°lise detalhada', 'running', resultado.analise.passos);
      await new Promise(resolve => setTimeout(resolve, 400));
      enviarPensamento('üí° Executando an√°lise detalhada', 'completed');
    }

    if (resultado.mudancas && resultado.mudancas.length > 0) {
      enviarPensamento(`‚ú® Preparando ${resultado.mudancas.length} altera√ß√£o(√µes)`, 'running', 
        resultado.mudancas.map(m => `üìù ${m.arquivo}`)
      );
      await new Promise(resolve => setTimeout(resolve, 300));
      
      const mudancasComId = [];
      for (const mudanca of resultado.mudancas) {
        enviarPensamento(`‚öôÔ∏è Processando ${mudanca.arquivo}`, 'running', [
          'üìñ Lendo c√≥digo atual',
          'üîÑ Calculando diferen√ßas',
          'üìä Analisando impacto'
        ]);
        
        const arquivoPath = path.join(estado.pasta, mudanca.arquivo);
        let original = "";

        try {
          original = await fs.promises.readFile(arquivoPath, "utf-8");
        } catch (e) {
          original = "";
        }

        const diff = gerarDiff(original, mudanca.conteudo_novo, mudanca.arquivo);
        const analise = await analisarDiferencas(original, mudanca.conteudo_novo);

        const mudancaId = criarMudancaPendente(
          estado.projetoId,
          mudanca.arquivo,
          original,
          mudanca.conteudo_novo,
          diff,
          mudanca.descricao || "Altera√ß√£o gerada pelo agente"
        );

        mudancasComId.push({
          id: mudancaId,
          arquivo: mudanca.arquivo,
          descricao: mudanca.descricao,
          diff: diff.slice(0, 5000),
          analise: analise,
          conteudo_original: original,
          conteudo_novo: mudanca.conteudo_novo
        });

        enviarPensamento(`‚öôÔ∏è Processando ${mudanca.arquivo}`, 'completed');
      }

      enviarPensamento(`‚ú® Preparando ${resultado.mudancas.length} altera√ß√£o(√µes)`, 'completed');
      
      enviarPensamento('üéâ Finalizando e preparando resposta', 'running');

      const resposta = `Pronto! Analisei sua solicita√ß√£o e preparei ${resultado.mudancas.length} altera√ß√£o(√µes) para voc√™. Revise as mudan√ßas abaixo e aprove quando estiver satisfeito:`;

      salvarConversa(estado.projetoId, mensagem, resposta, JSON.stringify(resultado.analise));
      registrarHistorico(estado.projetoId, "mudancas_propostas", `${resultado.mudancas.length} altera√ß√µes propostas`);

      enviarPensamento('üéâ Finalizando e preparando resposta', 'completed');

      res.write(`data: ${JSON.stringify({
        tipo: 'completo',
        resposta,
        mudancas: mudancasComId,
        analise: resultado.analise,
        mensagem_commit: resultado.mensagem_commit
      })}\n\n`);
      res.end();
    } else {
      enviarPensamento('üí¨ Preparando resposta para voc√™', 'running');
      const resposta = await chat_simples(mensagem, "Reposit√≥rio local aberto");
      salvarConversa(estado.projetoId, mensagem, resposta);
      enviarPensamento('üí¨ Preparando resposta para voc√™', 'completed');
      
      res.write(`data: ${JSON.stringify({
        tipo: 'completo',
        resposta,
        mudancas: []
      })}\n\n`);
      res.end();
    }
  } catch (e) {
    res.write(`data: ${JSON.stringify({ tipo: 'erro', mensagem: String(e?.message || e) })}\n\n`);
    res.end();
  }
}
