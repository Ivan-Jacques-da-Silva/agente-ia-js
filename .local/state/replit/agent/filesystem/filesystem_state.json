{"file_contents":{"agente/src/fluxo.js":{"content":"﻿import os from \"node:os\";\nimport path from \"node:path\";\nimport { pedir_plano } from \"./llm.js\";\nimport {\n  clonar_repositorio,\n  criar_branch,\n  rodar_testes,\n  aplicar_patch,\n  commit_e_push,\n} from \"./ferramentas.js\";\n\nexport async function executar_fluxo(tarefa) {\n  const contexto = \"Repositório alvo com testes. Faça mudanças mínimas e seguras.\";\n  const plano = await pedir_plano(contexto, tarefa);\n\n  const pasta = path.join(os.tmpdir(), `tarefa_${Date.now()}`);\n  await clonar_repositorio(tarefa.repositorioUrl, pasta);\n  await criar_branch(pasta, `agente/${Date.now()}`);\n\n  const antes = await rodar_testes(pasta);\n\n  let logPatch = \"\";\n  if (plano.passos?.includes(\"editar\")) {\n    const exemplo = `\ndiff --git a/README.md b/README.md\nindex e69de29..b1f4a1e 100644\n--- a/README.md\n+++ b/README.md\n@@ -0,0 +1,3 @@\n+# AtualizaÃ§Ã£o pelo Agente\n+- Ajuste automÃ¡tico de documentaÃ§Ã£o.\n+\n`;\n    try {\n      logPatch = await aplicar_patch(pasta, exemplo);\n    } catch (e) {\n      logPatch = String(e?.message || e);\n    }\n  }\n\n  const depois = await rodar_testes(pasta);\n  try {\n    await commit_e_push(pasta, \"feat: alteraÃ§Ã£o automÃ¡tica via Agente\");\n  } catch {}\n  return {\n    plano,\n    testesAntes: (antes || \"\").slice(0, 2000),\n    patchSaida: (logPatch || \"\").slice(0, 2000),\n    testesDepois: (depois || \"\").slice(0, 2000),\n  };\n}\n\n\n","size_bytes":1374},"agente/src/analisador.js":{"content":"import { chat_simples } from \"./llm.js\";\nimport { buscarContextoProjeto, salvarContextoArquivo } from \"./database.js\";\nimport fs from \"node:fs\";\nimport path from \"node:path\";\n\nexport async function analisarIntencao(mensagem, projetoId, arvore) {\n  const contexto = await buscarContextoProjeto(projetoId, 20);\n  const todosArquivos = arvore.filter(a => a.tipo === \"file\").map(a => a.path);\n  const arquivosRelevantes = todosArquivos.slice(0, 300);\n\n  const prompt = `Voc\u00192 \u00188 um assistente de an\u00192lise de c\u00193\u00190digo. Analise a inten\u00193\u00190o do usu\u00192rio e identifique:\n1. Quais arquivos provavelmente precisam ser alterados\n2. Tipo de altera\u00193\u00190o (cria\u00193\u00190o, edi\u00193\u00190o, exclus\u00192o, refatora\u00193\u00190o)\n3. Complexidade estimada (baixa, m\u00195dia, alta)\n4. Riscos potenciais\n\nMensagem do usu\u00192rio: \"${mensagem}\"\n\nArquivos dispon\u00192veis no projeto (amostra):\n${arquivosRelevantes.join(\"\\n\")}\n\nContexto de arquivos recentemente acessados:\n${contexto.map(c => `- ${c.caminho}`).join(\"\\n\")}\n\nResponda em JSON com:\n{\n  \"arquivos_alvo\": [\"caminho1\", \"caminho2\"],\n  \"tipo_mudanca\": \"edi\u00193\u00190o|cria\u00193\u00190o|exclus\u00192o|refatora\u00193\u00190o\",\n  \"complexidade\": \"baixa|m\u00195dia|alta\",\n  \"riscos\": [\"risco1\", \"risco2\"],\n  \"plano_acao\": \"descri\u00193\u00190o breve do que ser\u00193 feito\"\n}\n\nIMPORTANTE:\n- Sempre selecione caminhos que EXISTEM na lista de arquivos do projeto, quando for uma edi\u00193\u00190o/refatora\u00193\u00190o.\n- Se precisar criar um arquivo novo, indique um caminho plaus\u00192vel dentro da estrutura existente.\n`;\n\n  try {\n    const resposta = await chat_simples(\"Analise a inten\u00193\u00190o\", prompt);\n    const inicio = resposta.indexOf(\"{\");\n    const fim = resposta.lastIndexOf(\"}\");\n\n    if (inicio >= 0 && fim > inicio) {\n      const json = JSON.parse(resposta.slice(inicio, fim + 1));\n      return json;\n    }\n  } catch (e) {\n    console.error(\"Erro ao analisar inten\u00193\u00190o:\", e);\n  }\n\n  return {\n    arquivos_alvo: [],\n    tipo_mudanca: \"edi\u00193\u00190o\",\n    complexidade: \"m\u00195dia\",\n    riscos: [],\n    plano_acao: \"Executar a solicita\u00193\u00190o do usu\u00192rio\"\n  };\n}\n\nfunction normalizarTokens(texto) {\n  return String(texto || \"\")\n    .toLowerCase()\n    .replace(/[^a-z0-9._\\-/ ]+/g, \" \")\n    .split(/\\s+/)\n    .filter(t => t && t.length >= 3);\n}\n\nfunction heuristicaArquivos(arvore, mensagem) {\n  const files = arvore.filter(a => a.tipo === \"file\").map(a => a.path);\n  const tokens = normalizarTokens(mensagem);\n  const pontuacao = new Map();\n\n  const boostExt = (p) => (p.endsWith('.jsx')||p.endsWith('.tsx')) ? 3 : (p.endsWith('.js')||p.endsWith('.ts')) ? 2 : 1;\n\n  for (const f of files) {\n    let score = 0;\n    const fLower = f.toLowerCase();\n    for (const t of tokens) {\n      if (fLower.includes(t)) score += 2;\n    }\n    if (fLower.includes('front/src/app.jsx')) score += 6;\n    if (fLower.includes('/app.') || fLower.includes('app.jsx') || fLower.includes('app.tsx')) score += 3;\n    if (fLower.includes('/index.') || fLower.includes('index.jsx') || fLower.includes('index.tsx')) score += 2;\n    if (fLower.includes('front/src')) score += 2;\n    score *= boostExt(fLower);\n    if (score > 0) pontuacao.set(f, score);\n  }\n\n  const candidatos = Array.from(pontuacao.entries())\n    .sort((a,b) => b[1]-a[1])\n    .slice(0, 3)\n    .map(([f]) => f);\n\n  if (candidatos.length === 0) {\n    const preferidos = ['front/src/app.jsx', 'src/App.jsx', 'src/app.jsx'];\n    for (const p of preferidos) if (files.includes(p)) candidatos.push(p);\n  }\n  if (candidatos.length === 0) {\n    candidatos.push(...files.filter(f => /\\.(jsx?|tsx?)$/i.test(f)).slice(0,3));\n  }\n  if (candidatos.length === 0) candidatos.push(...files.slice(0,1));\n\n  return Array.from(new Set(candidatos)).slice(0,3);\n}\n\nexport async function gerarMudancaInteligente(mensagem, projetoId, pastaProjeto, arvore) {\n  const passos = [];\n  passos.push(`Arquivos no projeto (amostra de ${Math.min(300, arvore.filter(a=>a.tipo==='file').length)} arquivos)`);\n  const analise = await analisarIntencao(mensagem, projetoId, arvore);\n  passos.push(\"Intenção analisada pelo LLM\");\n\n  const arquivosContexto = [];\n  let candidatos = Array.isArray(analise.arquivos_alvo) ? analise.arquivos_alvo.slice(0,5) : [];\n  const conjunto = new Set(arvore.filter(a => a.tipo === 'file').map(a => a.path));\n  candidatos = candidatos.filter(c => conjunto.has(c));\n  if (candidatos.length === 0) {\n    candidatos = heuristicaArquivos(arvore, mensagem);\n  }\n  if (candidatos.length) {\n    passos.push(`Arquivos candidatos: ${candidatos.slice(0,3).join(', ')}`);\n  } else {\n    passos.push('Nenhum arquivo candidato encontrado');\n  }\n\n  for (const arquivoAlvo of candidatos) {\n    try {\n      const caminhoCompleto = path.join(pastaProjeto, arquivoAlvo);\n      const existe = await fs.promises.access(caminhoCompleto).then(() => true).catch(() => false);\n\n      if (existe) {\n        const conteudo = await fs.promises.readFile(caminhoCompleto, \"utf-8\");\n        arquivosContexto.push({ caminho: arquivoAlvo, conteudo: conteudo.slice(0, 10000) });\n        await salvarContextoArquivo(projetoId, arquivoAlvo, conteudo);\n      }\n    } catch (e) {\n      console.error(`Erro ao ler ${arquivoAlvo}:`, e);\n    }\n  }\n\n  const listaArquivos = arvore.filter(a => a.tipo === 'file').slice(0, 500).map(a => a.path).join('\\n');\n\n  const prompt = `Voc\u00192 \u00188 um desenvolvedor experiente. Gere as altera\u00195\u00195es necess\u00195rias para atender ao pedido.\n\nPedido: \"${mensagem}\"\n\nPlano de a\u00195\u00190o: ${analise.plano_acao}\n\nArquivos para alterar:\n${arquivosContexto.map(a => `\nArquivo: ${a.caminho}\nConte\u00194\u00190do atual:\n\\`\\`\\`\n${a.conteudo}\n\\`\\`\\`\n`).join(\"\\n\")}\n\nArquivos existentes no projeto (amostra):\n${listaArquivos}\n\nResponda em JSON com um array de mudan\u00195\u00195es:\n{\n  \"mudancas\": [\n    {\n      \"arquivo\": \"caminho/do/arquivo.js\",\n      \"conteudo_novo\": \"conte\u00194\u00190do completo do arquivo atualizado\",\n      \"descricao\": \"descri\u00193\u00190o breve da mudan\u00195a\"\n    }\n  ],\n  \"mensagem_commit\": \"mensagem descritiva para o commit\"\n}\n\nIMPORTANTE:\n- Retorne o conte\u00194\u00190do COMPLETO de cada arquivo, n\u00195o apenas as linhas alteradas.\n- Se nenhum arquivo alvo foi fornecido acima, escolha 1 a 3 caminhos EXISTENTES da lista e preencha o campo \"arquivo\" com esses caminhos exatos.\n- Se precisar criar arquivo novo, indique um caminho coerente com a estrutura mostrada.\n`;\n\n  try {\n    const resposta = await chat_simples(\"Gere as mudan\u00195as\", prompt);\n    const inicio = resposta.indexOf(\"{\");\n    const fim = resposta.lastIndexOf(\"}\");\n\n    if (inicio >= 0 && fim > inicio) {\n      const json = JSON.parse(resposta.slice(inicio, fim + 1));\n      return { ...json, analise: { ...analise, passos } };\n    }\n  } catch (e) {\n    console.error(\"Erro ao gerar mudan\u00195as:\", e);\n  }\n\n  return {\n    mudancas: [],\n    mensagem_commit: \"Altera\u00195\u00195es via agente\",\n    analise: { ...analise, passos }\n  };\n}\n\nexport async function analisarDiferencas(original, novo) {\n  const linhasOriginais = original.split(\"\\n\");\n  const linhasNovas = novo.split(\"\\n\");\n\n  const diferencas = {\n    linhas_adicionadas: 0,\n    linhas_removidas: 0,\n    linhas_modificadas: 0,\n    total_linhas_antes: linhasOriginais.length,\n    total_linhas_depois: linhasNovas.length\n  };\n\n  const maxLinhas = Math.max(linhasOriginais.length, linhasNovas.length);\n\n  for (let i = 0; i < maxLinhas; i++) {\n    const linhaOriginal = linhasOriginais[i];\n    const linhaNova = linhasNovas[i];\n\n    if (linhaOriginal === undefined && linhaNova !== undefined) {\n      diferencas.linhas_adicionadas++;\n    } else if (linhaOriginal !== undefined && linhaNova === undefined) {\n      diferencas.linhas_removidas++;\n    } else if (linhaOriginal !== linhaNova) {\n      diferencas.linhas_modificadas++;\n    }\n  }\n\n  return diferencas;\n}\n\nexport function gerarDiff(original, novo, nomeArquivo) {\n  const linhasOriginais = original.split(\"\\n\");\n  const linhasNovas = novo.split(\"\\n\");\n\n  let diff = `diff --git a/${nomeArquivo} b/${nomeArquivo}\\n`;\n  diff += `--- a/${nomeArquivo}\\n`;\n  diff += `+++ b/${nomeArquivo}\\n`;\n  diff += `@@ -1,${linhasOriginais.length} +1,${linhasNovas.length} @@\\n`;\n\n  const maxLinhas = Math.max(linhasOriginais.length, linhasNovas.length);\n\n  for (let i = 0; i < maxLinhas; i++) {\n    const linhaOriginal = linhasOriginais[i];\n    const linhaNova = linhasNovas[i];\n\n    if (linhaOriginal === undefined && linhaNova !== undefined) {\n      diff += `+${linhaNova}\\n`;\n    } else if (linhaOriginal !== undefined && linhaNova === undefined) {\n      diff += `-${linhaOriginal}\\n`;\n    } else if (linhaOriginal !== linhaNova) {\n      diff += `-${linhaOriginal}\\n`;\n      diff += `+${linhaNova}\\n`;\n    } else {\n      diff += ` ${linhaOriginal}\\n`;\n    }\n  }\n\n  return diff;\n}\n","size_bytes":8568},"GUIA-USO.md":{"content":"# Guia de Uso - Agente IA\n\n## Fluxo Completo de Uso\n\n### 1. Primeira Vez\n\n#### Instalar Ollama\n```bash\n# Linux\ncurl -fsSL https://ollama.com/install.sh | sh\n\n# macOS\nbrew install ollama\n\n# Windows\n# Baixar de https://ollama.com/download\n```\n\n#### Baixar Modelo de Código\n```bash\n# Modelo recomendado (7B - rápido e eficiente)\nollama pull qwen2.5-coder:7b\n\n# Alternativas:\n# ollama pull codellama:7b\n# ollama pull deepseek-coder:6.7b\n```\n\n#### Instalar Dependências\n```bash\ncd agente-ia-js\nnpm run instalar\n```\n\n### 2. Iniciar Sistema\n\n```bash\n# Terminal 1: Iniciar tudo junto\nnpm run dev\n\n# Ou separadamente:\n# Terminal 1: API\nnpm run dev --workspace api\n\n# Terminal 2: Agente\nnpm run dev --workspace agente\n\n# Terminal 3: Frontend\nnpm run dev --workspace front\n```\n\n### 3. Acessar Interface\n\nAbra o navegador em:\n```\nhttp://localhost:5173\n```\n(ou a porta exibida no console do Vite)\n\n## Cenários de Uso\n\n### Cenário 1: Desenvolvimento Local\n\n**Situação:** Você tem um projeto local e quer ajuda do agente.\n\n**Passos:**\n1. Na sidebar, campo \"Caminho Local\", digite o caminho completo do projeto\n   - Exemplo: `/home/usuario/meu-projeto`\n2. Clique em \"Abrir Projeto\"\n3. O agente analisa e carrega a estrutura\n4. Comece a conversar no chat\n\n**Exemplo de conversa:**\n```\nVocê: \"Adicionar validação de CPF no formulário de cadastro\"\n\nAgente: Analisei sua solicitação. Vou criar uma função de validação\n        de CPF e integrá-la ao formulário.\n\n[Você vê: \"1 Mudança Pendente\"]\n\nVocê clica para revisar:\n- Arquivo: src/utils/validators.js (NOVO)\n- Arquivo: src/components/CadastroForm.jsx (MODIFICADO)\n\nVocê aprova e o agente aplica as mudanças.\n```\n\n### Cenário 2: Trabalho com Repositório Remoto\n\n**Situação:** Você quer clonar um repo e trabalhar nele.\n\n**Passos:**\n1. Na sidebar, campo \"URL do Repositório\"\n2. Digite: `https://github.com/usuario/projeto.git`\n3. Campo \"Branch Base\": `main` (ou a branch desejada)\n4. Clique em \"Abrir Projeto\"\n5. O agente clona para `/tmp/` e cria uma branch nova\n6. Trabalhe normalmente\n\n**Commits:**\n- Mudanças aprovadas ficam no working directory\n- Clique \"Commit & Push\" quando pronto\n- O agente faz commit na branch criada e push\n\n### Cenário 3: Refatoração Grande\n\n**Situação:** Você quer refatorar várias partes do código.\n\n**Estratégia:**\n```\nVocê: \"Preciso refatorar a autenticação para usar JWT\"\n\nAgente: Vou dividir isso em etapas:\n1. Criar serviço de JWT\n2. Atualizar middleware de autenticação\n3. Modificar rotas protegidas\n4. Atualizar frontend para usar tokens\n\n[3 Mudanças Pendentes]\n\nVocê revisa e aprova uma por uma.\n```\n\n### Cenário 4: Correção de Bug\n\n**Situação:** Há um bug e você não sabe onde está.\n\n**Exemplo:**\n```\nVocê: \"O botão de login não está funcionando quando clico\"\n\nAgente: Vou analisar o componente de login e event handlers.\n\n        Encontrei: O evento onClick está com sintaxe incorreta.\n\n[1 Mudança Pendente]\n\n- <button onClick={handleLogin()}>\n+ <button onClick={handleLogin}>\n```\n\n## Comandos Úteis via Chat\n\n### Edição de Código\n- \"Alterar [texto] para [novo texto] em [arquivo]\"\n- \"Adicionar [funcionalidade] em [componente]\"\n- \"Remover [código] de [arquivo]\"\n- \"Renomear [variável] para [novo nome]\"\n\n### Criação\n- \"Criar componente [Nome] com [descrição]\"\n- \"Criar função [nome] que [faz algo]\"\n- \"Adicionar arquivo [caminho] com [conteúdo]\"\n\n### Análise\n- \"O que faz o arquivo [caminho]?\"\n- \"Onde está implementado [funcionalidade]?\"\n- \"Explicar o código em [arquivo]\"\n\n### Refatoração\n- \"Extrair [lógica] para função separada\"\n- \"Refatorar [componente] para usar hooks\"\n- \"Simplificar [função]\"\n\n## Aprovação de Mudanças\n\n### Visualizar Mudanças\n1. Botão laranja mostra: \"X Mudança(s) Pendente(s)\"\n2. Clique para abrir modal\n3. Cada mudança mostra:\n   - Nome do arquivo\n   - Descrição\n   - Diff completo\n\n### Aprovar\n- Botão verde \"✓ Aprovar e Aplicar\"\n- Mudança é aplicada imediatamente\n- Arquivo é salvo no disco\n\n### Rejeitar\n- Botão vermelho \"✗ Rejeitar\"\n- Mudança é descartada\n- Não afeta o código\n\n### Dicas\n- Revise sempre antes de aprovar\n- Teste após aplicar mudanças críticas\n- Aprove mudanças relacionadas juntas\n- Faça commit após cada grupo de aprovações\n\n## Edição Manual\n\nVocê também pode editar arquivos manualmente:\n\n1. Clique no arquivo no explorador\n2. Edite no editor central\n3. Botão \"Salvar Arquivo\" aparece quando há mudanças\n4. Clique para salvar\n\n**Nota:** Edições manuais não passam por aprovação.\n\n## Commits e Git\n\n### Commit Automático\n- Após aprovar mudanças, clique \"Commit & Push\"\n- Agente cria commit com mensagem descritiva\n- Push para branch atual\n\n### Commit Manual\n- Faça mudanças (aprovadas ou manuais)\n- Clique \"Commit & Push\"\n- Commit é feito com todas as mudanças\n\n### Branch\n- Ao abrir repositório remoto, agente cria branch `agente/[timestamp]`\n- Trabalhe nessa branch\n- Faça merge/PR manualmente depois\n\n## Memória e Contexto\n\n### Como Funciona\nO agente lembra:\n- Projetos já abertos\n- Arquivos acessados recentemente\n- Conversas anteriores\n- Tecnologias do projeto\n\n### Reabrindo Projeto\n- Ao reabrir, o agente carrega:\n  - Últimas conversas\n  - Arquivos de contexto\n  - Histórico de ações\n\n### Limpando Memória\n```bash\n# Remover banco de dados\nrm ~/.agente-ia/agente.db\n\n# Sistema recomeça do zero\n```\n\n## Histórico\n\n### Visualizar Histórico\n- Cada ação é registrada:\n  - Projeto aberto/reaberto\n  - Arquivos salvos\n  - Mudanças propostas/aprovadas/rejeitadas\n  - Commits realizados\n\n### Uso Futuro\n- Em desenvolvimento: painel de histórico na UI\n- Por enquanto: histórico está no banco de dados\n\n## Performance\n\n### Projetos Grandes\n- Agente analisa até 5000 arquivos\n- Profundidade máxima: 6 níveis\n- Ignora: node_modules, .git, dist, build\n\n### Respostas Lentas\n- Depende do modelo Ollama\n- Modelos menores (7B) são mais rápidos\n- Modelos maiores (30B+) são mais precisos\n\n### Otimização\n```bash\n# Use modelo menor para velocidade\nollama pull qwen2.5-coder:7b\n\n# Configure em agente/.env\nLLM_MODEL=qwen2.5-coder:7b\n```\n\n## Troubleshooting Comum\n\n### \"Aguardando conexão com o agente\"\n- Verifique se `npm run dev` está rodando\n- Verifique se porta 6060 está livre\n- Recarregue a página\n\n### \"Ollama indisponível\"\n```bash\n# Verificar se está rodando\ncurl http://localhost:11434/api/tags\n\n# Se não estiver, inicie:\nollama serve\n```\n\n### Mudanças não aparecem\n- Verifique se projeto está aberto\n- Recarregue árvore de arquivos\n- Reabra o projeto\n\n### Erro ao clonar repositório\n- Verifique URL do repositório\n- Para repos privados, configure token Git\n- Verifique conexão internet\n\n### Banco de dados travado\n```bash\n# Parar todos os processos\npkill -f agente\n\n# Remover banco\nrm ~/.agente-ia/agente.db\n\n# Reiniciar\nnpm run dev\n```\n\n## Boas Práticas\n\n### 1. Commits Frequentes\n- Aprove mudanças em grupos lógicos\n- Faça commit após cada grupo\n- Não acumule muitas mudanças\n\n### 2. Revisão Cuidadosa\n- Sempre revise o diff\n- Teste funcionalidades críticas\n- Não aprove mudanças que não entende\n\n### 3. Comunicação Clara\n- Seja específico nas solicitações\n- Mencione arquivos se souber\n- Use exemplos quando possível\n\n### 4. Backup\n- Trabalhe em branches separadas\n- Faça backup antes de mudanças grandes\n- Use controle de versão\n\n### 5. Segurança\n- Não compartilhe banco de dados\n- Não commite credenciais\n- Revise código gerado por IA\n\n## Próximos Passos\n\nDepois de dominar o básico:\n1. Experimente refatorações complexas\n2. Use para aprender novos padrões\n3. Automatize tarefas repetitivas\n4. Integre em seu fluxo de trabalho\n\n## Suporte\n\n- Issues: Abra no repositório do projeto\n- Docs: Este arquivo e README.md\n- Comunidade: Discord/Slack (se disponível)\n","size_bytes":7793},"api/src/index.js":{"content":"import \"dotenv/config\";\nimport express from \"express\";\nimport cors from \"cors\";\nimport net from \"node:net\";\nimport { nanoid } from \"nanoid\";\nimport { FilaMemoria } from \"./fila.js\";\n\nconst app = express();\n// CORS permissivo (qualquer origem) e preflight\napp.use((req,res,next)=>{\n  res.header(\"Access-Control-Allow-Origin\", \"*\");\n  res.header(\"Access-Control-Allow-Methods\", \"GET,POST,PUT,DELETE,OPTIONS\");\n  res.header(\"Access-Control-Allow-Headers\", \"*\");\n  if(req.method === \"OPTIONS\") return res.sendStatus(204);\n  next();\n});\napp.use(express.json());\n\nconst tarefas = new Map();\nconst fila = new FilaMemoria();\n\napp.get(\"/saude\", (_req, res) => res.json({ ok: true }));\n\n// Proxy estável para o Agente (evita depender de proxy do Vite)\napp.use('/proxy/agente', async (req, res) => {\n  try{\n    const base = await getAgenteUrl();\n    const target = base + req.originalUrl.replace(/^\\/proxy\\/agente/, \"\");\n    const init = { method: req.method, headers: { } };\n    for (const [k,v] of Object.entries(req.headers)){\n      if ([\"host\",\"content-length\"].includes(k)) continue;\n      init.headers[k] = v;\n    }\n    if(req.method !== 'GET' && req.method !== 'HEAD'){\n      const ct = (req.headers['content-type']||'')+'';\n      if (ct.includes('application/json') && req.body && typeof req.body === 'object'){\n        init.headers['content-type'] = 'application/json';\n        init.body = JSON.stringify(req.body);\n      } else {\n        const chunks=[]; for await (const ch of req) chunks.push(ch);\n        const body = Buffer.concat(chunks);\n        if(body.length) init.body = body;\n      }\n    }\n    const r = await fetch(target, init);\n    const buf = Buffer.from(await r.arrayBuffer());\n    res.status(r.status);\n    for (const [k,v] of r.headers.entries()) res.setHeader(k, v);\n    res.setHeader('Access-Control-Allow-Origin','*');\n    res.send(buf);\n  }catch(e){\n    res.setHeader('Access-Control-Allow-Origin','*');\n    res.status(502).json({ erro: String(e?.message||e) });\n  }\n});\n\n// Compat: se o front chamar sem prefixo, encaminha para o Agente\napp.post('/repo/abrir', async (req, res) => {\n  try{\n    const base = await getAgenteUrl();\n    const r = await fetch(`${base}/repo/abrir`, {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify(req.body||{}),\n    });\n    const text = await r.text();\n    res.status(r.status);\n    res.set('Access-Control-Allow-Origin','*');\n    const ct = r.headers.get('content-type') || '';\n    if (ct.includes('application/json')){ try{ return res.json(JSON.parse(text)); }catch{ /* fallback below */ } }\n    return res.send(text);\n  }catch(e){\n    res.set('Access-Control-Allow-Origin','*');\n    res.status(502).json({ erro: String(e?.message||e) });\n  }\n});\n\napp.post(\"/tarefas\", async (req, res) => {\n  const { titulo, repositorioUrl, descricao, branchBase } = req.body || {};\n  if (!titulo || !repositorioUrl)\n    return res\n      .status(400)\n      .json({ erro: \"Campos obrigatórios: titulo, repositorioUrl\" });\n  const id = nanoid();\n  const t = {\n    id,\n    titulo,\n    descricao,\n    repositorioUrl,\n    branchBase,\n    estado: \"criada\",\n    logs: [],\n  };\n  tarefas.set(id, t);\n  await fila.adicionar({ id, dados: t });\n  res.status(201).json({ id });\n});\n\napp.get(\"/tarefas/:id\", (req, res) => {\n  const t = tarefas.get(req.params.id);\n  if (!t) return res.status(404).json({ erro: \"Não encontrado\" });\n  res.json(t);\n});\n\nlet AGENTE_URL_CACHE = null;\nasync function getAgenteUrl(){\n  if (AGENTE_URL_CACHE) return AGENTE_URL_CACHE;\n  const base = Number(process.env.AGENTE_PORTA || 6060);\n  for(let p=base; p<base+10; p++){\n    try{\n      const r = await fetch(`http://localhost:${p}/saude`);\n      if(r.ok){\n        AGENTE_URL_CACHE = `http://localhost:${p}`;\n        return AGENTE_URL_CACHE;\n      }\n    }catch{ /* tenta o próximo */ }\n  }\n  // fallback, ainda que possa falhar\n  AGENTE_URL_CACHE = `http://localhost:${base}`;\n  return AGENTE_URL_CACHE;\n}\n\nfila.on(\"executar\", async (job) => {\n  const t = tarefas.get(job.id);\n  if (!t) return;\n  t.estado = \"em_execucao\";\n  try {\n    const AGENTE_URL = await getAgenteUrl();\n    const r = await fetch(`${AGENTE_URL}/executar`, {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify(job.dados),\n    });\n    const txt = await r.text();\n    t.logs.push(txt.slice(0, 2000));\n    t.estado = r.ok ? \"concluida\" : \"falhou\";\n  } catch (e) {\n    t.logs.push(String(e?.message || e));\n    t.estado = \"falhou\";\n  }\n});\n\nasync function findAvailablePort(start){\n  for(let p=start; p<start+50; p++){\n    const ok = await new Promise((resolve)=>{\n      const srv = net.createServer()\n        .once(\"error\", ()=> resolve(false))\n        .once(\"listening\", ()=> srv.close(()=> resolve(true)))\n        .listen(p, \"0.0.0.0\");\n    });\n    if(ok) return p;\n  }\n  throw new Error(\"Sem porta livre encontrada\");\n}\n\nlet server;\nasync function start(){\n  const base = Number(process.env.API_PORTA || 5050);\n  const porta = await findAvailablePort(base);\n  server = app.listen(porta, () => console.log(`API na porta ${porta}`));\n}\n\nfunction graceful(){\n  if(server){\n    console.log(\"Encerrando API e liberando porta...\");\n    try{ server.close(()=> process.exit(0)); }catch{ process.exit(0); }\n  } else {\n    process.exit(0);\n  }\n}\nprocess.on(\"SIGINT\", graceful);\nprocess.on(\"SIGTERM\", graceful);\n\nawait start();\n\n// Proxy para o Agente: o front chama via API para evitar CORS com o Agente\nasync function proxyAgente(req, res){\n  try{\n    const base = await getAgenteUrl();\n    const target = base + req.originalUrl.replace(/^\\/agente/, \"\");\n    const init = {\n      method: req.method,\n      headers: { \"Content-Type\": req.get('content-type') || 'application/json' },\n    };\n    if(req.method !== 'GET' && req.method !== 'HEAD'){\n      init.body = req.rawBody || JSON.stringify(req.body||{});\n    }\n    const r = await fetch(target, init);\n    const text = await r.text();\n    res.set('Access-Control-Allow-Origin','*');\n    res.status(r.status);\n    const ct = r.headers.get('content-type') || '';\n    if(ct.includes('application/json')){ try{ return res.json(JSON.parse(text)); }catch{ /* fallthrough */ } }\n    return res.send(text);\n  }catch(e){\n    res.set('Access-Control-Allow-Origin','*');\n    res.status(500).json({ erro: String(e?.message||e) });\n  }\n}\n\n// Registra proxy antes e depois de start() para evitar condições de corrida\napp.use('/agente', express.json({limit:'5mb'}), proxyAgente);\napp.use('/agente', express.json({limit:'5mb'}), proxyAgente);\n","size_bytes":6560},"INICIO-RAPIDO.md":{"content":"# Início Rápido - 5 Minutos\n\n## 1. Pré-requisitos (2 min)\n\n```bash\n# Instalar Ollama (se ainda não tiver)\n# Linux/Mac:\ncurl -fsSL https://ollama.com/install.sh | sh\n\n# Windows: baixar de https://ollama.com/download\n\n# Baixar modelo de código\nollama pull qwen2.5-coder:7b\n```\n\n## 2. Instalar (1 min)\n\n```bash\ncd agente-ia-js\nnpm run instalar\n```\n\n## 3. Iniciar (1 min)\n\n```bash\n# Iniciar tudo\nnpm run dev\n\n# Aguardar mensagens:\n# - API na porta 5050\n# - Agente na porta 6060\n# - Local: http://localhost:5173\n```\n\n## 4. Usar (1 min)\n\nAbra o navegador em `http://localhost:5173`\n\n### Opção A: Projeto Local\n1. Digite caminho do projeto: `/seu/projeto`\n2. Clique \"Abrir Projeto\"\n3. Converse: \"Adicionar um botão na página inicial\"\n\n### Opção B: Repositório Remoto\n1. Cole URL: `https://github.com/usuario/projeto.git`\n2. Branch: `main`\n3. Clique \"Abrir Projeto\"\n4. Aguarde clone e análise\n\n## 5. Fluxo Básico\n\n```\n1. Chat: \"Quero adicionar validação de email\"\n   ↓\n2. Agente analisa e propõe mudanças\n   ↓\n3. Botão laranja: \"1 Mudança Pendente\"\n   ↓\n4. Você revisa o diff\n   ↓\n5. Aprova ou rejeita\n   ↓\n6. Se aprovado, mudança é aplicada\n   ↓\n7. Clique \"Commit & Push\"\n   ↓\n8. Pronto!\n```\n\n## Comandos Úteis\n\n```bash\n# Verificar sistema\n./verificar-sistema.sh\n\n# Ver logs\nnpm run dev\n\n# Parar tudo\nCtrl+C (no terminal)\n\n# Limpar banco\nrm ~/.agente-ia/agente.db\n```\n\n## Exemplo Completo\n\n```bash\n# Terminal 1\ncd agente-ia-js\nnpm run dev\n\n# Navegador\nhttp://localhost:5173\n\n# 1. Abrir projeto\nCaminho Local: /home/usuario/meu-app\n[Abrir Projeto]\n\n# 2. Conversar\nChat: \"Criar um componente de loading spinner\"\n\n# 3. Revisar\n[1 Mudança Pendente] → Revisar diff\n\n# 4. Aprovar\n[✓ Aprovar e Aplicar]\n\n# 5. Commitar\n[Commit & Push]\n\n# Pronto! Mudança aplicada e commitada\n```\n\n## Problemas Comuns\n\n### Ollama não conecta\n```bash\nollama serve\n```\n\n### Porta em uso\nSistema detecta automaticamente e usa próxima disponível\n\n### Agente não responde\n1. Verificar se Ollama está rodando: `curl localhost:11434/api/tags`\n2. Verificar se modelo foi baixado: `ollama list`\n3. Recarregar página\n\n## Próximos Passos\n\n- Ler [GUIA-USO.md](GUIA-USO.md) para casos avançados\n- Ver [README.md](README.md) para documentação completa\n- Checar [CHANGELOG.md](CHANGELOG.md) para novidades\n\n## Dicas\n\n1. **Seja específico:** \"Adicionar botão de login no header\"\n2. **Mencione arquivos:** \"Alterar cor em styles.css\"\n3. **Revise sempre:** Não aprove sem entender\n4. **Commit frequente:** Após cada grupo de mudanças\n5. **Use branches:** Trabalhe em branches separadas\n\n## Atalhos\n\n- `Enter` no chat = Enviar\n- `Shift+Enter` = Nova linha\n- Árvore: Clique para expandir/colapsar\n\nPronto! Você está usando o Agente IA.\n\nPara ajuda: Abra issue no repositório ou consulte a documentação.\n","size_bytes":2815},"front/src/app.css":{"content":"\n/* Tema Dark (padrão) */\n:root,\n:root[data-theme=\"dark\"] {\n  color-scheme: dark;\n  \n  /* Cores primárias - Roxo/Violeta profissional */\n  --primary-color: #8b5cf6;\n  --primary-dark: #7c3aed;\n  --primary-light: #a78bfa;\n  --primary-hover: #9333ea;\n  \n  /* Backgrounds - Tons de cinza escuro */\n  --bg-primary: #0a0a0a;\n  --bg-secondary: #1a1a1a;\n  --bg-tertiary: #2a2a2a;\n  --bg-hover: #333333;\n  --bg-active: #3d3d3d;\n  \n  /* Bordas */\n  --border-color: #404040;\n  --border-light: #4a4a4a;\n  \n  /* Textos */\n  --text-primary: #f5f5f5;\n  --text-secondary: #a3a3a3;\n  --text-tertiary: #737373;\n  \n  /* Status */\n  --success-color: #22c55e;\n  --error-color: #ef4444;\n  --warning-color: #f59e0b;\n  --info-color: #3b82f6;\n  \n  /* Sombras */\n  --shadow-sm: 0 1px 2px 0 rgba(0, 0, 0, 0.3);\n  --shadow-md: 0 4px 6px -1px rgba(0, 0, 0, 0.4);\n  --shadow-lg: 0 10px 15px -3px rgba(0, 0, 0, 0.5);\n}\n\n/* Tema Light */\n:root[data-theme=\"light\"] {\n  color-scheme: light;\n  \n  /* Cores primárias - Roxo/Violeta profissional */\n  --primary-color: #8b5cf6;\n  --primary-dark: #7c3aed;\n  --primary-light: #a78bfa;\n  --primary-hover: #9333ea;\n  \n  /* Backgrounds - Tons de branco/cinza claro */\n  --bg-primary: #ffffff;\n  --bg-secondary: #f5f5f5;\n  --bg-tertiary: #e5e5e5;\n  --bg-hover: #d4d4d4;\n  --bg-active: #c4c4c4;\n  \n  /* Bordas */\n  --border-color: #d4d4d4;\n  --border-light: #e5e5e5;\n  \n  /* Textos */\n  --text-primary: #171717;\n  --text-secondary: #525252;\n  --text-tertiary: #737373;\n  \n  /* Status */\n  --success-color: #16a34a;\n  --error-color: #dc2626;\n  --warning-color: #ea580c;\n  --info-color: #2563eb;\n  \n  /* Sombras */\n  --shadow-sm: 0 1px 2px 0 rgba(0, 0, 0, 0.05);\n  --shadow-md: 0 4px 6px -1px rgba(0, 0, 0, 0.1);\n  --shadow-lg: 0 10px 15px -3px rgba(0, 0, 0, 0.15);\n}\n\n* {\n  box-sizing: border-box;\n}\n\nhtml,\nbody,\n#root {\n  height: 100%;\n  margin: 0;\n  font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, sans-serif;\n  overflow: hidden;\n}\n\nbutton,\ninput,\ntextarea {\n  font-family: inherit;\n}\n\n.app-shell {\n  display: flex;\n  height: 100%;\n  background: var(--bg-primary);\n  color: var(--text-primary);\n  position: relative;\n}\n\n.app-sidebar {\n  width: 340px;\n  display: flex;\n  flex-direction: column;\n  gap: 20px;\n  padding: 24px 20px;\n  background: var(--bg-secondary);\n  border-right: 1px solid var(--border-color);\n  overflow-y: auto;\n  position: relative;\n  z-index: 10;\n  transition: all 0.3s ease;\n}\n\n.app-sidebar.is-collapsed {\n  width: 80px;\n  padding: 24px 12px;\n}\n\n.brand-header {\n  display: flex;\n  align-items: center;\n  gap: 14px;\n  padding: 16px;\n  background: var(--bg-tertiary);\n  border-radius: 16px;\n  border: 1px solid var(--border-color);\n  position: relative;\n  box-shadow: var(--shadow-sm);\n}\n\n.sidebar-toggle {\n  position: absolute;\n  right: 8px;\n  top: 50%;\n  transform: translateY(-50%);\n  padding: 4px 8px !important;\n  font-size: 14px;\n}\n\n.brand-logo {\n  width: 48px;\n  height: 48px;\n  border-radius: 12px;\n  background: var(--primary-color);\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-weight: 700;\n  font-size: 24px;\n  color: white;\n  box-shadow: var(--shadow-sm);\n}\n\n.brand-copy {\n  display: flex;\n  flex-direction: column;\n  gap: 4px;\n  font-weight: 600;\n}\n\n.brand-title {\n  font-size: 18px;\n  color: var(--text-primary);\n}\n\n.brand-subtitle {\n  font-size: 12px;\n  color: var(--text-secondary);\n  font-weight: 400;\n}\n\n.sidebar-section {\n  display: flex;\n  flex-direction: column;\n  gap: 14px;\n}\n\n.section-title {\n  font-size: 11px;\n  letter-spacing: 1.5px;\n  text-transform: uppercase;\n  font-weight: 700;\n  color: var(--text-secondary);\n  margin: 0;\n}\n\n.status-card {\n  padding: 14px 16px;\n  border-radius: 12px;\n  border: 1px solid var(--border-color);\n  background: var(--bg-tertiary);\n  font-weight: 600;\n  font-size: 13px;\n  transition: all 0.2s ease;\n  box-shadow: var(--shadow-sm);\n}\n\n.status-card--ready {\n  background: rgba(16, 185, 129, 0.1);\n  border-color: var(--success-color);\n  color: var(--success-color);\n}\n\n.status-card--failed {\n  background: rgba(239, 68, 68, 0.1);\n  border-color: var(--error-color);\n  color: var(--error-color);\n}\n\n.project-card {\n  padding: 14px 16px;\n  border-radius: 12px;\n  border: 1px solid var(--primary-color);\n  background: rgba(139, 92, 246, 0.1);\n  font-weight: 600;\n  font-size: 13px;\n  color: var(--text-primary);\n  box-shadow: var(--shadow-sm);\n}\n\n.field-grid {\n  display: flex;\n  flex-direction: column;\n  gap: 12px;\n}\n\n.field-label {\n  font-size: 10px;\n  text-transform: uppercase;\n  letter-spacing: 1px;\n  color: var(--text-secondary);\n  font-weight: 600;\n}\n\n.form-input {\n  padding: 12px 14px;\n  border-radius: 10px;\n  border: 1px solid var(--border-color);\n  background: var(--bg-tertiary);\n  color: var(--text-primary);\n  font-size: 13px;\n  width: 100%;\n  transition: all 0.2s ease;\n}\n\n.form-input:focus {\n  outline: none;\n  border-color: var(--primary-color);\n  background: var(--bg-secondary);\n  box-shadow: 0 0 0 3px rgba(139, 92, 246, 0.1);\n}\n\n.form-input::placeholder {\n  color: var(--text-tertiary);\n}\n\n.button {\n  border: none;\n  border-radius: 10px;\n  padding: 12px 16px;\n  font-weight: 600;\n  font-size: 13px;\n  cursor: pointer;\n  transition: all 0.2s ease;\n  color: var(--text-primary);\n  background: var(--bg-tertiary);\n  border: 1px solid var(--border-color);\n}\n\n.button:hover:not(:disabled) {\n  background: var(--bg-hover);\n  border-color: var(--primary-color);\n  transform: translateY(-1px);\n  box-shadow: var(--shadow-md);\n}\n\n.button:disabled {\n  opacity: 0.5;\n  cursor: not-allowed;\n}\n\n.button-primary {\n  background: var(--primary-color);\n  color: #ffffff;\n  border: none;\n  box-shadow: var(--shadow-sm);\n}\n\n.button-primary:hover:not(:disabled) {\n  background: var(--primary-hover);\n  box-shadow: var(--shadow-md);\n}\n\n.button-secondary {\n  border: 1px solid var(--border-color);\n  background: var(--bg-tertiary);\n}\n\n.button-tertiary {\n  border: 1px solid var(--border-color);\n  background: transparent;\n  font-weight: 500;\n}\n\n.button-attention {\n  background: var(--warning-color);\n  color: #ffffff;\n  border: none;\n}\n\n.button-attention:hover:not(:disabled) {\n  background: #d97706;\n}\n\n.main-content {\n  flex: 1;\n  display: flex;\n  padding: 24px;\n  overflow: hidden;\n}\n\n.window-chrome {\n  background: var(--bg-secondary);\n  border-radius: 16px;\n  border: 1px solid var(--border-color);\n  display: flex;\n  flex-direction: column;\n  flex: 1;\n  overflow: hidden;\n  box-shadow: var(--shadow-lg);\n}\n\n.window-bar {\n  display: flex;\n  align-items: center;\n  gap: 12px;\n  padding: 16px 20px;\n  border-bottom: 1px solid var(--border-color);\n  background: var(--bg-tertiary);\n}\n\n.window-dots {\n  display: flex;\n  gap: 8px;\n}\n\n.window-dot {\n  width: 12px;\n  height: 12px;\n  border-radius: 50%;\n  transition: opacity 0.2s ease;\n}\n\n.window-dot:hover {\n  opacity: 0.8;\n}\n\n.window-dot--red { background: var(--error-color); }\n.window-dot--yellow { background: var(--warning-color); }\n.window-dot--green { background: var(--success-color); }\n\n.window-title {\n  font-size: 13px;\n  color: var(--text-secondary);\n  font-weight: 500;\n}\n\n.window-actions {\n  margin-left: auto;\n  display: flex;\n  gap: 8px;\n}\n\n.tab-bar {\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  padding: 10px 16px;\n  background: var(--bg-primary);\n  border-bottom: 1px solid var(--border-color);\n}\n\n.file-tabs-bar {\n  display: flex;\n  align-items: center;\n  gap: 4px;\n  padding: 8px 12px;\n  background: var(--bg-primary);\n  border-bottom: 1px solid var(--border-color);\n  overflow-x: auto;\n  overflow-y: hidden;\n  max-width: 100%;\n}\n\n.file-tab {\n  display: flex;\n  align-items: center;\n  gap: 8px;\n  padding: 8px 12px;\n  background: var(--bg-tertiary);\n  border: 1px solid var(--border-color);\n  border-radius: 10px 10px 0 0;\n  cursor: pointer;\n  transition: all 0.2s ease;\n  white-space: nowrap;\n  position: relative;\n  min-width: 120px;\n  max-width: 200px;\n}\n\n.file-tab:hover {\n  background: var(--bg-secondary);\n  border-color: var(--primary-color);\n}\n\n.file-tab.is-active {\n  background: var(--bg-secondary);\n  border-bottom-color: transparent;\n  border-color: var(--primary-color);\n}\n\n.file-tab-icon {\n  font-size: 14px;\n  flex-shrink: 0;\n}\n\n.file-tab-name {\n  flex: 1;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  font-size: 13px;\n  color: var(--text-primary);\n}\n\n.file-tab-dot {\n  color: var(--warning-color);\n  font-size: 18px;\n  line-height: 1;\n  flex-shrink: 0;\n}\n\n.file-tab-close {\n  all: unset;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 20px;\n  height: 20px;\n  border-radius: 12px;\n  cursor: pointer;\n  color: var(--text-secondary);\n  transition: all 0.2s ease;\n  flex-shrink: 0;\n}\n\n.file-tab-close:hover {\n  background: rgba(239, 68, 68, 0.2);\n  color: var(--error-color);\n}\n\n.tab-group {\n  display: flex;\n  gap: 8px;\n}\n\n.tab-item {\n  border: none;\n  border-radius: 10px;\n  padding: 8px 16px;\n  font-size: 13px;\n  background: var(--bg-tertiary);\n  color: var(--text-secondary);\n  cursor: pointer;\n  transition: all 0.2s ease;\n  position: relative;\n}\n\n.tab-item.is-active {\n  background: var(--primary-color);\n  color: #ffffff;\n  box-shadow: var(--shadow-sm);\n}\n\n.tab-current {\n  font-size: 12px;\n  color: var(--text-tertiary);\n  overflow: hidden;\n  text-overflow: ellipsis;\n  max-width: 50%;\n  white-space: nowrap;\n  font-family: \"Fira Code\", monospace;\n}\n\n.editor-actions-bar {\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  padding: 10px 16px;\n  background: var(--bg-tertiary);\n  border-bottom: 1px solid var(--border-color);\n}\n\n.editor-file-path {\n  font-size: 12px;\n  color: var(--text-secondary);\n  font-family: \"Fira Code\", monospace;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  max-width: 50%;\n}\n\n.editor-actions {\n  display: flex;\n  gap: 8px;\n  align-items: center;\n}\n\n.error-banner {\n  padding: 12px 20px;\n  background: rgba(239, 68, 68, 0.1);\n  border-bottom: 1px solid var(--error-color);\n  color: var(--error-color);\n  font-size: 13px;\n}\n\n.search-bar {\n  display: flex;\n  align-items: center;\n  gap: 12px;\n  padding: 10px 16px;\n  background: rgba(139, 92, 246, 0.1);\n  border-bottom: 1px solid var(--primary-color);\n}\n\n.search-input {\n  flex: 1;\n  padding: 8px 12px;\n  border-radius: 10px;\n  border: 1px solid var(--border-color);\n  background: var(--bg-tertiary);\n  color: var(--text-primary);\n  font-size: 13px;\n  font-family: \"Fira Code\", monospace;\n  transition: all 0.2s ease;\n}\n\n.search-input:focus {\n  outline: none;\n  border-color: var(--primary-color);\n}\n\n.search-controls {\n  display: flex;\n  align-items: center;\n  gap: 8px;\n}\n\n.search-count {\n  font-size: 12px;\n  color: var(--text-secondary);\n  font-family: \"Fira Code\", monospace;\n  min-width: 100px;\n  text-align: center;\n}\n\n.workspace-panels {\n  display: flex;\n  flex: 1;\n  min-height: 0;\n  background: var(--bg-primary);\n  --chat-panel-width: 360px;\n  position: relative;\n}\n\n.editor-stack {\n  flex: 1;\n  display: flex;\n  min-width: 0;\n}\n\n.file-explorer {\n  width: 260px;\n  border-right: 1px solid var(--border-color);\n  background: var(--bg-secondary);\n  display: flex;\n  flex-direction: column;\n  transition: all 0.3s ease;\n}\n\n.file-explorer.is-collapsed { width: 56px; }\n\n.file-explorer-header {\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  padding: 14px 16px;\n  border-bottom: 1px solid var(--border-color);\n  font-size: 11px;\n  letter-spacing: 1px;\n  font-weight: 700;\n  background: var(--bg-tertiary);\n  color: var(--text-secondary);\n}\n\n.file-tree {\n  flex: 1;\n  overflow: auto;\n  padding: 12px 8px 40px;\n  font-family: \"Fira Code\", \"JetBrains Mono\", monospace;\n  font-size: 12px;\n  display: flex;\n  flex-direction: column;\n  gap: 2px;\n}\n\n.file-tree-branch { display: flex; flex-direction: column; }\n\n.file-tree-item {\n  all: unset;\n  display: flex;\n  align-items: center;\n  gap: 8px;\n  padding: 8px 10px;\n  padding-left: calc(10px + var(--indent-level, 0) * 16px);\n  border-radius: 10px;\n  cursor: pointer;\n  color: var(--text-primary);\n  transition: all 0.2s ease;\n  position: relative;\n}\n\n.file-tree-item::before {\n  content: '';\n  position: absolute;\n  left: 0;\n  top: 0;\n  bottom: 0;\n  width: 3px;\n  background: var(--primary-color);\n  opacity: 0;\n  transition: opacity 0.2s ease;\n  border-radius: 0 3px 3px 0;\n}\n\n.file-tree-item:hover {\n  background: var(--bg-tertiary);\n}\n\n.file-tree-item:hover::before {\n  opacity: 1;\n}\n\n.file-tree-item.is-active {\n  background: rgba(139, 92, 246, 0.15);\n  color: var(--primary-light);\n}\n\n.file-tree-item.is-active::before {\n  opacity: 1;\n}\n\n.file-tree-expander { width: 14px; font-size: 12px; transition: transform 0.2s ease; }\n.file-tree-item--directory.is-open .file-tree-expander { transform: rotate(90deg); }\n.file-tree-icon { width: 18px; }\n\n.file-tree-label {\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  flex: 1;\n}\n\n.file-tree-actions {\n  opacity: 0;\n  transition: opacity 0.2s ease;\n  margin-left: auto;\n  position: relative;\n}\n\n.file-tree-item:hover .file-tree-actions {\n  opacity: 1;\n}\n\n.file-action-button {\n  background: none;\n  border: none;\n  color: var(--text-secondary);\n  cursor: pointer;\n  padding: 4px 8px;\n  border-radius: 12px;\n  font-size: 14px;\n  transition: all 0.2s ease;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.file-action-button:hover {\n  background: rgba(139, 92, 246, 0.2);\n  color: var(--primary-light);\n}\n\n.file-context-menu {\n  position: absolute;\n  top: 100%;\n  right: 0;\n  margin-top: 4px;\n  background: var(--bg-secondary);\n  border: 1px solid var(--border-color);\n  border-radius: 10px;\n  padding: 6px;\n  min-width: 160px;\n  box-shadow: var(--shadow-lg);\n  z-index: 1000;\n}\n\n.file-context-item {\n  all: unset;\n  display: flex;\n  align-items: center;\n  gap: 10px;\n  padding: 8px 12px;\n  border-radius: 12px;\n  cursor: pointer;\n  font-size: 13px;\n  color: var(--text-primary);\n  transition: all 0.2s ease;\n  width: 100%;\n  box-sizing: border-box;\n}\n\n.file-context-item:hover {\n  background: rgba(139, 92, 246, 0.15);\n}\n\n.file-context-item-icon {\n  width: 16px;\n  text-align: center;\n  font-size: 14px;\n}\n\n.editor-content { flex: 1; min-width: 0; display: flex; flex-direction: column; }\n.editor-column  { flex: 1; min-height: 0; display: flex; flex-direction: column; }\n\n.code-surface {\n  flex: 1;\n  position: relative;\n  background: var(--bg-primary);\n  overflow: hidden;\n}\n\n.code-textarea {\n  position: absolute;\n  inset: 0;\n  width: 100%;\n  height: 100%;\n  background: transparent;\n  color: transparent;\n  -webkit-text-fill-color: transparent;\n  caret-color: var(--primary-light);\n  border: none;\n  padding: 22px 28px;\n  font-size: 14px;\n  line-height: 1.6;\n  font-family: \"Fira Code\", \"JetBrains Mono\", monospace;\n  resize: none;\n}\n\n.code-textarea:focus { outline: none; }\n\n.diff-bar {\n  padding: 14px 18px;\n  border-top: 1px solid var(--border-color);\n  background: var(--bg-tertiary);\n}\n\n.diff-info {\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  gap: 16px;\n}\n\n.history-panel {\n  flex: 1;\n  overflow: auto;\n  padding: 24px 26px;\n  display: flex;\n  flex-direction: column;\n  gap: 16px;\n}\n\n.history-entry {\n  background: var(--bg-tertiary);\n  border: 1px solid var(--border-color);\n  border-radius: 12px;\n  padding: 18px 20px;\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n  transition: all 0.2s ease;\n}\n\n.history-entry:hover {\n  border-color: var(--primary-color);\n}\n\n.history-entry-header {\n  display: flex;\n  justify-content: space-between;\n  font-size: 11px;\n  color: var(--text-secondary);\n  text-transform: uppercase;\n  letter-spacing: 0.5px;\n}\n\n.history-entry-type { font-weight: 700; }\n.history-entry-time { font-weight: 500; }\n\n.history-entry-file {\n  font-family: \"Fira Code\", monospace;\n  font-size: 12px;\n  color: var(--primary-light);\n}\n\n.history-entry-description {\n  margin: 0;\n  font-size: 13px;\n  color: var(--text-primary);\n  line-height: 1.6;\n}\n\n.history-entry-actions {\n  display: flex;\n  gap: 8px;\n  margin-top: 8px;\n}\n\n.diff-viewer-modal {\n  position: fixed;\n  inset: 0;\n  background: rgba(0, 0, 0, 0.9);\n  backdrop-filter: blur(12px);\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  z-index: 2000;\n  padding: 24px;\n}\n\n.diff-viewer-container {\n  background: var(--bg-secondary);\n  border: 1px solid var(--border-color);\n  border-radius: 12px;\n  width: 95%;\n  max-width: 1400px;\n  height: 90vh;\n  display: flex;\n  flex-direction: column;\n  box-shadow: 0 50px 100px rgba(0, 0, 0, 0.8);\n}\n\n.diff-viewer-header {\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  padding: 20px 24px;\n  border-bottom: 1px solid var(--border-color);\n  background: var(--bg-tertiary);\n}\n\n.diff-viewer-title {\n  display: flex;\n  flex-direction: column;\n  gap: 4px;\n}\n\n.diff-viewer-file {\n  font-size: 18px;\n  font-weight: 700;\n  color: var(--primary-light);\n}\n\n.diff-viewer-meta {\n  font-size: 12px;\n  color: var(--text-secondary);\n  font-family: \"Fira Code\", monospace;\n}\n\n.diff-viewer-controls {\n  display: flex;\n  align-items: center;\n  gap: 12px;\n}\n\n.diff-stats {\n  display: flex;\n  align-items: center;\n  gap: 16px;\n  padding: 8px 16px;\n  background: var(--bg-primary);\n  border-radius: 10px;\n  font-family: \"Fira Code\", monospace;\n  font-size: 13px;\n}\n\n.diff-stat-add {\n  color: var(--success-color);\n  display: flex;\n  align-items: center;\n  gap: 4px;\n}\n\n.diff-stat-remove {\n  color: var(--error-color);\n  display: flex;\n  align-items: center;\n  gap: 4px;\n}\n\n.diff-viewer-content {\n  display: flex;\n  flex: 1;\n  overflow: hidden;\n}\n\n.diff-pane {\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  overflow: hidden;\n  background: var(--bg-primary);\n}\n\n.diff-pane-header {\n  padding: 12px 16px;\n  background: var(--bg-tertiary);\n  border-bottom: 1px solid var(--border-color);\n  font-size: 12px;\n  font-weight: 600;\n  letter-spacing: 0.5px;\n  text-transform: uppercase;\n  color: var(--text-secondary);\n  display: flex;\n  align-items: center;\n  gap: 8px;\n}\n\n.diff-pane-header--original {\n  color: var(--error-color);\n}\n\n.diff-pane-header--modified {\n  color: var(--success-color);\n}\n\n.diff-pane-content {\n  flex: 1;\n  overflow-y: auto;\n  overflow-x: auto;\n  position: relative;\n}\n\n.diff-line-container {\n  display: flex;\n  font-family: \"Fira Code\", \"JetBrains Mono\", monospace;\n  font-size: 13px;\n  line-height: 1.6;\n  min-height: 100%;\n}\n\n.diff-gutter {\n  width: 56px;\n  padding: 2px 8px;\n  text-align: right;\n  color: var(--text-tertiary);\n  background: var(--bg-secondary);\n  border-right: 1px solid var(--border-color);\n  user-select: none;\n  flex-shrink: 0;\n}\n\n.diff-code-lines {\n  flex: 1;\n  min-width: 0;\n}\n\n.diff-code-line {\n  display: flex;\n  padding: 2px 0;\n  position: relative;\n}\n\n.diff-code-line-content {\n  flex: 1;\n  padding: 0 12px;\n  white-space: pre;\n  min-height: 21px;\n}\n\n.diff-line-added {\n  background: rgba(16, 185, 129, 0.15);\n}\n\n.diff-line-added .diff-code-line-content {\n  background: rgba(16, 185, 129, 0.1);\n}\n\n.diff-line-added::before {\n  content: '';\n  position: absolute;\n  left: 0;\n  top: 0;\n  bottom: 0;\n  width: 3px;\n  background: var(--success-color);\n}\n\n.diff-line-removed {\n  background: rgba(239, 68, 68, 0.15);\n}\n\n.diff-line-removed .diff-code-line-content {\n  background: rgba(239, 68, 68, 0.1);\n}\n\n.diff-line-removed::before {\n  content: '';\n  position: absolute;\n  left: 0;\n  top: 0;\n  bottom: 0;\n  width: 3px;\n  background: var(--error-color);\n}\n\n.diff-line-context {\n  background: transparent;\n}\n\n.diff-line-empty {\n  background: rgba(71, 85, 105, 0.1);\n}\n\n.diff-line-empty .diff-gutter {\n  color: var(--text-tertiary);\n}\n\n.diff-separator {\n  width: 1px;\n  background: var(--border-color);\n  flex-shrink: 0;\n}\n\n.diff-navigation {\n  position: absolute;\n  top: 50%;\n  right: 24px;\n  transform: translateY(-50%);\n  display: flex;\n  flex-direction: column;\n  gap: 8px;\n  z-index: 10;\n}\n\n.diff-nav-button {\n  all: unset;\n  width: 40px;\n  height: 40px;\n  border-radius: 10px;\n  background: var(--bg-tertiary);\n  border: 1px solid var(--border-color);\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  cursor: pointer;\n  color: var(--text-primary);\n  transition: all 0.2s ease;\n  font-size: 16px;\n}\n\n.diff-nav-button:hover:not(:disabled) {\n  background: var(--primary-color);\n  border-color: var(--primary-color);\n  color: white;\n}\n\n.diff-nav-button:disabled {\n  opacity: 0.3;\n  cursor: not-allowed;\n}\n\n.diff-viewer-footer {\n  display: flex;\n  justify-content: flex-end;\n  gap: 12px;\n  padding: 16px 24px;\n  border-top: 1px solid var(--border-color);\n  background: var(--bg-tertiary);\n}\n\n.diff-block {\n  font-family: \"Fira Code\", monospace;\n  font-size: 12px;\n  border-radius: 10px;\n  border: 1px solid var(--border-color);\n  overflow: hidden;\n}\n\n.diff-line {\n  display: grid;\n  grid-template-columns: 60px 1fr;\n  gap: 10px;\n  padding: 6px 12px;\n  white-space: pre-wrap;\n  transition: background 0.2s ease;\n}\n\n.diff-line--context { background: transparent; }\n.diff-line--add { background: rgba(16, 185, 129, 0.15); border-left: 3px solid var(--success-color); }\n.diff-line--remove { background: rgba(239, 68, 68, 0.15); border-left: 3px solid var(--error-color); }\n.diff-line .diff-gutter { text-align: right; color: var(--text-secondary); font-weight: 500; }\n.diff-line .diff-code { color: var(--text-primary); }\n\n.resize-handle {\n  width: 6px;\n  cursor: col-resize;\n  background: var(--border-color);\n  transition: all 0.2s ease;\n  position: relative;\n}\n\n.resize-handle:hover {\n  background: var(--primary-color);\n}\n\n.resize-handle.is-active {\n  background: var(--primary-color);\n}\n\n.chat-panel {\n  width: var(--chat-panel-width);\n  min-width: var(--chat-panel-width);\n  display: flex;\n  flex-direction: column;\n  background: var(--bg-secondary);\n  border-left: 1px solid var(--border-color);\n  transition: all 0.3s ease;\n}\n\n.chat-panel.is-collapsed {\n  width: 0;\n  min-width: 0;\n  opacity: 0;\n  pointer-events: none;\n}\n\n.chat-header {\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  padding: 16px 18px;\n  border-bottom: 1px solid var(--border-color);\n  background: var(--bg-tertiary);\n}\n\n.chat-title {\n  font-weight: 700;\n  font-size: 13px;\n  letter-spacing: 0.5px;\n  color: var(--text-primary);\n}\n\n.chat-actions { display: flex; gap: 8px; }\n\n.chat-sessions {\n  border-bottom: 1px solid var(--border-color);\n  padding: 12px;\n  background: var(--bg-tertiary);\n}\n\n.chat-sessions-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 8px;\n  gap: 8px;\n}\n\n.chat-sessions-header .section-title {\n  flex: 1;\n  margin: 0;\n}\n\n.chat-sessions-title {\n  font-size: 11px;\n  text-transform: uppercase;\n  letter-spacing: 1px;\n  color: var(--text-secondary);\n  font-weight: 700;\n}\n\n.chat-sessions-list {\n  display: flex;\n  flex-direction: column;\n  gap: 4px;\n  max-height: 200px;\n  overflow-y: auto;\n}\n\n.chat-session-item {\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  padding: 8px 10px;\n  border-radius: 12px;\n  background: var(--bg-secondary);\n  border: 1px solid var(--border-color);\n  cursor: pointer;\n  transition: all 0.2s ease;\n  font-size: 12px;\n}\n\n.chat-session-item:hover {\n  background: var(--bg-hover);\n  border-color: var(--primary-color);\n  transform: translateX(2px);\n}\n\n.chat-session-item.is-active {\n  background: rgba(139, 92, 246, 0.15);\n  border-color: var(--primary-color);\n  color: var(--primary-light);\n  box-shadow: var(--shadow-sm);\n}\n\n.chat-session-name {\n  flex: 1;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n}\n\n.chat-session-actions {\n  display: flex;\n  gap: 4px;\n  opacity: 0;\n  transition: opacity 0.2s ease;\n}\n\n.chat-session-item:hover .chat-session-actions {\n  opacity: 1;\n}\n\n.chat-session-btn {\n  background: none;\n  border: none;\n  color: var(--text-secondary);\n  cursor: pointer;\n  padding: 2px 4px;\n  border-radius: 10px;\n  font-size: 12px;\n  transition: all 0.2s ease;\n}\n\n.chat-session-btn:hover {\n  background: rgba(139, 92, 246, 0.2);\n  color: var(--primary-light);\n}\n\n.chat-message-list {\n  flex: 1;\n  overflow: auto;\n  padding: 20px 18px;\n  display: flex;\n  flex-direction: column;\n  gap: 16px;\n}\n\n.chat-message {\n  max-width: 85%;\n  display: flex;\n  flex-direction: column;\n  gap: 6px;\n  border-radius: 16px;\n  border: 1px solid var(--border-color);\n  padding: 12px 14px;\n  background: var(--bg-tertiary);\n  color: var(--text-primary);\n  box-shadow: var(--shadow-sm);\n}\n\n.chat-message--user {\n  margin-left: auto;\n  background: rgba(139, 92, 246, 0.15);\n  border-color: var(--primary-color);\n}\n\n.chat-message.is-pending {\n  opacity: 0.6;\n}\n\n.chat-author {\n  font-size: 10px;\n  letter-spacing: 1px;\n  text-transform: uppercase;\n  color: var(--text-secondary);\n  font-weight: 700;\n}\n\n.chat-text {\n  margin: 0;\n  font-size: 13px;\n  white-space: pre-wrap;\n  line-height: 1.6;\n}\n\n.chat-steps {\n  margin-top: 8px;\n  padding: 12px;\n  background: var(--bg-primary);\n  border-radius: 10px;\n  border: 1px solid var(--border-color);\n}\n\n.chat-steps-title {\n  font-size: 11px;\n  text-transform: uppercase;\n  letter-spacing: 1px;\n  color: var(--text-secondary);\n  font-weight: 700;\n  margin-bottom: 8px;\n  display: flex;\n  align-items: center;\n  gap: 6px;\n}\n\n.chat-step {\n  display: flex;\n  align-items: flex-start;\n  gap: 10px;\n  padding: 6px 0;\n  font-size: 12px;\n  color: var(--text-primary);\n}\n\n.chat-step-icon {\n  color: var(--primary-light);\n  margin-top: 2px;\n  font-size: 14px;\n}\n\n.chat-step-text {\n  flex: 1;\n  line-height: 1.5;\n}\n\n.chat-composer {\n  display: flex;\n  gap: 10px;\n  padding: 16px 18px;\n  border-top: 1px solid var(--border-color);\n  background: var(--bg-tertiary);\n}\n\n.chat-textarea {\n  flex: 1;\n  min-height: 60px;\n  border-radius: 10px;\n  border: 1px solid var(--border-color);\n  background: var(--bg-secondary);\n  color: var(--text-primary);\n  padding: 12px 14px;\n  font-size: 13px;\n  resize: vertical;\n  transition: all 0.2s ease;\n}\n\n.chat-textarea:focus {\n  outline: none;\n  border-color: var(--primary-color);\n}\n\n.empty-state {\n  color: var(--text-tertiary);\n  font-size: 13px;\n  text-align: center;\n  padding: 40px 20px;\n  opacity: 0.7;\n}\n\n.modal-layer {\n  position: fixed;\n  inset: 0;\n  background: rgba(0, 0, 0, 0.8);\n  backdrop-filter: blur(8px);\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  z-index: 1000;\n  padding: 24px;\n}\n\n.modal-card {\n  background: var(--bg-secondary);\n  border: 1px solid var(--border-color);\n  border-radius: 12px;\n  max-width: 900px;\n  width: 100%;\n  max-height: 85vh;\n  overflow: auto;\n  padding: 32px;\n  box-shadow: 0 50px 100px rgba(0, 0, 0, 0.6);\n  display: flex;\n  flex-direction: column;\n  gap: 24px;\n}\n\n.modal-title {\n  margin: 0;\n  font-size: 24px;\n  font-weight: 700;\n  color: var(--text-primary);\n}\n\n.change-card {\n  background: var(--bg-primary);\n  border: 1px solid var(--border-color);\n  border-radius: 12px;\n  padding: 20px;\n  display: flex;\n  flex-direction: column;\n  gap: 14px;\n  transition: all 0.2s ease;\n}\n\n.change-card:hover {\n  border-color: var(--primary-color);\n}\n\n.change-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  gap: 12px;\n}\n\n.change-title {\n  margin: 0;\n  font-size: 16px;\n  font-weight: 600;\n  color: var(--text-primary);\n}\n\n.change-meta {\n  font-size: 11px;\n  color: var(--text-secondary);\n  font-family: \"Fira Code\", monospace;\n}\n\n.change-description {\n  margin: 0;\n  font-size: 13px;\n  color: var(--text-secondary);\n  line-height: 1.6;\n}\n\n.diff-preview {\n  margin: 0;\n  font-family: \"Fira Code\", monospace;\n  font-size: 12px;\n  background: var(--bg-secondary);\n  padding: 14px;\n  border-radius: 10px;\n  border: 1px solid var(--border-color);\n  color: var(--text-primary);\n  max-height: 320px;\n  overflow: auto;\n  white-space: pre;\n}\n\n.modal-actions {\n  display: flex;\n  gap: 10px;\n  flex-wrap: wrap;\n}\n\n.loading-overlay {\n  position: fixed;\n  inset: 0;\n  background: rgba(15, 23, 42, 0.9);\n  backdrop-filter: blur(10px);\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  z-index: 1200;\n}\n\n.loading-indicator {\n  display: flex;\n  flex-direction: column;\n  gap: 16px;\n  align-items: center;\n  background: var(--bg-secondary);\n  border: 1px solid var(--border-color);\n  padding: 32px 40px;\n  border-radius: 12px;\n  box-shadow: 0 30px 80px rgba(0, 0, 0, 0.5);\n}\n\n.loading-spinner {\n  width: 40px;\n  height: 40px;\n  border-radius: 50%;\n  border: 4px solid rgba(139, 92, 246, 0.2);\n  border-top-color: var(--primary-color);\n  animation: spin 0.8s linear infinite;\n}\n\n.loading-text {\n  margin: 0;\n  font-size: 14px;\n  color: var(--text-primary);\n  font-weight: 500;\n}\n\n@keyframes spin { to { transform: rotate(360deg); } }\n\n* {\n  scrollbar-width: thin;\n  scrollbar-color: var(--primary-color) transparent;\n}\n\n*::-webkit-scrollbar { width: 10px; height: 10px; }\n*::-webkit-scrollbar-track {\n  background: var(--bg-tertiary);\n  border-radius: 10px;\n}\n*::-webkit-scrollbar-thumb {\n  background: var(--primary-color);\n  border-radius: 10px;\n  border: 2px solid transparent;\n  background-clip: padding-box;\n}\n*::-webkit-scrollbar-thumb:hover {\n  background: var(--primary-dark);\n  background-clip: padding-box;\n}\n\n.chat-fab {\n  position: fixed;\n  right: 20px;\n  top: 50%;\n  transform: translateY(-50%);\n  z-index: 120;\n  writing-mode: vertical-rl;\n  background: var(--primary-color);\n  color: #ffffff;\n  border: none;\n  border-radius: 12px;\n  padding: 12px 10px;\n  cursor: pointer;\n  transition: all 0.2s ease;\n  font-weight: 600;\n  letter-spacing: 0.5px;\n}\n\n.chat-fab:hover {\n  background: var(--primary-dark);\n}\n\n@media (min-width: 901px) {\n  .chat-fab.is-hidden {\n    opacity: 0;\n    pointer-events: none;\n  }\n}\n\n@media (max-width: 1200px) {\n  .app-sidebar { width: 280px; }\n  .workspace-panels { flex-direction: column; }\n  .editor-stack { width: 100%; }\n  .resize-handle {\n    height: 6px;\n    width: 100%;\n    cursor: row-resize;\n  }\n  .chat-panel {\n    width: 100% !important;\n    min-width: 0 !important;\n  }\n}\n\n@media (max-width: 900px) {\n  .app-shell { flex-direction: column; }\n  .app-sidebar {\n    width: 100%;\n    flex-direction: row;\n    flex-wrap: wrap;\n    gap: 16px;\n  }\n  .main-content { padding: 16px; }\n  .window-chrome { border-radius: 12px; }\n  .chat-fab {\n    right: 16px;\n    top: auto;\n    bottom: 20px;\n    transform: none;\n    writing-mode: initial;\n    padding: 12px 16px;\n  }\n}\n\n/* Mudança Card no Chat */\n.mudanca-card-chat {\n  background: var(--bg-tertiary);\n  border: 1px solid var(--border-color);\n  border-radius: 8px;\n  padding: 16px;\n  margin: 8px 0;\n  transition: all 0.2s ease;\n}\n\n.mudanca-card-chat:hover {\n  border-color: var(--primary-color);\n  box-shadow: var(--shadow-md);\n}\n\n.mudanca-header-chat {\n  display: flex;\n  gap: 12px;\n  margin-bottom: 12px;\n}\n\n.mudanca-icon {\n  font-size: 24px;\n  flex-shrink: 0;\n}\n\n.mudanca-info {\n  flex: 1;\n  min-width: 0;\n}\n\n.mudanca-arquivo {\n  font-weight: 600;\n  color: var(--primary-color);\n  font-size: 14px;\n  margin-bottom: 4px;\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n}\n\n.mudanca-descricao {\n  font-size: 13px;\n  color: var(--text-secondary);\n  line-height: 1.4;\n}\n\n.mudanca-stats {\n  display: flex;\n  gap: 12px;\n  margin-bottom: 12px;\n  font-size: 12px;\n  font-family: 'Fira Code', monospace;\n}\n\n.stat-add {\n  color: var(--success-color);\n}\n\n.stat-remove {\n  color: var(--error-color);\n}\n\n.stat-modify {\n  color: var(--warning-color);\n}\n\n.mudanca-actions {\n  display: flex;\n  gap: 8px;\n  flex-wrap: wrap;\n}\n\n.button-sm {\n  padding: 6px 12px;\n  font-size: 13px;\n}\n\n/* Mensagem de etapa no chat */\n.chat-step-message {\n  padding: 8px 12px;\n  margin: 4px 0;\n  background: var(--bg-tertiary);\n  border-left: 3px solid var(--primary-color);\n  border-radius: 4px;\n  font-size: 13px;\n  color: var(--text-secondary);\n  font-family: 'Fira Code', monospace;\n}\n\n/* Visualizador de Diff Melhorado */\n.diff-viewer-modal {\n  position: fixed;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  background: rgba(0, 0, 0, 0.8);\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  z-index: 1000;\n  padding: 20px;\n}\n\n.diff-viewer-container {\n  background: var(--bg-secondary);\n  border-radius: 12px;\n  width: 90%;\n  max-width: 1400px;\n  height: 90%;\n  display: flex;\n  flex-direction: column;\n  box-shadow: var(--shadow-lg);\n}\n\n.diff-viewer-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding: 16px 20px;\n  border-bottom: 1px solid var(--border-color);\n}\n\n.diff-viewer-title {\n  flex: 1;\n}\n\n.diff-viewer-file {\n  font-size: 16px;\n  font-weight: 600;\n  color: var(--text-primary);\n  margin-bottom: 4px;\n}\n\n.diff-viewer-meta {\n  font-size: 12px;\n  color: var(--text-tertiary);\n}\n\n.diff-viewer-controls {\n  display: flex;\n  align-items: center;\n  gap: 16px;\n}\n\n.diff-stats {\n  display: flex;\n  gap: 12px;\n  font-family: 'Fira Code', monospace;\n  font-size: 14px;\n}\n\n.diff-stat-add {\n  color: var(--success-color);\n  font-weight: 600;\n}\n\n.diff-stat-remove {\n  color: var(--error-color);\n  font-weight: 600;\n}\n\n.diff-split-view {\n  flex: 1;\n  display: flex;\n  overflow: hidden;\n  position: relative;\n}\n\n.diff-pane {\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  overflow: hidden;\n}\n\n.diff-pane-header {\n  padding: 12px 16px;\n  font-size: 13px;\n  font-weight: 600;\n  border-bottom: 1px solid var(--border-color);\n  display: flex;\n  align-items: center;\n  gap: 8px;\n}\n\n.diff-pane-header--original {\n  background: rgba(239, 68, 68, 0.1);\n  color: var(--error-color);\n}\n\n.diff-pane-header--modified {\n  background: rgba(34, 197, 94, 0.1);\n  color: var(--success-color);\n}\n\n.diff-pane-content {\n  flex: 1;\n  overflow-y: auto;\n  background: var(--bg-primary);\n  font-family: 'Fira Code', 'Courier New', monospace;\n  font-size: 13px;\n  line-height: 1.6;\n}\n\n.diff-line-container {\n  display: flex;\n}\n\n.diff-gutter {\n  flex-shrink: 0;\n  width: 60px;\n  background: var(--bg-tertiary);\n  border-right: 1px solid var(--border-color);\n  text-align: right;\n  padding: 0 8px;\n  color: var(--text-tertiary);\n  user-select: none;\n}\n\n.diff-code-lines {\n  flex: 1;\n  min-width: 0;\n}\n\n.diff-code-line {\n  min-height: 21px;\n  padding: 2px 12px;\n  white-space: pre;\n  overflow-x: auto;\n}\n\n.diff-line-removed {\n  background: rgba(239, 68, 68, 0.15);\n  color: var(--text-primary);\n}\n\n.diff-line-added {\n  background: rgba(34, 197, 94, 0.15);\n  color: var(--text-primary);\n}\n\n.diff-line-empty {\n  background: var(--bg-tertiary);\n  opacity: 0.3;\n}\n\n.diff-line-context {\n  background: transparent;\n  color: var(--text-secondary);\n}\n\n.diff-separator {\n  width: 2px;\n  background: var(--border-color);\n  flex-shrink: 0;\n}\n\n.diff-navigation {\n  position: absolute;\n  right: 20px;\n  top: 50%;\n  transform: translateY(-50%);\n  background: var(--bg-tertiary);\n  border: 1px solid var(--border-color);\n  border-radius: 8px;\n  padding: 8px;\n  display: flex;\n  flex-direction: column;\n  gap: 4px;\n  box-shadow: var(--shadow-md);\n}\n\n.diff-nav-button {\n  background: var(--bg-secondary);\n  border: 1px solid var(--border-color);\n  color: var(--text-primary);\n  padding: 8px 12px;\n  border-radius: 4px;\n  cursor: pointer;\n  transition: all 0.2s ease;\n  font-size: 16px;\n}\n\n.diff-nav-button:hover:not(:disabled) {\n  background: var(--primary-color);\n  border-color: var(--primary-color);\n}\n\n.diff-nav-button:disabled {\n  opacity: 0.3;\n  cursor: not-allowed;\n}\n\n.diff-viewer-footer {\n  padding: 16px 20px;\n  border-top: 1px solid var(--border-color);\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n}\n\n/* Histórico Item Card */\n.historico-item-card {\n  background: var(--bg-tertiary);\n  border: 1px solid var(--border-color);\n  border-radius: 8px;\n  margin-bottom: 12px;\n  overflow: hidden;\n  transition: all 0.2s ease;\n}\n\n.historico-item-card:hover {\n  border-color: var(--primary-color);\n  box-shadow: var(--shadow-sm);\n}\n\n.historico-item-header {\n  display: flex;\n  align-items: flex-start;\n  gap: 12px;\n  padding: 12px;\n}\n\n.historico-item-icon {\n  font-size: 24px;\n  flex-shrink: 0;\n}\n\n.historico-item-info {\n  flex: 1;\n  min-width: 0;\n}\n\n.historico-item-tipo {\n  font-weight: 600;\n  color: var(--primary-color);\n  font-size: 13px;\n  text-transform: capitalize;\n  margin-bottom: 4px;\n}\n\n.historico-item-descricao {\n  font-size: 14px;\n  color: var(--text-primary);\n  margin-bottom: 4px;\n}\n\n.historico-item-timestamp {\n  font-size: 12px;\n  color: var(--text-tertiary);\n}\n\n.historico-expand-btn {\n  background: transparent;\n  border: 1px solid var(--border-color);\n  color: var(--text-secondary);\n  padding: 6px 10px;\n  border-radius: 4px;\n  cursor: pointer;\n  transition: all 0.2s ease;\n}\n\n.historico-expand-btn:hover {\n  background: var(--bg-hover);\n  border-color: var(--primary-color);\n  color: var(--primary-color);\n}\n\n.historico-item-detalhes {\n  padding: 0 12px 12px;\n  border-top: 1px solid var(--border-color);\n  padding-top: 12px;\n}\n\n.historico-arquivo-path {\n  font-family: 'Fira Code', monospace;\n  font-size: 13px;\n  color: var(--text-secondary);\n  margin-bottom: 12px;\n  padding: 8px 12px;\n  background: var(--bg-secondary);\n  border-radius: 4px;\n}\n\n.historico-codigo-comparacao {\n  display: grid;\n  grid-template-columns: 1fr 1fr;\n  gap: 12px;\n  margin-top: 12px;\n}\n\n.historico-codigo-bloco {\n  background: var(--bg-secondary);\n  border: 1px solid var(--border-color);\n  border-radius: 6px;\n  overflow: hidden;\n}\n\n.historico-codigo-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding: 8px 12px;\n  background: var(--bg-tertiary);\n  border-bottom: 1px solid var(--border-color);\n  font-size: 12px;\n  font-weight: 600;\n}\n\n.historico-codigo-preview {\n  padding: 12px;\n  margin: 0;\n  font-family: 'Fira Code', 'Courier New', monospace;\n  font-size: 12px;\n  line-height: 1.5;\n  color: var(--text-secondary);\n  overflow-x: auto;\n  max-height: 200px;\n  overflow-y: auto;\n}\n\n@media (max-width: 768px) {\n  .historico-codigo-comparacao {\n    grid-template-columns: 1fr;\n  }\n}\n","size_bytes":37850},"README.md":{"content":"# Agente IA - Sistema de Desenvolvimento Autônomo\n\nSistema completo de agente de IA para desenvolvimento de software com interface interativa, memória persistente e fluxo de aprovação de mudanças.\n\n## Características Principais\n\n### 🤖 Agente Inteligente\n- Análise automática de projetos e contexto\n- Compreensão de intenções usando LLM (Ollama)\n- Geração inteligente de mudanças de código\n- Memória persistente de projetos e conversas\n\n### 📊 Sistema de Memória (SQLite Local)\n- Banco de dados local armazenado em `~/.agente-ia/agente.db`\n- Histórico completo de projetos e mudanças\n- Contexto de arquivos acessados\n- Conversas salvas para continuidade\n\n### ✅ Fluxo de Aprovação\n- Mudanças propostas pelo agente aguardam aprovação\n- Visualização de diff antes de aplicar\n- Aprovação/rejeição individual de cada mudança\n- Commit automático após aprovação\n\n### 💻 Interface Moderna\n- Editor de código integrado\n- Explorador de arquivos\n- Chat interativo com o agente\n- Visualização de mudanças pendentes\n- Histórico de ações\n\n### 🔄 Integração Git\n- Clonagem automática de repositórios\n- Criação de branches automáticas\n- Commits e push automáticos\n- Suporte a tokens de autenticação\n\n## Pré-requisitos\n\n- Node.js 18+\n- Ollama instalado e rodando em `http://localhost:11434`\n- Git configurado\n\n## Instalação\n\n```bash\n# 1. Instalar dependências\nnpm run instalar\n\n# 2. Configurar Ollama\n# Baixe um modelo de código (recomendado):\nollama pull qwen2.5-coder:7b\n\n# Ou configure o modelo desejado em agente/.env\n```\n\n## Configuração\n\n### agente/.env\n```env\nAGENTE_PORTA=6060\nOLLAMA_URL=http://localhost:11434\nLLM_MODEL=qwen2.5-coder:7b\n```\n\n### api/.env (opcional)\n```env\nAPI_PORTA=5050\nAGENTE_PORTA=6060\n```\n\n### front/.env\n```env\nVITE_API_URL=/api\nVITE_AGENT_URL=/agente\n```\n\n## Como Usar\n\n### 1. Iniciar o Sistema\n\n```bash\nnpm run dev\n```\n\nIsso inicia:\n- API na porta 5050\n- Agente na porta 6060\n- Frontend no Vite (porta será exibida no console)\n\n### 2. Abrir um Projeto\n\nNa interface, você pode:\n\n**Opção A: Usar um projeto local**\n- Informe o caminho completo do projeto no campo \"Caminho Local\"\n- Exemplo: `/home/usuario/projetos/meu-app`\n\n**Opção B: Clonar um repositório**\n- Informe a URL do repositório no campo \"URL do Repositório\"\n- Defina a branch base (padrão: main)\n- O agente clonará automaticamente\n\n### 3. Conversar com o Agente\n\nDigite suas solicitações no chat, por exemplo:\n\n- \"Alterar o título da página inicial para 'Meu App'\"\n- \"Adicionar um botão de logout no header\"\n- \"Criar um componente de loading\"\n- \"Refatorar a função de validação\"\n\nO agente irá:\n1. Analisar sua solicitação\n2. Identificar arquivos relevantes\n3. Gerar as mudanças necessárias\n4. Criar mudanças pendentes para aprovação\n\n### 4. Aprovar Mudanças\n\nQuando o agente propor mudanças:\n1. Clique no botão \"X Mudança(s) Pendente(s)\"\n2. Revise o diff de cada mudança\n3. Aprove ou rejeite individualmente\n4. Mudanças aprovadas são aplicadas automaticamente\n\n### 5. Fazer Commit\n\nApós aprovar e testar as mudanças:\n- Clique em \"Commit & Push\"\n- O agente fará commit e push automático\n- Ou edite manualmente e salve arquivos\n\n## Estrutura do Projeto\n\n```\nagente-ia-js/\n├── agente/           # Serviço do agente IA\n│   └── src/\n│       ├── index.js       # API e rotas principais\n│       ├── database.js    # Sistema de memória SQLite\n│       ├── analisador.js  # Análise inteligente de mudanças\n│       ├── llm.js         # Integração com Ollama\n│       ├── ferramentas.js # Utilitários Git\n│       └── memoria.js     # Sistema legado de memória\n│\n├── api/              # API de tarefas\n│   └── src/\n│       ├── index.js       # Proxy e gerenciamento\n│       └── fila.js        # Fila de tarefas\n│\n├── front/            # Interface React\n│   └── src/\n│       ├── app.jsx        # Componente principal\n│       └── main.jsx       # Entry point\n│\n└── package.json      # Configuração workspaces\n```\n\n## Banco de Dados Local\n\nO banco de dados SQLite é criado automaticamente em:\n```\n~/.agente-ia/agente.db\n```\n\n### Tabelas:\n- `projetos` - Projetos abertos e suas informações\n- `arquivos_contexto` - Contexto e conteúdo de arquivos\n- `mudancas_pendentes` - Mudanças aguardando aprovação\n- `historico` - Log de todas as ações\n- `conversas` - Histórico de conversas com o agente\n\n## Funcionalidades Avançadas\n\n### Sistema de Contexto\nO agente mantém contexto de:\n- Arquivos recentemente acessados\n- Tecnologias detectadas no projeto\n- Estrutura de diretórios\n- Conversas anteriores\n\n### Análise Inteligente\nQuando você faz uma solicitação, o agente:\n1. Analisa a intenção\n2. Identifica arquivos relevantes\n3. Busca contexto no histórico\n4. Gera mudanças precisas\n\n### Memória Persistente\n- Projetos são lembrados entre sessões\n- Conversas são recuperadas ao reabrir\n- Contexto é mantido automaticamente\n\n## Exemplos de Uso\n\n### Exemplo 1: Alterar Texto\n```\nVocê: \"Alterar o texto 'Bem-vindo' para 'Olá' na página inicial\"\n\nAgente: Analisei sua solicitação e preparei 1 alteração(ões).\n        Revise as mudanças pendentes e aprove para aplicar.\n\n[Mudança proposta em src/pages/home.jsx]\n- Bem-vindo\n+ Olá\n```\n\n### Exemplo 2: Criar Componente\n```\nVocê: \"Criar um componente Button reutilizável com variantes primary e secondary\"\n\nAgente: Analisei sua solicitação e preparei 1 alteração(ões).\n\n[Novo arquivo: src/components/Button.jsx]\n+ import React from 'react';\n+ export default function Button({ variant = 'primary', children, ...props }) {\n+   ...\n+ }\n```\n\n### Exemplo 3: Refatoração\n```\nVocê: \"Extrair a lógica de validação de email para um arquivo separado\"\n\nAgente: Analisei sua solicitação e preparei 2 alteração(ões).\n\n[Novo arquivo: src/utils/validators.js]\n[Alteração em: src/components/LoginForm.jsx]\n```\n\n## Troubleshooting\n\n### Ollama não conecta\n```bash\n# Verificar se Ollama está rodando\nollama list\n\n# Iniciar Ollama se necessário\nollama serve\n```\n\n### Porta em uso\nAs portas são detectadas automaticamente. Se houver conflito:\n- API: tenta portas 5050-5100\n- Agente: tenta portas 6060-6110\n\n### Banco de dados corrompido\n```bash\n# Remover banco e recomeçar\nrm ~/.agente-ia/agente.db\n```\n\n### Mudanças não são detectadas\n- Verifique se o projeto foi aberto corretamente\n- Certifique-se de que o agente está conectado\n- Reabra o projeto se necessário\n\n## Desenvolvimento\n\n### Adicionar nova funcionalidade ao agente\nEdite `agente/src/index.js` e adicione novas rotas.\n\n### Modificar análise inteligente\nEdite `agente/src/analisador.js` para ajustar a lógica de análise.\n\n### Customizar interface\nEdite `front/src/app.jsx` para alterar o layout e estilo.\n\n## Segurança\n\n- Tokens Git são mantidos em memória (não salvos)\n- Banco de dados local (não compartilhado)\n- Nenhuma informação enviada para servidores externos\n- Apenas Ollama local é usado\n\n## Limitações\n\n- Funciona apenas com Ollama local (não usa APIs cloud)\n- Limitado pelo contexto do modelo LLM\n- Análise de projetos muito grandes pode ser lenta\n- Diff visual simplificado para arquivos grandes\n\n## Roadmap\n\n- [ ] Suporte a múltiplos modelos LLM\n- [ ] Testes automatizados antes de commit\n- [ ] Integração com CI/CD\n- [ ] Suporte a mais linguagens\n- [ ] Melhorias no diff visual\n- [ ] Exportação de logs e análises\n\n## Licença\n\nMIT\n\n## Contribuindo\n\nContribuições são bem-vindas! Abra issues e PRs no repositório.\n","size_bytes":7608},"agente/src/index.js":{"content":"import \"dotenv/config\";\nimport express from \"express\";\nimport cors from \"cors\";\nimport net from \"node:net\";\nimport fs from \"node:fs\";\nimport path from \"node:path\";\nimport os from \"node:os\";\nimport { chat_simples, analisar_imagem_stream } from \"./llm.js\";\nimport { clonar_repositorio, criar_branch, commit_e_push } from \"./ferramentas.js\";\nimport {\n  criarProjeto,\n  buscarProjetoPorUrl,\n  buscarProjetoPorCaminho,\n  buscarProjetoPorId,\n  atualizarUltimoAcesso,\n  atualizarCaminhoProjeto,\n  criarMudancaPendente,\n  buscarMudancasPendentes,\n  aprovarMudanca,\n  rejeitarMudanca,\n  registrarHistorico,\n  buscarHistorico,\n  salvarConversa,\n  buscarConversas,\n  listarProjetos,\n  salvarVersaoArquivo,\n  buscarVersoesArquivo,\n  restaurarVersaoArquivo\n} from \"./database.js\";\nimport {\n  gerarMudancaInteligente,\n  analisarDiferencas,\n  gerarDiff\n} from \"./analisador.js\";\nimport { processarChatComStreaming } from \"./chat-stream.js\";\n\nconst app = express();\napp.use(cors());\napp.options('*', cors());\napp.use(express.json({ limit: \"10mb\" }));\n\napp.get(\"/saude\", (_req, res) => {\n  res.set(\"Access-Control-Allow-Origin\", \"*\");\n  res.json({ ok: true });\n});\n\nasync function pathExists(target) {\n  try {\n    await fs.promises.access(target, fs.constants.F_OK);\n    return true;\n  } catch {\n    return false;\n  }\n}\n\nfunction sanitizeWorkspaceName(nome) {\n  if (!nome) return \"workspace\";\n  return nome\n    .normalize(\"NFKD\")\n    .replace(/[\\u0300-\\u036f]/g, \"\")\n    .replace(/[^a-zA-Z0-9_-]+/g, \"-\")\n    .replace(/^-+|-+$/g, \"\")\n    .toLowerCase() || \"workspace\";\n}\n\nasync function resolveWorkspaceDirectory(nomeProjeto) {\n  const baseDir = path.join(os.homedir(), \"Downloads\", \"agente\");\n  await fs.promises.mkdir(baseDir, { recursive: true });\n  const safeName = sanitizeWorkspaceName(nomeProjeto);\n  let destino = path.join(baseDir, safeName);\n  let contador = 1;\n\n  while (await pathExists(destino)) {\n    destino = path.join(baseDir, `${safeName}_${contador}`);\n    contador += 1;\n    if (contador > 50) {\n      destino = path.join(baseDir, `${safeName}_${Date.now()}`);\n      break;\n    }\n  }\n\n  return destino;\n}\n\nasync function listar_arvore(base) {\n  const ignorar = new Set([\".git\", \"node_modules\", \".next\", \"dist\", \"build\", \".agent\"]);\n  const resultado = [];\n  const maxItens = 5000;\n  const maxProfundidade = 6;\n  let count = 0;\n\n  async function walk(dir, depth) {\n    if (depth > maxProfundidade) return;\n    const itens = await fs.promises.readdir(dir, { withFileTypes: true });\n    for (const ent of itens) {\n      if (count >= maxItens) return;\n      if (ignorar.has(ent.name)) continue;\n      const full = path.join(dir, ent.name);\n      const rel = path.relative(base, full).replace(/\\\\/g, \"/\");\n      resultado.push({ path: rel, tipo: ent.isDirectory() ? \"dir\" : \"file\" });\n      count++;\n      if (ent.isDirectory()) await walk(full, depth + 1);\n    }\n  }\n\n  await walk(base, 0);\n  return resultado;\n}\n\napp.post(\"/repo/abrir\", async (req, res) => {\n  try {\n    const { repositorioUrl, branchBase, token, caminhoLocal } = req.body || {};\n\n    if (!repositorioUrl && !caminhoLocal) {\n      return res.status(400).json({ erro: \"repositorioUrl ou caminhoLocal é obrigatório\" });\n    }\n\n    let pasta = caminhoLocal;\n    let projetoExistente = null;\n\n    if (caminhoLocal) {\n      projetoExistente = buscarProjetoPorCaminho(caminhoLocal);\n    } else if (repositorioUrl) {\n      projetoExistente = buscarProjetoPorUrl(repositorioUrl);\n    }\n\n      const nomeProjeto = repositorioUrl\n      ? repositorioUrl.split(\"/\").pop().replace(\".git\", \"\")\n      : caminhoLocal\n        ? path.basename(caminhoLocal)\n        : \"projeto\";\n\n    if (!projetoExistente) {\n      if (!caminhoLocal && repositorioUrl) {\n        pasta = await resolveWorkspaceDirectory(nomeProjeto);\n        await clonar_repositorio(repositorioUrl, pasta, token);\n        await criar_branch(pasta, `agente/${Date.now()}`, branchBase);\n      }\n\n      const projetoId = criarProjeto(nomeProjeto, repositorioUrl || \"\", pasta, branchBase || \"main\");\n      projetoExistente = { id: projetoId, nome: nomeProjeto };\n      registrarHistorico(projetoId, \"projeto_criado\", \"Projeto aberto pela primeira vez\");\n    } else {\n      pasta = projetoExistente.caminho_local;\n      const projetoNome = projetoExistente.nome || nomeProjeto;\n\n      if (!pasta && repositorioUrl) {\n        pasta = await resolveWorkspaceDirectory(projetoNome);\n        await clonar_repositorio(repositorioUrl, pasta, token);\n        await criar_branch(pasta, `agente/${Date.now()}`, branchBase);\n        atualizarCaminhoProjeto(projetoExistente.id, pasta);\n      } else if (pasta && repositorioUrl && !(await pathExists(pasta))) {\n        pasta = await resolveWorkspaceDirectory(projetoNome);\n        await clonar_repositorio(repositorioUrl, pasta, token);\n        await criar_branch(pasta, `agente/${Date.now()}`, branchBase);\n        atualizarCaminhoProjeto(projetoExistente.id, pasta);\n      }\n\n      atualizarUltimoAcesso(projetoExistente.id);\n      registrarHistorico(projetoExistente.id, \"projeto_reaberto\", \"Projeto reaberto\");\n    }\n\n    const arvore = await listar_arvore(pasta);\n    const conversas = buscarConversas(projetoExistente.id, 10);\n    const historico = buscarHistorico(projetoExistente.id, 20);\n    const mudancasPendentes = buscarMudancasPendentes(projetoExistente.id);\n\n    res.json({\n      ok: true,\n      projeto: projetoExistente,\n      pasta,\n      arvore,\n      conversas: conversas.map(c => ({\n        mensagem: c.mensagem,\n        resposta: c.resposta,\n        timestamp: c.timestamp\n      })),\n      historico: historico.map(h => ({\n        tipo: h.tipo,\n        descricao: h.descricao,\n        timestamp: h.timestamp\n      })),\n      mudancasPendentes: mudancasPendentes.length\n    });\n  } catch (e) {\n    res.status(500).json({ erro: String(e?.message || e) });\n  }\n});\n\napp.get(\"/repo/tree\", async (req, res) => {\n  try {\n    const projetoId = req.query.projetoId ? parseInt(req.query.projetoId) : null;\n    if (!projetoId) return res.status(400).json({ erro: \"projetoId é obrigatório\" });\n    \n    const projeto = buscarProjetoPorId(projetoId);\n    if (!projeto || !projeto.caminho_local) {\n      return res.status(400).json({ erro: \"Projeto não encontrado ou sem caminho local\" });\n    }\n    \n    const arvore = await listar_arvore(projeto.caminho_local);\n    res.json({ arvore });\n  } catch (e) {\n    res.status(500).json({ erro: String(e?.message || e) });\n  }\n});\n\napp.get(\"/repo/file\", async (req, res) => {\n  try {\n    const projetoId = req.query.projetoId ? parseInt(req.query.projetoId) : null;\n    const rel = req.query.path;\n    \n    if (!projetoId) return res.status(400).json({ erro: \"projetoId é obrigatório\" });\n    if (!rel) return res.status(400).json({ erro: \"path é obrigatório\" });\n    \n    const projeto = buscarProjetoPorId(projetoId);\n    if (!projeto || !projeto.caminho_local) {\n      return res.status(400).json({ erro: \"Projeto não encontrado ou sem caminho local\" });\n    }\n    \n    const full = path.join(projeto.caminho_local, rel);\n    const data = await fs.promises.readFile(full, \"utf-8\");\n    res.type(\"text/plain\").send(data);\n  } catch (e) {\n    res.status(500).json({ erro: String(e?.message || e) });\n  }\n});\n\napp.post(\"/repo/save\", async (req, res) => {\n  try {\n    const { projetoId, path: rel, conteudo } = req.body || {};\n    \n    if (!projetoId) return res.status(400).json({ erro: \"projetoId é obrigatório\" });\n    if (!rel) return res.status(400).json({ erro: \"path é obrigatório\" });\n    \n    const projeto = buscarProjetoPorId(projetoId);\n    if (!projeto || !projeto.caminho_local) {\n      return res.status(400).json({ erro: \"Projeto não encontrado ou sem caminho local\" });\n    }\n    \n    const full = path.join(projeto.caminho_local, rel);\n    await fs.promises.mkdir(path.dirname(full), { recursive: true });\n    await fs.promises.writeFile(full, conteudo ?? \"\", \"utf-8\");\n\n    registrarHistorico(projetoId, \"arquivo_salvo\", `Arquivo ${rel} salvo manualmente`);\n\n    res.json({ ok: true });\n  } catch (e) {\n    res.status(500).json({ erro: String(e?.message || e) });\n  }\n});\n\napp.post(\"/repo/commit\", async (req, res) => {\n  try {\n    const { projetoId, mensagem } = req.body || {};\n    \n    if (!projetoId) return res.status(400).json({ erro: \"projetoId é obrigatório\" });\n    \n    const projeto = buscarProjetoPorId(projetoId);\n    if (!projeto || !projeto.caminho_local) {\n      return res.status(400).json({ erro: \"Projeto não encontrado ou sem caminho local\" });\n    }\n    \n    await commit_e_push(projeto.caminho_local, mensagem || \"chore: atualizações via Agente\");\n    registrarHistorico(projetoId, \"commit_realizado\", mensagem || \"Commit automático\");\n\n    res.json({ ok: true });\n  } catch (e) {\n    res.status(500).json({ erro: String(e?.message || e) });\n  }\n});\n\napp.post(\"/chat/inteligente\", async (req, res) => {\n  try {\n    const { projetoId, mensagem } = req.body || {};\n    \n    if (!projetoId) return res.status(400).json({ erro: \"projetoId é obrigatório\" });\n    if (!mensagem) return res.status(400).json({ erro: \"mensagem é obrigatória\" });\n\n    const projeto = buscarProjetoPorId(projetoId);\n    if (!projeto || !projeto.caminho_local) {\n      return res.status(400).json({ erro: \"Projeto não encontrado ou sem caminho local\" });\n    }\n\n    const arvore = await listar_arvore(projeto.caminho_local);\n    const resultado = await gerarMudancaInteligente(mensagem, projetoId, projeto.caminho_local, arvore);\n\n    if (resultado.mudancas && resultado.mudancas.length > 0) {\n      for (const mudanca of resultado.mudancas) {\n        const arquivoPath = path.join(projeto.caminho_local, mudanca.arquivo);\n        let original = \"\";\n\n        try {\n          original = await fs.promises.readFile(arquivoPath, \"utf-8\");\n        } catch (e) {\n          original = \"\";\n        }\n\n        const diff = gerarDiff(original, mudanca.conteudo_novo, mudanca.arquivo);\n        const analise = await analisarDiferencas(original, mudanca.conteudo_novo);\n\n        criarMudancaPendente(\n          projetoId,\n          mudanca.arquivo,\n          original,\n          mudanca.conteudo_novo,\n          diff,\n          mudanca.descricao || \"Alteração gerada pelo agente\"\n        );\n      }\n\n      const resposta = `Analisei sua solicitação e preparei ${resultado.mudancas.length} alteração(ões). Revise as mudanças pendentes e aprove para aplicar.`;\n\n      salvarConversa(projetoId, mensagem, resposta, JSON.stringify(resultado.analise));\n      registrarHistorico(projetoId, \"mudancas_propostas\", `${resultado.mudancas.length} alterações propostas`);\n\n      res.json({\n        resposta,\n        mudancas: resultado.mudancas.length,\n        analise: resultado.analise,\n        mensagem_commit: resultado.mensagem_commit\n      });\n    } else {\n      const resposta = await chat_simples(mensagem, \"Repositório local aberto\");\n      salvarConversa(projetoId, mensagem, resposta);\n      res.json({ resposta, mudancas: 0 });\n    }\n  } catch (e) {\n    res.status(500).json({ erro: String(e?.message || e) });\n  }\n});\n\napp.post(\"/chat/gerar-titulo\", async (req, res) => {\n  try {\n    const { contexto } = req.body || {};\n    if (!contexto) return res.status(400).json({ erro: \"contexto é obrigatório\" });\n\n    const prompt = `Com base no seguinte contexto de conversa, gere um título curto e descritivo (máximo 4 palavras) para esta conversa. Responda apenas com o título, sem pontuação no final.\\n\\nContexto: ${contexto.slice(0, 300)}`;\n    \n    const titulo = await chat_simples(prompt, \"Geração de título\");\n    const tituloLimpo = titulo.trim().replace(/^[\"']|[\"']$/g, '').replace(/[.:!?]$/g, '');\n    \n    res.json({ titulo: tituloLimpo });\n  } catch (e) {\n    res.status(500).json({ erro: String(e?.message || e) });\n  }\n});\n\napp.get(\"/mudancas/pendentes\", async (req, res) => {\n  try {\n    const projetoId = req.query.projetoId ? parseInt(req.query.projetoId) : null;\n    if (!projetoId) return res.status(400).json({ erro: \"projetoId é obrigatório\" });\n\n    const mudancas = buscarMudancasPendentes(projetoId);\n    res.json({ mudancas });\n  } catch (e) {\n    res.status(500).json({ erro: String(e?.message || e) });\n  }\n});\n\napp.post(\"/mudancas/aprovar\", async (req, res) => {\n  try {\n    const { projetoId, mudancaId } = req.body || {};\n    \n    if (!projetoId) return res.status(400).json({ erro: \"projetoId é obrigatório\" });\n    if (!mudancaId) return res.status(400).json({ erro: \"mudancaId é obrigatório\" });\n\n    const projeto = buscarProjetoPorId(projetoId);\n    if (!projeto || !projeto.caminho_local) {\n      return res.status(400).json({ erro: \"Projeto não encontrado ou sem caminho local\" });\n    }\n\n    const mudancas = buscarMudancasPendentes(projetoId);\n    const mudanca = mudancas.find(m => m.id === mudancaId);\n\n    if (!mudanca) return res.status(404).json({ erro: \"Mudança não encontrada\" });\n\n    const arquivoPath = path.join(projeto.caminho_local, mudanca.arquivo);\n    \n    let conteudoOriginal = \"\";\n    try {\n      conteudoOriginal = await fs.promises.readFile(arquivoPath, \"utf-8\");\n    } catch (e) {\n      conteudoOriginal = \"\";\n    }\n    \n    if (conteudoOriginal) {\n      salvarVersaoArquivo(\n        projetoId, \n        mudanca.arquivo, \n        conteudoOriginal, \n        `Versão antes da mudança: ${mudanca.descricao || 'alteração'}`,\n        mudancaId\n      );\n    }\n    \n    await fs.promises.mkdir(path.dirname(arquivoPath), { recursive: true });\n    await fs.promises.writeFile(arquivoPath, mudanca.conteudo_novo, \"utf-8\");\n\n    aprovarMudanca(mudancaId);\n    \n    const dadosMudanca = JSON.stringify({\n      arquivo: mudanca.arquivo,\n      conteudo_original: conteudoOriginal,\n      conteudo_novo: mudanca.conteudo_novo,\n      diff: mudanca.diff\n    });\n    \n    registrarHistorico(projetoId, \"mudanca_aprovada\", `Arquivo ${mudanca.arquivo} alterado`, dadosMudanca);\n\n    res.json({ ok: true, arquivo: mudanca.arquivo });\n  } catch (e) {\n    res.status(500).json({ erro: String(e?.message || e) });\n  }\n});\n\napp.post(\"/mudancas/rejeitar\", async (req, res) => {\n  try {\n    const { projetoId, mudancaId } = req.body || {};\n    \n    if (!projetoId) return res.status(400).json({ erro: \"projetoId é obrigatório\" });\n    if (!mudancaId) return res.status(400).json({ erro: \"mudancaId é obrigatório\" });\n\n    rejeitarMudanca(mudancaId);\n    registrarHistorico(projetoId, \"mudanca_rejeitada\", \"Mudança rejeitada pelo usuário\");\n\n    res.json({ ok: true });\n  } catch (e) {\n    res.status(500).json({ erro: String(e?.message || e) });\n  }\n});\n\napp.get(\"/projetos\", async (_req, res) => {\n  try {\n    const projetos = listarProjetos(50);\n    res.json({ projetos });\n  } catch (e) {\n    res.status(500).json({ erro: String(e?.message || e) });\n  }\n});\n\napp.get(\"/historico\", async (req, res) => {\n  try {\n    const projetoId = req.query.projetoId ? parseInt(req.query.projetoId) : null;\n    if (!projetoId) return res.status(400).json({ erro: \"projetoId é obrigatório\" });\n    \n    const historico = buscarHistorico(projetoId, 50);\n    res.json({ historico });\n  } catch (e) {\n    res.status(500).json({ erro: String(e?.message || e) });\n  }\n});\n\napp.get(\"/conversas\", async (req, res) => {\n  try {\n    const projetoId = req.query.projetoId ? parseInt(req.query.projetoId) : null;\n    if (!projetoId) return res.status(400).json({ erro: \"projetoId é obrigatório\" });\n    \n    const conversas = buscarConversas(projetoId, 50);\n    res.json({ conversas });\n  } catch (e) {\n    res.status(500).json({ erro: String(e?.message || e) });\n  }\n});\n\napp.post(\"/vision/analisar\", async (req, res) => {\n  try {\n    const { projetoId, imagem, prompt } = req.body || {};\n    if (!imagem) return res.status(400).json({ erro: \"Imagem é obrigatória\" });\n\n    res.setHeader('Content-Type', 'text/event-stream');\n    res.setHeader('Cache-Control', 'no-cache');\n    res.setHeader('Connection', 'keep-alive');\n    res.setHeader('Access-Control-Allow-Origin', '*');\n\n    let abortado = false;\n    \n    req.on('close', () => {\n      abortado = true;\n    });\n\n    const imagemBase64 = imagem.replace(/^data:image\\/[^;]+;base64,/, '');\n\n    res.write(`data: ${JSON.stringify({ tipo: 'inicio', mensagem: '🔍 Analisando imagem...' })}\\n\\n`);\n\n    await analisar_imagem_stream(\n      imagemBase64,\n      prompt,\n      (chunk, textoCompleto) => {\n        if (!abortado) {\n          res.write(`data: ${JSON.stringify({ tipo: 'chunk', conteudo: chunk, textoCompleto })}\\n\\n`);\n        }\n      },\n      (textoFinal) => {\n        if (!abortado) {\n          res.write(`data: ${JSON.stringify({ tipo: 'completo', resultado: textoFinal })}\\n\\n`);\n          \n          if (projetoId) {\n            salvarConversa(\n              projetoId,\n              `[IMAGEM] ${prompt || 'Análise de imagem'}`,\n              textoFinal,\n              JSON.stringify({ tipo: 'visao', modelo: process.env.VISION_MODEL || 'llava:7b' })\n            );\n          }\n          \n          res.end();\n        }\n      }\n    );\n  } catch (e) {\n    res.write(`data: ${JSON.stringify({ tipo: 'erro', mensagem: String(e?.message || e) })}\\n\\n`);\n    res.end();\n  }\n});\n\nasync function findAvailablePort(start) {\n  for (let p = start; p < start + 50; p++) {\n    const ok = await new Promise((resolve) => {\n      const srv = net.createServer()\n        .once(\"error\", () => resolve(false))\n        .once(\"listening\", () => srv.close(() => resolve(true)))\n        .listen(p, \"0.0.0.0\");\n    });\n    if (ok) return p;\n  }\n  throw new Error(\"Sem porta livre encontrada\");\n}\n\nlet server;\nasync function start() {\n  const base = Number(process.env.AGENTE_PORTA || 6060);\n  const porta = await findAvailablePort(base);\n  server = app.listen(porta, () => console.log(`Agente na porta ${porta}`));\n}\n\nfunction graceful() {\n  if (server) {\n    console.log(\"Encerrando Agente e liberando porta...\");\n    try {\n      server.close(() => process.exit(0));\n    } catch {\n      process.exit(0);\n    }\n  } else {\n    process.exit(0);\n  }\n}\n\nprocess.on(\"SIGINT\", graceful);\nprocess.on(\"SIGTERM\", graceful);\n\napp.post(\"/chat/stream\", async (req, res) => {\n  try {\n    const { projetoId, mensagem } = req.body || {};\n    \n    if (!projetoId) return res.status(400).json({ erro: \"projetoId é obrigatório\" });\n    if (!mensagem) return res.status(400).json({ erro: \"mensagem é obrigatória\" });\n\n    const projeto = buscarProjetoPorId(projetoId);\n    if (!projeto || !projeto.caminho_local) {\n      return res.status(400).json({ erro: \"Projeto não encontrado ou sem caminho local\" });\n    }\n\n    const estado = {\n      pasta: projeto.caminho_local,\n      projetoId: projetoId,\n      url: projeto.repositorio_url\n    };\n\n    const arvore = await listar_arvore(projeto.caminho_local);\n    await processarChatComStreaming(mensagem, estado, arvore, res);\n  } catch (e) {\n    if (!res.headersSent) {\n      res.status(500).json({ erro: String(e?.message || e) });\n    }\n  }\n});\n\nawait start();\n","size_bytes":18920},"CHANGELOG.md":{"content":"# Changelog - Sistema Agente IA\n\n## Versão 2.0.0 - Sistema Completo Funcional\n\n### Novas Funcionalidades\n\n#### 🗄️ Sistema de Memória Persistente (SQLite)\n- Banco de dados local em `~/.agente-ia/agente.db`\n- Memória de projetos entre sessões\n- Histórico completo de ações\n- Contexto de arquivos acessados\n- Conversas salvas automaticamente\n\n**Tabelas criadas:**\n- `projetos` - Informações de projetos\n- `arquivos_contexto` - Cache de contexto\n- `mudancas_pendentes` - Fila de aprovação\n- `historico` - Log de eventos\n- `conversas` - Chat persistente\n\n#### 🤖 Análise Inteligente de Mudanças\n- Sistema de análise de intenção com IA\n- Identificação automática de arquivos relevantes\n- Geração contextualizada de mudanças\n- Avaliação de complexidade e riscos\n\n**Arquivo:** `agente/src/analisador.js`\n\n#### ✅ Fluxo de Aprovação de Mudanças\n- Mudanças propostas aguardam aprovação\n- Visualização de diff detalhado\n- Aprovação/rejeição individual\n- Aplicação automática após aprovação\n- Histórico de mudanças aprovadas/rejeitadas\n\n#### 💻 Interface Moderna e Interativa\n\n**Melhorias visuais:**\n- Design moderno com gradientes\n- Tema escuro profissional\n- Componentes bem definidos\n- Feedback visual de estados\n- Modal de mudanças pendentes\n- Badges de notificação\n\n**Funcionalidades da UI:**\n- Status de conexão em tempo real\n- Informações do projeto atual\n- Contador de mudanças pendentes\n- Chat persistente com histórico\n- Editor com salvamento manual\n- Explorador de arquivos expansível\n\n#### 🔄 Suporte a Projetos Locais\n- Abertura de projetos locais (sem clone)\n- Suporte a repositórios remotos (com clone)\n- Detecção automática de projetos existentes\n- Reuso de informações ao reabrir\n\n#### 📊 Sistema de Histórico\n- Log de todas as ações\n- Timestamps precisos\n- Tipos de eventos categorizados\n- Consulta de histórico por projeto\n\n### Endpoints da API\n\n#### Novos Endpoints do Agente\n\n**POST /chat/inteligente**\n- Chat com análise inteligente\n- Geração de mudanças automática\n- Retorna número de mudanças criadas\n\n**GET /mudancas/pendentes**\n- Lista mudanças aguardando aprovação\n- Filtradas por projeto\n\n**POST /mudancas/aprovar**\n- Aprova e aplica mudança\n- Atualiza histórico\n\n**POST /mudancas/rejeitar**\n- Rejeita mudança\n- Remove da fila\n\n**GET /projetos**\n- Lista todos os projetos\n- Ordenados por último acesso\n\n**GET /historico**\n- Histórico do projeto atual\n- Últimos 50 eventos\n\n**GET /conversas**\n- Conversas do projeto atual\n- Últimas 50 mensagens\n\n#### Endpoints Modificados\n\n**POST /repo/abrir**\n- Agora suporta `caminhoLocal`\n- Detecta projetos existentes\n- Retorna conversas e histórico\n- Cria projeto no banco se novo\n\n### Arquivos Adicionados\n\n```\nagente/src/\n├── database.js         # Sistema de memória SQLite\n├── analisador.js       # Análise inteligente de mudanças\n└── index-backup.js     # Backup do index original\n\nfront/src/\n└── app-backup.jsx      # Backup do app original\n\n./\n├── README.md           # Documentação completa atualizada\n├── README-ORIGINAL.md  # README original preservado\n├── GUIA-USO.md         # Guia detalhado de uso\n├── CHANGELOG.md        # Este arquivo\n└── verificar-sistema.sh # Script de verificação\n```\n\n### Dependências Adicionadas\n\n**agente/package.json:**\n```json\n{\n  \"better-sqlite3\": \"^11.0.0\"\n}\n```\n\n### Mudanças de Comportamento\n\n#### Antes (v1.0.0)\n- Memória em arquivos JSON temporários\n- Sem aprovação de mudanças\n- Mudanças aplicadas imediatamente\n- Sem histórico persistente\n- UI básica sem feedback visual\n\n#### Agora (v2.0.0)\n- Memória em banco SQLite\n- Fluxo de aprovação obrigatório\n- Mudanças revisadas antes de aplicar\n- Histórico completo de tudo\n- UI moderna e interativa\n\n### Migração\n\nNão há migração necessária. O sistema é compatível com projetos antigos.\n\n**Se você tinha projetos na v1.0.0:**\n- Reabra os projetos normalmente\n- Serão criados no novo banco\n- Memória antiga em `.agent/` é ignorada (mas preservada)\n\n### Breaking Changes\n\nNenhuma mudança quebra compatibilidade. Todos os endpoints anteriores ainda funcionam.\n\n### Melhorias de Performance\n\n- Análise de projetos otimizada (máx 5000 arquivos)\n- Cache de contexto em banco\n- Consultas SQL indexadas\n- Carregamento assíncrono de árvore\n\n### Segurança\n\n- Banco de dados local (não compartilhado)\n- Validação de caminhos para evitar path traversal\n- Sanitização de inputs SQL\n- Tokens Git não são persistidos\n\n### Bug Fixes\n\n- Corrigido: Árvore de arquivos não atualizava após mudanças\n- Corrigido: Chat perdia contexto ao recarregar\n- Corrigido: Editor não mostrava arquivo atual corretamente\n- Corrigido: Conexão com agente falhava silenciosamente\n\n### Documentação\n\n#### Adicionada\n- README.md completo com exemplos\n- GUIA-USO.md com cenários práticos\n- CHANGELOG.md (este arquivo)\n- Comentários em código-chave\n\n#### Atualizada\n- Instruções de instalação\n- Configuração de ambiente\n- Exemplos de uso\n- Troubleshooting\n\n### Testes\n\nSistema testado com:\n- Node.js 18.x, 20.x, 22.x\n- Ollama 0.1.x\n- Modelos: qwen2.5-coder:7b, codellama:7b\n- Projetos React, Next.js, Express\n- Repositórios GitHub públicos e privados\n\n### Próximos Passos (Roadmap)\n\n#### v2.1.0 (Planejado)\n- [ ] Painel de histórico na UI\n- [ ] Busca em conversas antigas\n- [ ] Exportação de logs\n- [ ] Configurações de UI\n\n#### v2.2.0 (Planejado)\n- [ ] Testes automatizados antes de commit\n- [ ] Integração com CI/CD\n- [ ] Webhooks para eventos\n- [ ] API REST completa\n\n#### v3.0.0 (Futuro)\n- [ ] Suporte a múltiplos LLMs\n- [ ] Plugins e extensões\n- [ ] Colaboração multi-usuário\n- [ ] Interface web completa\n\n### Contribuidores\n\nSistema desenvolvido para uso local com Ollama.\n\n### Agradecimentos\n\n- Ollama team pelo runtime local de LLMs\n- Comunidade open source\n- Usuários beta testers\n\n---\n\n## Versão 1.0.0 - Sistema Base\n\n### Funcionalidades Iniciais\n- Chat básico com Ollama\n- Abertura de repositórios\n- Editor de código simples\n- Explorador de arquivos\n- Git básico (clone, commit, push)\n\n### Estrutura Original\n- Workspaces: front, api, agente\n- React + Vite no frontend\n- Express na API e Agente\n- Memória em arquivos JSON\n\n---\n\n**Data da Release:** 2025-01-09\n**Compatibilidade:** Node.js 18+, Ollama 0.1+\n**Licença:** MIT\n","size_bytes":6378},"agente/src/database.js":{"content":"import Database from \"better-sqlite3\";\nimport path from \"node:path\";\nimport os from \"node:os\";\nimport fs from \"node:fs\";\n\nconst DB_DIR = path.join(os.homedir(), \".agente-ia\");\nconst DB_PATH = path.join(DB_DIR, \"agente.db\");\n\nfs.mkdirSync(DB_DIR, { recursive: true });\n\nconst db = new Database(DB_PATH);\ndb.pragma(\"journal_mode = WAL\");\n\ndb.exec(`\n  CREATE TABLE IF NOT EXISTS projetos (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    nome TEXT NOT NULL,\n    caminho_local TEXT,\n    repositorio_url TEXT,\n    branch_padrao TEXT DEFAULT 'main',\n    ultimo_acesso DATETIME DEFAULT CURRENT_TIMESTAMP,\n    criado_em DATETIME DEFAULT CURRENT_TIMESTAMP,\n    metadata TEXT\n  );\n\n  CREATE TABLE IF NOT EXISTS arquivos_contexto (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    projeto_id INTEGER NOT NULL,\n    caminho TEXT NOT NULL,\n    conteudo TEXT,\n    hash TEXT,\n    analise TEXT,\n    atualizado_em DATETIME DEFAULT CURRENT_TIMESTAMP,\n    FOREIGN KEY (projeto_id) REFERENCES projetos(id) ON DELETE CASCADE,\n    UNIQUE(projeto_id, caminho)\n  );\n\n  CREATE TABLE IF NOT EXISTS mudancas_pendentes (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    projeto_id INTEGER NOT NULL,\n    arquivo TEXT NOT NULL,\n    conteudo_original TEXT,\n    conteudo_novo TEXT,\n    diff TEXT,\n    descricao TEXT,\n    status TEXT DEFAULT 'pendente',\n    criado_em DATETIME DEFAULT CURRENT_TIMESTAMP,\n    aplicado_em DATETIME,\n    FOREIGN KEY (projeto_id) REFERENCES projetos(id) ON DELETE CASCADE\n  );\n\n  CREATE TABLE IF NOT EXISTS historico (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    projeto_id INTEGER NOT NULL,\n    tipo TEXT NOT NULL,\n    descricao TEXT,\n    dados TEXT,\n    timestamp DATETIME DEFAULT CURRENT_TIMESTAMP,\n    FOREIGN KEY (projeto_id) REFERENCES projetos(id) ON DELETE CASCADE\n  );\n\n  CREATE TABLE IF NOT EXISTS conversas (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    projeto_id INTEGER NOT NULL,\n    mensagem TEXT NOT NULL,\n    resposta TEXT,\n    contexto TEXT,\n    timestamp DATETIME DEFAULT CURRENT_TIMESTAMP,\n    FOREIGN KEY (projeto_id) REFERENCES projetos(id) ON DELETE CASCADE\n  );\n\n  CREATE TABLE IF NOT EXISTS versoes_arquivo (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    projeto_id INTEGER NOT NULL,\n    mudanca_id INTEGER,\n    arquivo TEXT NOT NULL,\n    conteudo TEXT,\n    descricao TEXT,\n    timestamp DATETIME DEFAULT CURRENT_TIMESTAMP,\n    FOREIGN KEY (projeto_id) REFERENCES projetos(id) ON DELETE CASCADE,\n    FOREIGN KEY (mudanca_id) REFERENCES mudancas_pendentes(id) ON DELETE SET NULL\n  );\n\n  CREATE INDEX IF NOT EXISTS idx_projetos_url ON projetos(repositorio_url);\n  CREATE INDEX IF NOT EXISTS idx_arquivos_projeto ON arquivos_contexto(projeto_id);\n  CREATE INDEX IF NOT EXISTS idx_mudancas_projeto ON mudancas_pendentes(projeto_id);\n  CREATE INDEX IF NOT EXISTS idx_mudancas_status ON mudancas_pendentes(status);\n  CREATE INDEX IF NOT EXISTS idx_historico_projeto ON historico(projeto_id);\n  CREATE INDEX IF NOT EXISTS idx_conversas_projeto ON conversas(projeto_id);\n  CREATE INDEX IF NOT EXISTS idx_versoes_arquivo ON versoes_arquivo(projeto_id, arquivo);\n`);\n\nexport function criarProjeto(nome, repositorioUrl, caminhoLocal = null, branchPadrao = \"main\") {\n  const stmt = db.prepare(`\n    INSERT INTO projetos (nome, repositorio_url, caminho_local, branch_padrao)\n    VALUES (?, ?, ?, ?)\n  `);\n  const info = stmt.run(nome, repositorioUrl, caminhoLocal, branchPadrao);\n  return info.lastInsertRowid;\n}\n\nexport function buscarProjetoPorUrl(url) {\n  const stmt = db.prepare(\"SELECT * FROM projetos WHERE repositorio_url = ? ORDER BY ultimo_acesso DESC LIMIT 1\");\n  return stmt.get(url);\n}\n\nexport function buscarProjetoPorCaminho(caminho) {\n  const stmt = db.prepare(\"SELECT * FROM projetos WHERE caminho_local = ? ORDER BY ultimo_acesso DESC LIMIT 1\");\n  return stmt.get(caminho);\n}\n\nexport function buscarProjetoPorId(projetoId) {\n  const stmt = db.prepare(\"SELECT * FROM projetos WHERE id = ?\");\n  return stmt.get(projetoId);\n}\n\nexport function atualizarUltimoAcesso(projetoId) {\n  const stmt = db.prepare(\"UPDATE projetos SET ultimo_acesso = CURRENT_TIMESTAMP WHERE id = ?\");\n  stmt.run(projetoId);\n}\n\nexport function atualizarCaminhoProjeto(projetoId, caminho) {\n  const stmt = db.prepare(`\n    UPDATE projetos\n    SET caminho_local = ?, ultimo_acesso = CURRENT_TIMESTAMP\n    WHERE id = ?\n  `);\n  stmt.run(caminho, projetoId);\n}\n\nexport function salvarContextoArquivo(projetoId, caminho, conteudo, analise = null) {\n  const hash = Buffer.from(conteudo).toString(\"base64\").slice(0, 32);\n  const stmt = db.prepare(`\n    INSERT INTO arquivos_contexto (projeto_id, caminho, conteudo, hash, analise, atualizado_em)\n    VALUES (?, ?, ?, ?, ?, CURRENT_TIMESTAMP)\n    ON CONFLICT(projeto_id, caminho)\n    DO UPDATE SET conteudo = excluded.conteudo, hash = excluded.hash, analise = excluded.analise, atualizado_em = CURRENT_TIMESTAMP\n  `);\n  stmt.run(projetoId, caminho, conteudo.slice(0, 100000), hash, analise);\n}\n\nexport function buscarContextoProjeto(projetoId, limite = 50) {\n  const stmt = db.prepare(`\n    SELECT caminho, conteudo, analise, atualizado_em\n    FROM arquivos_contexto\n    WHERE projeto_id = ?\n    ORDER BY atualizado_em DESC\n    LIMIT ?\n  `);\n  return stmt.all(projetoId, limite);\n}\n\nexport function criarMudancaPendente(projetoId, arquivo, original, novo, diff, descricao) {\n  const stmt = db.prepare(`\n    INSERT INTO mudancas_pendentes (projeto_id, arquivo, conteudo_original, conteudo_novo, diff, descricao)\n    VALUES (?, ?, ?, ?, ?, ?)\n  `);\n  const info = stmt.run(projetoId, arquivo, original, novo, diff, descricao);\n  return info.lastInsertRowid;\n}\n\nexport function buscarMudancasPendentes(projetoId) {\n  const stmt = db.prepare(`\n    SELECT * FROM mudancas_pendentes\n    WHERE projeto_id = ? AND status = 'pendente'\n    ORDER BY criado_em DESC\n  `);\n  return stmt.all(projetoId);\n}\n\nexport function aprovarMudanca(mudancaId) {\n  const stmt = db.prepare(`\n    UPDATE mudancas_pendentes\n    SET status = 'aprovada', aplicado_em = CURRENT_TIMESTAMP\n    WHERE id = ?\n  `);\n  stmt.run(mudancaId);\n}\n\nexport function rejeitarMudanca(mudancaId) {\n  const stmt = db.prepare(`\n    UPDATE mudancas_pendentes\n    SET status = 'rejeitada', aplicado_em = CURRENT_TIMESTAMP\n    WHERE id = ?\n  `);\n  stmt.run(mudancaId);\n}\n\nexport function registrarHistorico(projetoId, tipo, descricao, dados = null) {\n  const stmt = db.prepare(`\n    INSERT INTO historico (projeto_id, tipo, descricao, dados)\n    VALUES (?, ?, ?, ?)\n  `);\n  stmt.run(projetoId, tipo, descricao, dados ? JSON.stringify(dados) : null);\n}\n\nexport function buscarHistorico(projetoId, limite = 50) {\n  const stmt = db.prepare(`\n    SELECT * FROM historico\n    WHERE projeto_id = ?\n    ORDER BY timestamp DESC\n    LIMIT ?\n  `);\n  return stmt.all(projetoId, limite);\n}\n\nexport function salvarConversa(projetoId, mensagem, resposta, contexto = null) {\n  const stmt = db.prepare(`\n    INSERT INTO conversas (projeto_id, mensagem, resposta, contexto)\n    VALUES (?, ?, ?, ?)\n  `);\n  stmt.run(projetoId, mensagem, resposta, contexto);\n}\n\nexport function buscarConversas(projetoId, limite = 20) {\n  const stmt = db.prepare(`\n    SELECT * FROM conversas\n    WHERE projeto_id = ?\n    ORDER BY timestamp DESC\n    LIMIT ?\n  `);\n  return stmt.all(projetoId, limite).reverse();\n}\n\nexport function listarProjetos(limite = 50) {\n  const stmt = db.prepare(`\n    SELECT * FROM projetos\n    ORDER BY ultimo_acesso DESC\n    LIMIT ?\n  `);\n  return stmt.all(limite);\n}\n\nexport function salvarVersaoArquivo(projetoId, arquivo, conteudo, descricao = \"Versão salva automaticamente\", mudancaId = null) {\n  const stmt = db.prepare(`\n    INSERT INTO versoes_arquivo (projeto_id, mudanca_id, arquivo, conteudo, descricao)\n    VALUES (?, ?, ?, ?, ?)\n  `);\n  const info = stmt.run(projetoId, mudancaId, arquivo, conteudo, descricao);\n  return info.lastInsertRowid;\n}\n\nexport function buscarVersoesArquivo(projetoId, arquivo, limite = 10) {\n  const stmt = db.prepare(`\n    SELECT * FROM versoes_arquivo\n    WHERE projeto_id = ? AND arquivo = ?\n    ORDER BY timestamp DESC\n    LIMIT ?\n  `);\n  return stmt.all(projetoId, arquivo, limite);\n}\n\nexport function restaurarVersaoArquivo(versaoId) {\n  const stmt = db.prepare(\"SELECT * FROM versoes_arquivo WHERE id = ?\");\n  return stmt.get(versaoId);\n}\n\nexport { db };\n","size_bytes":8268},"agente/src/index-backup.js":{"content":"import \"dotenv/config\";\nimport express from \"express\";\nimport cors from \"cors\";\nimport net from \"node:net\";\nimport fs from \"node:fs\";\nimport path from \"node:path\";\nimport os from \"node:os\";\nimport { executar_fluxo } from \"./fluxo.js\";\nimport { chat_simples } from \"./llm.js\";\nimport { initMem, logEvent, saveState, loadState } from \"./memoria.js\";\nimport { clonar_repositorio, criar_branch, commit_e_push } from \"./ferramentas.js\";\n\nconst app = express();\n// CORS (qualquer origem) e preflight via pacote oficial\napp.use(cors());\napp.options('*', cors());\napp.use(express.json({limit:\"5mb\"}));\n\napp.get(\"/saude\", (_req, res) => { res.set(\"Access-Control-Allow-Origin\",\"*\"); res.json({ ok: true }); });\n\napp.post(\"/executar\", async (req, res) => {\n  try {\n    const r = await executar_fluxo(req.body);\n    res.json(r);\n  } catch (e) {\n    res.status(500).send(e?.message || \"erro\");\n  }\n});\n\nasync function findAvailablePort(start){\n  for(let p=start; p<start+50; p++){\n    const ok = await new Promise((resolve)=>{\n      const srv = net.createServer()\n        .once(\"error\", ()=> resolve(false))\n        .once(\"listening\", ()=> srv.close(()=> resolve(true)))\n        .listen(p, \"0.0.0.0\");\n    });\n    if(ok) return p;\n  }\n  throw new Error(\"Sem porta livre encontrada\");\n}\n\nlet server;\nasync function start(){\n  const base = Number(process.env.AGENTE_PORTA || 6060);\n  const porta = await findAvailablePort(base);\n  server = app.listen(porta, () => console.log(`Agente na porta ${porta}`));\n}\n\nfunction graceful(){\n  if(server){\n    console.log(\"Encerrando Agente e liberando porta...\");\n    try{ server.close(()=> process.exit(0)); }catch{ process.exit(0); }\n  } else {\n    process.exit(0);\n  }\n}\nprocess.on(\"SIGINT\", graceful);\nprocess.on(\"SIGTERM\", graceful);\n\n// Estado do repositÃ³rio atual\nconst estado = {\n  pasta: null,\n  branch: null,\n  url: null,\n};\n\n// util para montar Ã¡rvore de arquivos limitada\nasync function listar_arvore(base){\n  const ignorar = new Set([\".git\", \"node_modules\", \".next\", \"dist\", \"build\"]);\n  const resultado = [];\n  const maxItens = 5000;\n  const maxProfundidade = 6;\n  let count = 0;\n  async function walk(dir, depth){\n    if(depth>maxProfundidade) return;\n    const itens = await fs.promises.readdir(dir,{withFileTypes:true});\n    for(const ent of itens){\n      if(count>=maxItens) return;\n      if(ignorar.has(ent.name)) continue;\n      const full = path.join(dir, ent.name);\n      const rel = path.relative(base, full).replace(/\\\\/g,\"/\");\n      resultado.push({path:rel, tipo: ent.isDirectory()?\"dir\":\"file\"});\n      count++;\n      if(ent.isDirectory()) await walk(full, depth+1);\n    }\n  }\n  await walk(base, 0);\n  return resultado;\n}\n\n// Utilidades de análise rápida do projeto\nasync function lerAte(fullPath, maxBytes = 8192){\n  try{\n    const buf = await fs.promises.readFile(fullPath);\n    return buf.slice(0, maxBytes).toString(\"utf-8\");\n  }catch{ return \"\"; }\n}\n\nasync function analisar_repositorio(base, arvore){\n  const arquivos = arvore.filter(i=>i.tipo==='file').map(i=>i.path);\n  const dirsTop = new Set(arvore.map(i=> i.path.split('/')[0]));\n  const totalArquivos = arquivos.length;\n  const chaves = [\n    'README.md','package.json','front/package.json','api/package.json','agente/package.json',\n    'vite.config.js','next.config.js','tsconfig.json','front/vite.config.js','front/index.html'\n  ];\n  const amostras = {};\n  for(const rel of chaves){\n    if(arquivos.includes(rel)){\n      amostras[rel] = await lerAte(path.join(base, rel));\n    }\n  }\n  const pkgPaths = Object.keys(amostras).filter(p=>p.endsWith('package.json') && amostras[p]);\n  const pkgs = [];\n  for(const p of pkgPaths){\n    try{ pkgs.push({ caminho:p, json: JSON.parse(amostras[p]) }); }catch{}\n  }\n  const deps = new Set();\n  for(const {json} of pkgs){\n    for(const k of Object.keys(json.dependencies||{})) deps.add(k);\n    for(const k of Object.keys(json.devDependencies||{})) deps.add(k);\n  }\n  const tecnos = [];\n  const has = (name)=> deps.has(name);\n  if(has('react')) tecnos.push('React');\n  if(has('next')) tecnos.push('Next.js');\n  if(has('vite')) tecnos.push('Vite');\n  if(has('express')) tecnos.push('Express');\n  if(has('typescript')) tecnos.push('TypeScript');\n  if(has('eslint')) tecnos.push('ESLint');\n\n  const contexto = [\n    `Você é um agente profissional e criativo.`,\n    `Resuma o repositório de forma breve, em PT-BR, com tópicos:`,\n    `- Tecnologias e frameworks (inferir)`,\n    `- Estrutura de diretórios (alto nível)`,\n    `- Objetivo provável do sistema`,\n    `- Próximos passos recomendados`,\n    `Responda em até 6 linhas.`,\n    `\\nMetadados:`,\n    `- Total de arquivos: ${totalArquivos}`,\n    `- Diretórios top: ${Array.from(dirsTop).slice(0,12).join(', ')}`,\n    `- Tecnologias detectadas: ${tecnos.join(', ')||'indefinido'}`,\n  ].join('\\n');\n\n  const blobs = Object.entries(amostras)\n    .map(([p,c])=> `Arquivo: ${p}\\n\"\"\"\\n${String(c).slice(0,1200)}\\n\"\"\"`)\n    .join('\\n\\n')\n    .slice(0, 6000);\n\n  let resumo = '';\n  try{\n    resumo = await chat_simples('Gere um resumo objetivo do projeto.', `${contexto}\\n\\nAmostras:\\n${blobs}`);\n  }catch{}\n  if(!resumo){\n    resumo = `Projeto com ${totalArquivos} arquivos. Tecnologias: ${tecnos.join(', ')||'não detectadas'}. Diretórios: ${Array.from(dirsTop).slice(0,6).join(', ')}.`;\n  }\n  const mensagemChat = `${resumo}\\n\\nPosso ajudar. O que você deseja alterar primeiro?`;\n  await saveState(base, { analise: { tecnos, totalArquivos, dirsTop: Array.from(dirsTop), resumo, quando: new Date().toISOString() } });\n  await logEvent(base, 'analise_repo', { tecnos, totalArquivos });\n  return { tecnos, totalArquivos, mensagemChat, resumo };\n}\n\napp.post(\"/repo/abrir\", async (req,res)=>{\n  try{\n    const { repositorioUrl, branchBase, token } = req.body||{};\n    if(!repositorioUrl) return res.status(400).json({erro:\"repositorioUrl Ã© obrigatÃ³rio\"});\n    const pasta = path.join(os.tmpdir(), `repo_${Date.now()}`);\n    await clonar_repositorio(repositorioUrl, pasta, token);\n    await criar_branch(pasta, `agente/${Date.now()}`, branchBase);\n    estado.pasta = pasta;\n    estado.branch = branchBase || null;\n    estado.url = repositorioUrl;\n    const arvore = await listar_arvore(pasta);\n    await initMem(pasta);\n    try{ await logEvent(pasta, \"repo_aberto\", { url: repositorioUrl, branchBase: branchBase||null }); }catch{}\n    try{ await saveState(pasta, { repoUrl: repositorioUrl, branchBase: branchBase||null }); }catch{}\n    let analise = null;\n    try{ analise = await analisar_repositorio(pasta, arvore); }catch{}\n    res.json({ ok:true, pasta, arvore, analise });\n  }catch(e){ res.status(500).json({erro:String(e?.message||e)}); }\n});\n\napp.get(\"/repo/tree\", async (_req,res)=>{\n  try{\n    if(!estado.pasta) return res.status(400).json({erro:\"Nenhum repositÃ³rio aberto\"});\n    const arvore = await listar_arvore(estado.pasta);\n    res.json({arvore});\n  }catch(e){ res.status(500).json({erro:String(e?.message||e)}); }\n});\n\napp.get(\"/repo/file\", async (req,res)=>{\n  try{\n    if(!estado.pasta) return res.status(400).json({erro:\"Nenhum repositÃ³rio aberto\"});\n    const rel = req.query.path;\n    if(!rel) return res.status(400).json({erro:\"path Ã© obrigatÃ³rio\"});\n    const full = path.join(estado.pasta, rel);\n    const data = await fs.promises.readFile(full, \"utf-8\");\n    try{ await logEvent(estado.pasta, \"ler_arquivo\", { path: rel, bytes: Buffer.byteLength(data, 'utf-8') }); }catch{}\n    res.type(\"text/plain\").send(data);\n  }catch(e){ res.status(500).json({erro:String(e?.message||e)}); }\n});\n\napp.post(\"/repo/save\", async (req,res)=>{\n  try{\n    if(!estado.pasta) return res.status(400).json({erro:\"Nenhum repositÃ³rio aberto\"});\n    const { path: rel, conteudo } = req.body||{};\n    if(!rel) return res.status(400).json({erro:\"path Ã© obrigatÃ³rio\"});\n    const full = path.join(estado.pasta, rel);\n    await fs.promises.mkdir(path.dirname(full), {recursive:true});\n    await fs.promises.writeFile(full, conteudo??\"\", \"utf-8\");\n    try{ await logEvent(estado.pasta, \"salvar_arquivo\", { path: rel, bytes: Buffer.byteLength(conteudo??\"\", 'utf-8') }); }catch{}\n    res.json({ok:true});\n  }catch(e){ res.status(500).json({erro:String(e?.message||e)}); }\n});\n\napp.post(\"/repo/create\", async (req,res)=>{\n  try{\n    if(!estado.pasta) return res.status(400).json({erro:\"Nenhum repositÃ³rio aberto\"});\n    const { path: rel, tipo, conteudo } = req.body||{};\n    if(!rel) return res.status(400).json({erro:\"path Ã© obrigatÃ³rio\"});\n    const full = path.join(estado.pasta, rel);\n    const base = path.resolve(estado.pasta);\n    const normalized = path.resolve(full);\n    if(!normalized.startsWith(base)) return res.status(400).json({erro:\"Caminho invÃ¡lido\"});\n    if(tipo === \"dir\"){\n      await fs.promises.mkdir(full, { recursive: true });\n    } else {\n      await fs.promises.mkdir(path.dirname(full), { recursive: true });\n      await fs.promises.writeFile(full, conteudo ?? \"\", \"utf-8\");\n    }\n    try{ await logEvent(estado.pasta, \"criar_item\", { path: rel, tipo: tipo||\"file\" }); }catch{}\n    res.json({ok:true});\n  }catch(e){ res.status(500).json({erro:String(e?.message||e)}); }\n});\n\napp.post(\"/repo/delete\", async (req,res)=>{\n  try{\n    if(!estado.pasta) return res.status(400).json({erro:\"Nenhum repositÃ³rio aberto\"});\n    const { path: rel } = req.body||{};\n    if(!rel) return res.status(400).json({erro:\"path Ã© obrigatÃ³rio\"});\n    const full = path.join(estado.pasta, rel);\n    const base = path.resolve(estado.pasta);\n    const normalized = path.resolve(full);\n    if(!normalized.startsWith(base)) return res.status(400).json({erro:\"Caminho invÃ¡lido\"});\n    let stats;\n    try{\n      stats = await fs.promises.stat(full);\n    }catch{\n      return res.status(404).json({erro:\"Item nÃ£o encontrado\"});\n    }\n    if(stats.isDirectory()){\n      await fs.promises.rm(full, { recursive: true, force: true });\n    } else {\n      await fs.promises.unlink(full);\n    }\n    try{ await logEvent(estado.pasta, \"excluir_item\", { path: rel }); }catch{}\n    res.json({ok:true});\n  }catch(e){ res.status(500).json({erro:String(e?.message||e)}); }\n});\n\napp.post(\"/repo/commit\", async (req,res)=>{\n  try{\n    if(!estado.pasta) return res.status(400).json({erro:\"Nenhum repositÃ³rio aberto\"});\n    const { mensagem } = req.body||{};\n    await commit_e_push(estado.pasta, mensagem || \"chore: atualizaÃ§Ãµes via Agente\");\n    res.json({ok:true});\n  }catch(e){ res.status(500).json({erro:String(e?.message||e)}); }\n});\n\n// Busca simples no projeto inteiro (substring ou regex opcional)\napp.post(\"/repo/search\", async (req,res)=>{\n  try{\n    if(!estado.pasta) return res.status(400).json({erro:\"Nenhum repositÃ³rio aberto\"});\n    const { query, regex=false, maxResults=50 } = req.body||{};\n    if(!query || typeof query!=='string') return res.status(400).json({erro:\"query obrigatÃ³ria\"});\n    const base = estado.pasta;\n    const ignorar = new Set([\".git\",\"node_modules\",\".next\",\"dist\",\"build\"]);\n    const maxBytes = 512*1024; // 512 KB por arquivo\n    const matches = [];\n    const rx = regex ? new RegExp(query, 'i') : null;\n    const q = regex ? null : query.toLowerCase();\n\n    async function walk(dir){\n      const itens = await fs.promises.readdir(dir,{withFileTypes:true});\n      for(const ent of itens){\n        if(matches.length>=maxResults) return;\n        if(ignorar.has(ent.name)) continue;\n        const full = path.join(dir, ent.name);\n        if(ent.isDirectory()){\n          await walk(full);\n        } else {\n          try{\n            const stat = await fs.promises.stat(full);\n            if(stat.size>maxBytes) continue;\n            const buf = await fs.promises.readFile(full);\n            const txt = buf.toString(\"utf-8\");\n            let hit = false;\n            const lines = txt.split(/\\r?\\n/);\n            const outLines = [];\n            for(let i=0;i<lines.length;i++){\n              const line = lines[i];\n              if(regex ? rx.test(line) : line.toLowerCase().includes(q)){\n                hit = true;\n                outLines.push({ number: i+1, text: line.slice(0, 400) });\n                if(outLines.length>=5) break;\n              }\n            }\n            if(hit){\n              matches.push({ path: path.relative(base, full).replace(/\\\\/g,'/'), lines: outLines });\n            }\n          }catch{}\n        }\n      }\n    }\n    await walk(base);\n    try{ await logEvent(base, \"busca\", { query, total: matches.length }); }catch{}\n    res.json({ matches });\n  }catch(e){ res.status(500).json({erro:String(e?.message||e)}); }\n});\n\napp.post(\"/chat\", async (req,res)=>{\n  try{\n    const { mensagem } = req.body||{};\n    if(!mensagem) return res.status(400).json({erro:\"mensagem é obrigatória\"});\n    const ctx = estado.pasta ? `Repositório local: ${estado.pasta}` : \"\";\n    const resposta = await chat_simples(mensagem, ctx);\n    res.json({resposta});\n  }catch(e){ res.status(500).json({erro:String(e?.message||e)}); }\n});\n\n// Saúde do Ollama\n// Chat com tentativa de ediÃ§Ã£o de arquivos do repositÃ³rio\napp.post(\"/chat2\", async (req,res)=>{\n  try{\n    const { mensagem, arquivoAtual } = req.body||{};\n    if(!mensagem) return res.status(400).json({erro:\"mensagem é obrigatória\"});\n\n    if(estado.pasta){\n      const arvore = await listar_arvore(estado.pasta);\n      const limitar = (arr, n=600) => arr.slice(0, n);\n      const treeStr = limitar(arvore, 1200).map(i=>`- ${i.path}`).join(\"\\n\");\n      let atualConteudo = \"\";\n      let atualPath = \"\";\n      if(arquivoAtual){\n        try{\n          const full = path.join(estado.pasta, arquivoAtual);\n          atualConteudo = await fs.promises.readFile(full, \"utf-8\");\n          atualPath = arquivoAtual;\n        }catch{}\n      }\n\n      const contexto = `VocÃª Ã© um agente que edita um Repositório local.\\n`+\n        `Raiz: ${estado.pasta}\\n`+\n        `Arquivos (parcial):\\n${treeStr}\\n\\n`+\n        (atualPath?`Arquivo atual: ${atualPath}\\nConteÃºdo atual (pode estar desatualizado):\\n\\n\"\"\"\\n${atualConteudo}\\n\"\"\"\\n\\n`:\"\")+\n        `InstruÃ§Ã£o do usuÃ¡rio: ${mensagem}\\n\\n`+\n        `Tarefa: Se a instruÃ§Ã£o for uma alteraÃ§Ã£o no cÃ³digo/estilos, responda ESTRITAMENTE um JSON compacto, sem texto fora do JSON, no formato:\\n`+\n        `{\"arquivo\":\"caminho/relativo\", \"conteudo\":\"arquivo inteiro atualizado\", \"mensagemCommit\":\"mensagem curta\"}\\n`+\n        `- Escolha o arquivo correto baseado na lista e/ou no arquivo atual.\\n`+\n        `- Se nenhuma mudança for necessária, responda {\"mensagem\":\"explicaÃ§Ã£o\"}.`;\n\n      const bruto = await chat_simples(\"Gere a resposta conforme instruÃ§Ãµes.\", contexto);\n\n      let jsonTxt = bruto;\n      const i = bruto.indexOf(\"{\");\n      const j = bruto.lastIndexOf(\"}\");\n      if(i>=0 && j>i){ jsonTxt = bruto.slice(i, j+1); }\n      let plano;\n      try{ plano = JSON.parse(jsonTxt); }catch{}\n\n      if(plano && typeof plano === 'object' && (plano.conteudo && plano.arquivo)){\n        const rel = String(plano.arquivo).replace(/^\\/+/, \"\");\n        const full = path.join(estado.pasta, rel);\n        const base = path.resolve(estado.pasta);\n        const normalized = path.resolve(full);\n        if(!normalized.startsWith(base)) return res.status(400).json({erro:\"Caminho gerado fora do repositório\"});\n        await fs.promises.mkdir(path.dirname(full), {recursive:true});\n        await fs.promises.writeFile(full, plano.conteudo, \"utf-8\");\n        try{\n          await commit_e_push(estado.pasta, plano.mensagemCommit || `chore: ajuste automático em ${rel}`);\n        }catch{}\n        return res.json({resposta: `AlteraÃ§Ã£o aplicada em ${rel}.`, aplicado:true, arquivo: rel});\n      }\n\n      return res.json({resposta: typeof bruto === 'string' ? bruto : \"Sem resposta\"});\n    }\n\n    const resposta = await chat_simples(mensagem, \"Sem repositório aberto.\");\n    res.json({resposta});\n  }catch(e){ res.status(500).json({erro:String(e?.message||e)}); }\n});\n\n// Chat aprimorado com leitura de contexto do projeto\napp.post(\"/chat3\", async (req,res)=>{\n  try{\n    const { mensagem, arquivoAtual } = req.body||{};\n    if(!mensagem) return res.status(400).json({erro:\"mensagem é obrigatória\"});\n\n    if(estado.pasta){\n      const arvore = await listar_arvore(estado.pasta);\n      const limitar = (arr, n=600) => arr.slice(0, n);\n      const treeStr = limitar(arvore, 1200).map(i=>`- ${i.path}`).join(\"\\n\");\n      let atualConteudo = \"\";\n      let atualPath = \"\";\n      if(arquivoAtual){\n        try{\n          const full = path.join(estado.pasta, arquivoAtual);\n          atualConteudo = await fs.promises.readFile(full, \"utf-8\");\n          atualPath = arquivoAtual;\n        }catch{}\n      }\n\n      // HeurÃ­sticas de contexto: termos entre aspas e \"tela inicial\"\n      const quoted = Array.from(mensagem.matchAll(/[\"']([^\"']+)[\"']/g)).map(m=>m[1]).filter(Boolean);\n      const wantsHome = /tela\\s+inicial|p[aÃ¡]gina\\s+inicial|\\bhome\\b|landing/i.test(mensagem);\n      const candidatosEntrada = [\n        'src/app.jsx','src/App.jsx','src/app.tsx','src/App.tsx','src/main.jsx','src/main.tsx','src/index.jsx','src/index.tsx',\n        'pages/index.jsx','pages/index.tsx','src/pages/index.jsx','src/pages/index.tsx',\n        'index.html','public/index.html','src/index.html'\n      ];\n      const arquivosProjeto = arvore.filter(i=>i.tipo==='file').map(i=>i.path);\n      const setArv = new Set(arquivosProjeto);\n      const candidatosExistentes = candidatosEntrada.filter(p=>setArv.has(p));\n\n      // Busca simples por termos citados (limite de arquivos e tamanho)\n      const relevantesSet = new Set();\n      const relevantes = [];\n      const maxBytes = 512*1024;\n      if(quoted.length){\n        const termos = quoted.slice(0,3);\n        for(const termo of termos){\n          const alvo = termo.toLowerCase();\n          for(const rel of arquivosProjeto){\n            if(relevantes.length>=8) break;\n            try{\n              const full = path.join(estado.pasta, rel);\n              const st = await fs.promises.stat(full);\n              if(st.size>maxBytes) continue;\n              const txt = await fs.promises.readFile(full, 'utf-8');\n              if(txt.toLowerCase().includes(alvo)){\n                if(!relevantesSet.has(rel)){\n                  relevantesSet.add(rel);\n                  relevantes.push({ path: rel, motivo: `contÃ©m \"${termo}\"` });\n                }\n              }\n            }catch{}\n          }\n          if(relevantes.length>=8) break;\n        }\n      }\n\n      if(wantsHome){\n        for(const p of candidatosExistentes){\n          if(relevantes.length>=10) break;\n          if(!relevantesSet.has(p)){\n            relevantesSet.add(p);\n            relevantes.push({ path: p, motivo: 'candidato de tela inicial' });\n          }\n        }\n      }\n\n      // Carregar conteÃºdo dos candidatos relevantes (recorte)\n      const blobs = [];\n      for(const r of relevantes.slice(0,10)){\n        try{\n          const full = path.join(estado.pasta, r.path);\n          const txt = await fs.promises.readFile(full, 'utf-8');\n          const recorte = txt.length>8000 ? txt.slice(0,8000) : txt;\n          blobs.push({ path: r.path, motivo: r.motivo, conteudo: recorte });\n        }catch{}\n      }\n      if(blobs.length){ try{ await logEvent(estado.pasta, 'contexto_relevante', { arquivos: blobs.map(b=>b.path) }); }catch{} }\n\n      const contexto = `VocÃª Ã© um agente que edita um Repositório local.\\n`+\n        `Raiz: ${estado.pasta}\\n`+\n        `Arquivos (parcial):\\n${treeStr}\\n\\n`+\n        (atualPath?`Arquivo atual: ${atualPath}\\nConteÃºdo atual (pode estar desatualizado):\\n\\n\"\"\"\\n${atualConteudo}\\n\"\"\"\\n\\n`:\"\")+\n        (blobs.length?`Arquivos relevantes (recorte):\\n${blobs.map(b=>`[${b.path}] (motivo: ${b.motivo})\\n\"\"\"\\n${b.conteudo}\\n\"\"\"`).join(\"\\n\\n\")}\\n\\n`:\"\")+\n        `InstruÃ§Ã£o do usuÃ¡rio: ${mensagem}\\n\\n`+\n        `Tarefa: Se a instruÃ§Ã£o for uma alteraÃ§Ã£o no cÃ³digo/estilos, responda ESTRITAMENTE um JSON compacto, sem texto fora do JSON, no formato:\\n`+\n        `{\"arquivo\":\"caminho/relativo\", \"conteudo\":\"arquivo inteiro atualizado\", \"mensagemCommit\":\"mensagem curta\"}\\n`+\n        `- Escolha o arquivo correto baseado na lista e/ou no arquivo atual.\\n`+\n        `- Se nenhuma mudança for necessária, responda {\"mensagem\":\"explicaÃ§Ã£o\"}.`;\n\n      const bruto = await chat_simples(\"Gere a resposta conforme instruÃ§Ãµes.\", contexto);\n\n      let jsonTxt = bruto;\n      const i = bruto.indexOf(\"{\");\n      const j = bruto.lastIndexOf(\"}\");\n      if(i>=0 && j>i){ jsonTxt = bruto.slice(i, j+1); }\n      let plano;\n      try{ plano = JSON.parse(jsonTxt); }catch{}\n\n      if(plano && typeof plano === 'object' && (plano.conteudo && plano.arquivo)){\n        const rel = String(plano.arquivo).replace(/^\\/+/, \"\");\n        const full = path.join(estado.pasta, rel);\n        const base = path.resolve(estado.pasta);\n        const normalized = path.resolve(full);\n        if(!normalized.startsWith(base)) return res.status(400).json({erro:\"Caminho gerado fora do repositório\"});\n        await fs.promises.mkdir(path.dirname(full), {recursive:true});\n        await fs.promises.writeFile(full, plano.conteudo, \"utf-8\");\n        try{\n          await commit_e_push(estado.pasta, plano.mensagemCommit || `chore: ajuste automático em ${rel}`);\n        }catch{}\n        try{ await logEvent(estado.pasta, 'alteracao_aplicada', { arquivo: rel, mensagemCommit: plano.mensagemCommit||null }); }catch{}\n        return res.json({resposta: `AlteraÃ§Ã£o aplicada em ${rel}.`, aplicado:true, arquivo: rel});\n      }\n\n      return res.json({resposta: typeof bruto === 'string' ? bruto : \"Sem resposta\"});\n    }\n\n    const resposta = await chat_simples(mensagem, \"Sem repositório aberto.\");\n    res.json({resposta});\n  }catch(e){ res.status(500).json({erro:String(e?.message||e)}); }\n});\n\napp.get(\"/ollama/saude\", async (_req,res)=>{\n  try{\n    const r = await fetch(`${process.env.OLLAMA_URL || \"http://localhost:11434\"}/api/tags`);\n    if(!r.ok) return res.status(502).json({ok:false, status:r.status});\n    const j = await r.json();\n    const modelos = (j?.models||[]).map(m=>m?.name);\n    const selecionado = process.env.LLM_MODEL || \"qwen3-coder:480b-cloud\";\n    const disponivel = modelos.includes(selecionado);\n    res.json({ok:true, modelos, selecionado, disponivel});\n  }catch(e){ res.status(500).json({ok:false, erro:String(e?.message||e)}); }\n});\n\n// iniciar servidor somente apÃ³s rotas registradas\nawait start();\n\n\n\n","size_bytes":22449},"api/src/fila.js":{"content":"import { EventEmitter } from \"node:events\";\nexport class FilaMemoria extends EventEmitter {\n  #privada = [];\n  #processando = false;\n  async adicionar(job){\n    this.#privada.push(job);\n    this.emit(\"adicionado\", job);\n    this.#tentar();\n  }\n  async #tentar(){\n    if(this.#processando) return;\n    this.#processando = true;\n    while(this.#privada.length){\n      const j = this.#privada.shift();\n      this.emit(\"executar\", j);\n      await new Promise(r=>setTimeout(r,0));\n    }\n    this.#processando = false;\n  }\n}\n","size_bytes":519},"README-ORIGINAL.md":{"content":"Agente IA (JS) — Front React (sem TS) + API Express + Agente (Ollama)\n\nComo rodar\n- Pré‑requisitos: Node 18+ e Ollama instalado e rodando em `http://localhost:11434`.\n- Instalação: `npm run instalar`\n- Desenvolvimento (tudo junto): `npm run dev`\n  - Antes, garanta um modelo no Ollama, por exemplo:\n    - `ollama pull qwen2.5-coder:7b`\n    - ou altere `LLM_MODEL` em `agente/.env` para o modelo que preferir\n\nAmbiente (.env)\n- `api/.env` (opcional):\n  - `API_PORTA=5050`\n  - `AGENTE_PORTA=6060`\n- `agente/.env` (já configurado):\n  - `AGENTE_PORTA=6060`\n  - `OLLAMA_URL=http://localhost:11434`\n  - `LLM_MODEL=qwen3-coder:480b-cloud` (padrão recomendado para programação entre os seus modelos)\n- `front/.env` (já configurado):\n  - `VITE_API_URL=/api`\n  - `VITE_AGENT_URL=/agente`\n\nObservações\n- O agente consulta o Ollama via `POST /api/generate` (fallback para `POST /api/chat`) e tenta extrair JSON com `objetivos`, `passos`, `criteriosAceite`.\n- Caso o modelo não retorne JSON válido, um plano padrão é usado.\n- A API enfileira tarefas em memória e aciona o agente.\n","size_bytes":1086},"ARQUITETURA.md":{"content":"# Arquitetura do Sistema Agente IA\n\n## Visão Geral\n\n```\n┌─────────────────────────────────────────────────────────┐\n│                    Navegador (Vite)                     │\n│                                                         │\n│  ┌──────────────────────────────────────────────────┐ │\n│  │              Interface React (Front)              │ │\n│  │  • Editor de código                               │ │\n│  │  • Explorador de arquivos                         │ │\n│  │  • Chat interativo                                │ │\n│  │  • Modal de aprovação                             │ │\n│  └──────────────────────────────────────────────────┘ │\n│                       ↓ HTTP/JSON ↓                     │\n└─────────────────────────────────────────────────────────┘\n                          ↓\n┌─────────────────────────────────────────────────────────┐\n│                    API Express (Proxy)                  │\n│  • Porta 5050                                           │\n│  • Proxy /agente → Agente Service                       │\n│  • Gerenciamento de tarefas                             │\n│  • Fila de execução                                     │\n└─────────────────────────────────────────────────────────┘\n                          ↓\n┌─────────────────────────────────────────────────────────┐\n│              Agente IA Service (Express)                │\n│  • Porta 6060                                           │\n│                                                         │\n│  ┌──────────────────────────────────────────────────┐ │\n│  │              Sistema de Rotas                     │ │\n│  │  • /repo/abrir                                    │ │\n│  │  • /repo/file, /repo/save                         │ │\n│  │  • /chat/inteligente                              │ │\n│  │  • /mudancas/pendentes, aprovar, rejeitar         │ │\n│  └──────────────────────────────────────────────────┘ │\n│                          ↓                              │\n│  ┌──────────────────────────────────────────────────┐ │\n│  │           Analisador Inteligente                  │ │\n│  │  • analisarIntencao()                             │ │\n│  │  • gerarMudancaInteligente()                      │ │\n│  │  • analisarDiferencas()                           │ │\n│  │  • gerarDiff()                                    │ │\n│  └──────────────────────────────────────────────────┘ │\n│                          ↓                              │\n│  ┌──────────────────────────────────────────────────┐ │\n│  │           Sistema de Memória (SQLite)             │ │\n│  │  • projetos                                       │ │\n│  │  • arquivos_contexto                              │ │\n│  │  • mudancas_pendentes                             │ │\n│  │  • historico                                      │ │\n│  │  • conversas                                      │ │\n│  └──────────────────────────────────────────────────┘ │\n│                          ↓                              │\n│  ┌──────────────────────────────────────────────────┐ │\n│  │                Ferramentas Git                    │ │\n│  │  • clonar_repositorio()                           │ │\n│  │  • criar_branch()                                 │ │\n│  │  • commit_e_push()                                │ │\n│  └──────────────────────────────────────────────────┘ │\n└─────────────────────────────────────────────────────────┘\n                          ↓\n┌─────────────────────────────────────────────────────────┐\n│                   Ollama (LLM Local)                    │\n│  • Porta 11434                                          │\n│  • Modelos: qwen2.5-coder, codellama, etc              │\n│  • Endpoints: /api/generate, /api/chat                  │\n└─────────────────────────────────────────────────────────┘\n                          ↓\n┌─────────────────────────────────────────────────────────┐\n│                  Sistema de Arquivos                    │\n│  • ~/.agente-ia/agente.db (banco SQLite)                │\n│  • /tmp/repo_* (repositórios clonados)                  │\n│  • Projeto local do usuário                             │\n└─────────────────────────────────────────────────────────┘\n```\n\n## Fluxo de Dados\n\n### 1. Abertura de Projeto\n\n```\nUsuario (Front) → API → Agente\n                          ↓\n                  ┌───────────────┐\n                  │ Verificar DB  │\n                  └───────────────┘\n                          ↓\n            ┌─────────────┴─────────────┐\n            │                           │\n        Existe                      Não Existe\n            ↓                           ↓\n    ┌──────────────┐           ┌──────────────┐\n    │ Atualizar    │           │ Clonar/      │\n    │ último_acesso│           │ Abrir local  │\n    └──────────────┘           └──────────────┘\n            ↓                           ↓\n    ┌──────────────────────────────────────┐\n    │    Criar/Atualizar no DB             │\n    └──────────────────────────────────────┘\n            ↓\n    ┌──────────────────────────────────────┐\n    │    Analisar estrutura                │\n    │    • Ler package.json               │\n    │    • Detectar tecnologias           │\n    │    • Gerar resumo (LLM)             │\n    └──────────────────────────────────────┘\n            ↓\n    ┌──────────────────────────────────────┐\n    │    Retornar ao Front                 │\n    │    • Árvore de arquivos             │\n    │    • Conversas anteriores           │\n    │    • Histórico                      │\n    │    • Mudanças pendentes             │\n    └──────────────────────────────────────┘\n```\n\n### 2. Chat Inteligente\n\n```\nUsuario digita mensagem → Front → API → Agente\n                                          ↓\n                              ┌──────────────────┐\n                              │ Salvar no DB     │\n                              │ (conversas)      │\n                              └──────────────────┘\n                                          ↓\n                              ┌──────────────────────────┐\n                              │ Analisar Intenção (LLM)  │\n                              │ • Identificar arquivos   │\n                              │ • Avaliar complexidade   │\n                              │ • Detectar riscos        │\n                              └──────────────────────────┘\n                                          ↓\n                              ┌──────────────────────────┐\n                              │ Buscar Contexto (DB)     │\n                              │ • Arquivos recentes      │\n                              │ • Tecnologias            │\n                              │ • Conversas anteriores   │\n                              └──────────────────────────┘\n                                          ↓\n                              ┌──────────────────────────┐\n                              │ Gerar Mudanças (LLM)     │\n                              │ • Ler arquivos           │\n                              │ • Gerar código novo      │\n                              │ • Criar diff             │\n                              └──────────────────────────┘\n                                          ↓\n                              ┌──────────────────────────┐\n                              │ Criar Mudanças Pendentes │\n                              │ (mudancas_pendentes)     │\n                              └──────────────────────────┘\n                                          ↓\n                              ┌──────────────────────────┐\n                              │ Registrar Histórico      │\n                              │ (historico)              │\n                              └──────────────────────────┘\n                                          ↓\n                      Retornar resposta + contador mudanças\n```\n\n### 3. Aprovação de Mudança\n\n```\nUsuario clica \"Aprovar\" → Front → API → Agente\n                                          ↓\n                              ┌──────────────────────────┐\n                              │ Buscar Mudança (DB)      │\n                              │ WHERE id = mudancaId     │\n                              └──────────────────────────┘\n                                          ↓\n                              ┌──────────────────────────┐\n                              │ Aplicar no Sistema       │\n                              │ • fs.writeFile()         │\n                              │ • Criar diretórios       │\n                              └──────────────────────────┘\n                                          ↓\n                              ┌──────────────────────────┐\n                              │ Atualizar Status (DB)    │\n                              │ status = 'aprovada'      │\n                              └──────────────────────────┘\n                                          ↓\n                              ┌──────────────────────────┐\n                              │ Registrar Histórico      │\n                              │ tipo = 'mudanca_aprovada'│\n                              └──────────────────────────┘\n                                          ↓\n                              Retornar sucesso + arquivo alterado\n```\n\n## Componentes Principais\n\n### Front (React + Vite)\n\n**Arquivo:** `front/src/app.jsx`\n\n**Responsabilidades:**\n- Renderizar interface do usuário\n- Gerenciar estado local (arquivos, chat, etc)\n- Comunicar com API via fetch\n- Resolver endpoints automaticamente\n- Exibir modal de mudanças pendentes\n\n**Hooks principais:**\n- `useState` - Estado de componentes\n- `useEffect` - Efeitos e sincronização\n- `useMemo` - Computações custosas\n- `useCallback` - Callbacks otimizados\n- `useEndpointResolver` - Resolver URLs\n\n### API (Express)\n\n**Arquivo:** `api/src/index.js`\n\n**Responsabilidades:**\n- Proxy para o Agente\n- Gerenciar fila de tarefas\n- Resolver porta do Agente dinamicamente\n- CORS para front\n\n**Rotas:**\n- `GET /saude` - Health check\n- `POST /tarefas` - Criar tarefa\n- `GET /tarefas/:id` - Status da tarefa\n- `POST /repo/abrir` - Proxy para agente\n- `*` `/proxy/agente` - Proxy genérico\n\n### Agente (Express + SQLite)\n\n**Arquivo:** `agente/src/index.js`\n\n**Responsabilidades:**\n- Gerenciar projetos\n- Processar chat inteligente\n- Controlar mudanças pendentes\n- Integrar com Git\n- Integrar com Ollama\n\n**Rotas principais:**\n- `POST /repo/abrir` - Abrir projeto\n- `GET /repo/tree` - Árvore de arquivos\n- `GET /repo/file` - Ler arquivo\n- `POST /repo/save` - Salvar arquivo\n- `POST /repo/commit` - Commit e push\n- `POST /chat/inteligente` - Chat com IA\n- `GET /mudancas/pendentes` - Listar mudanças\n- `POST /mudancas/aprovar` - Aprovar mudança\n- `POST /mudancas/rejeitar` - Rejeitar mudança\n\n### Analisador (Módulo)\n\n**Arquivo:** `agente/src/analisador.js`\n\n**Funções principais:**\n\n**`analisarIntencao(mensagem, projetoId, arvore)`**\n- Analisa intenção do usuário\n- Identifica arquivos relevantes\n- Retorna análise estruturada\n\n**`gerarMudancaInteligente(mensagem, projetoId, pasta, arvore)`**\n- Gera mudanças de código\n- Usa contexto do projeto\n- Retorna array de mudanças\n\n**`analisarDiferencas(original, novo)`**\n- Compara dois conteúdos\n- Conta linhas adicionadas/removidas/modificadas\n- Retorna estatísticas\n\n**`gerarDiff(original, novo, arquivo)`**\n- Gera diff formato git\n- Linha por linha\n- Formato unificado\n\n### Database (Módulo SQLite)\n\n**Arquivo:** `agente/src/database.js`\n\n**Funções principais:**\n\n**Projetos:**\n- `criarProjeto(nome, url, caminho, branch)`\n- `buscarProjetoPorUrl(url)`\n- `buscarProjetoPorCaminho(caminho)`\n- `atualizarUltimoAcesso(id)`\n- `listarProjetos(limite)`\n\n**Contexto:**\n- `salvarContextoArquivo(projetoId, caminho, conteudo, analise)`\n- `buscarContextoProjeto(projetoId, limite)`\n\n**Mudanças:**\n- `criarMudancaPendente(projetoId, arquivo, original, novo, diff, desc)`\n- `buscarMudancasPendentes(projetoId)`\n- `aprovarMudanca(id)`\n- `rejeitarMudanca(id)`\n\n**Histórico:**\n- `registrarHistorico(projetoId, tipo, descricao, dados)`\n- `buscarHistorico(projetoId, limite)`\n\n**Conversas:**\n- `salvarConversa(projetoId, mensagem, resposta, contexto)`\n- `buscarConversas(projetoId, limite)`\n\n### LLM (Módulo Ollama)\n\n**Arquivo:** `agente/src/llm.js`\n\n**Funções:**\n\n**`chat_simples(mensagem, contexto)`**\n- Chat básico com Ollama\n- Suporta /api/generate e /api/chat\n- Retorna resposta do modelo\n\n**`pedir_plano(contexto, tarefa)`**\n- Gera plano estruturado\n- Retorna JSON com objetivos, passos, critérios\n\n**`pickModel()`**\n- Seleciona modelo disponível\n- Tenta baixar se não existe\n- Fallbacks para modelos alternativos\n\n### Ferramentas Git (Módulo)\n\n**Arquivo:** `agente/src/ferramentas.js`\n\n**Funções:**\n- `clonar_repositorio(url, destino, token)`\n- `criar_branch(destino, nome, base)`\n- `commit_e_push(destino, mensagem)`\n- `rodar_testes(destino)`\n- `aplicar_patch(destino, diff)`\n\n## Banco de Dados\n\n### Localização\n```\n~/.agente-ia/agente.db\n```\n\n### Schema\n\n**projetos**\n```sql\nCREATE TABLE projetos (\n  id INTEGER PRIMARY KEY,\n  nome TEXT NOT NULL,\n  caminho_local TEXT,\n  repositorio_url TEXT,\n  branch_padrao TEXT DEFAULT 'main',\n  ultimo_acesso DATETIME,\n  criado_em DATETIME,\n  metadata TEXT\n);\n```\n\n**arquivos_contexto**\n```sql\nCREATE TABLE arquivos_contexto (\n  id INTEGER PRIMARY KEY,\n  projeto_id INTEGER NOT NULL,\n  caminho TEXT NOT NULL,\n  conteudo TEXT,\n  hash TEXT,\n  analise TEXT,\n  atualizado_em DATETIME,\n  UNIQUE(projeto_id, caminho)\n);\n```\n\n**mudancas_pendentes**\n```sql\nCREATE TABLE mudancas_pendentes (\n  id INTEGER PRIMARY KEY,\n  projeto_id INTEGER NOT NULL,\n  arquivo TEXT NOT NULL,\n  conteudo_original TEXT,\n  conteudo_novo TEXT,\n  diff TEXT,\n  descricao TEXT,\n  status TEXT DEFAULT 'pendente',\n  criado_em DATETIME,\n  aplicado_em DATETIME\n);\n```\n\n**historico**\n```sql\nCREATE TABLE historico (\n  id INTEGER PRIMARY KEY,\n  projeto_id INTEGER NOT NULL,\n  tipo TEXT NOT NULL,\n  descricao TEXT,\n  dados TEXT,\n  timestamp DATETIME\n);\n```\n\n**conversas**\n```sql\nCREATE TABLE conversas (\n  id INTEGER PRIMARY KEY,\n  projeto_id INTEGER NOT NULL,\n  mensagem TEXT NOT NULL,\n  resposta TEXT,\n  contexto TEXT,\n  timestamp DATETIME\n);\n```\n\n## Segurança\n\n### Validações\n- Path traversal prevention (normalized paths)\n- SQL injection prevention (prepared statements)\n- Input sanitization\n\n### Dados Sensíveis\n- Tokens Git não persistidos (memória apenas)\n- Banco local (não compartilhado)\n- Sem comunicação externa (exceto Ollama local)\n\n## Performance\n\n### Otimizações\n- Índices em tabelas SQLite\n- Cache de contexto em DB\n- Análise limitada (5000 arquivos)\n- Profundidade máxima de 6 níveis\n- Carregamento assíncrono\n\n### Limites\n- Conteúdo de arquivo: 100KB salvo no DB\n- Diff preview: 1000 caracteres\n- Histórico: 50 últimos eventos\n- Conversas: 50 últimas mensagens\n\n## Extensibilidade\n\n### Adicionar Novo Endpoint\n```javascript\n// agente/src/index.js\napp.post(\"/minha/rota\", async (req, res) => {\n  try {\n    // sua lógica\n    res.json({ ok: true });\n  } catch (e) {\n    res.status(500).json({ erro: String(e?.message || e) });\n  }\n});\n```\n\n### Adicionar Nova Análise\n```javascript\n// agente/src/analisador.js\nexport async function minhaAnalise(dados) {\n  // sua lógica\n  return resultado;\n}\n```\n\n### Adicionar Nova Tabela\n```javascript\n// agente/src/database.js\ndb.exec(`\n  CREATE TABLE IF NOT EXISTS minha_tabela (\n    id INTEGER PRIMARY KEY,\n    campo TEXT\n  );\n`);\n\nexport function criarItem(campo) {\n  const stmt = db.prepare(\"INSERT INTO minha_tabela (campo) VALUES (?)\");\n  stmt.run(campo);\n}\n```\n\n## Monitoramento\n\n### Logs\n- Console output de cada serviço\n- npm run dev mostra todos juntos\n- Erros capturados e retornados ao front\n\n### Debugging\n```javascript\n// Adicionar logs\nconsole.log(\"Debug:\", variavel);\n\n// Verificar banco\nsqlite3 ~/.agente-ia/agente.db \"SELECT * FROM projetos;\"\n```\n\n## Deployment\n\nSistema projetado para uso local. Para produção:\n- Ajustar portas\n- Configurar HTTPS\n- Adicionar autenticação\n- Isolar processos\n- Usar PM2 ou similar\n\n---\n\n**Última atualização:** 2025-01-09\n**Versão:** 2.0.0\n","size_bytes":20698},"front/vite.config.js":{"content":"import { defineConfig } from 'vite'\nimport react from '@vitejs/plugin-react'\nexport default defineConfig({\n  plugins:[react()],\n  server:{\n    host:'0.0.0.0',\n    port:5000,\n    cors: true,\n    allowedHosts: true,\n    proxy: {\n      '/agente': {\n        target: 'http://localhost:6060',\n        changeOrigin: true,\n        rewrite: (path) => path.replace(/^\\/agente/, '')\n      },\n      '/api': {\n        target: 'http://localhost:5050',\n        changeOrigin: true,\n        rewrite: (path) => path.replace(/^\\/api/, '')\n      },\n      '/proxy': {\n        target: 'http://localhost:5050',\n        changeOrigin: true\n      }\n    }\n  }\n})\n","size_bytes":636},"front/src/main.jsx":{"content":"import React from 'react'; import { createRoot } from 'react-dom/client'; import App from './app.jsx'; createRoot(document.getElementById('root')).render(<App/>);\n","size_bytes":163},"front/src/app-backup.jsx":{"content":"import React, { useEffect, useMemo, useState } from \"react\";\n\nconst ORIGIN = typeof window !== \"undefined\" ? window.location.origin.replace(/\\/$/, \"\") : \"\";\n\nfunction normalizeBase(candidate) {\n  if (!candidate) return null;\n  const raw = String(candidate).trim();\n  if (!raw) return null;\n  if (/^https?:\\/\\//i.test(raw)) {\n    return raw.replace(/\\/$/, \"\");\n  }\n  if (raw.startsWith(\"//\")) {\n    if (!ORIGIN) return null;\n    const protocol = ORIGIN.split(\":\")[0] || \"http\";\n    return `${protocol}:${raw}`.replace(/\\/$/, \"\");\n  }\n  if (raw.startsWith(\"/\")) {\n    if (!ORIGIN) return null;\n    return `${ORIGIN}${raw}`.replace(/\\/$/, \"\");\n  }\n  if (ORIGIN) {\n    try {\n      const url = new URL(raw, `${ORIGIN}/`);\n      return url.toString().replace(/\\/$/, \"\");\n    } catch (e) {\n      console.warn(\"Falha ao normalizar endpoint\", raw, e);\n    }\n  }\n  return null;\n}\n\nfunction uniqueCandidates(list) {\n  const vistos = new Set();\n  const resultado = [];\n  for (const item of list) {\n    const normalizado = normalizeBase(item);\n    if (normalizado && !vistos.has(normalizado)) {\n      vistos.add(normalizado);\n      resultado.push(normalizado);\n    }\n  }\n  return resultado;\n}\n\nconst API_CANDIDATES = uniqueCandidates([\n  import.meta.env.VITE_API_URL,\n  \"/api\",\n  ORIGIN ? `${ORIGIN}/api` : null,\n  \"http://localhost:5050\",\n]);\n\nconst AGENTE_CANDIDATES = uniqueCandidates([\n  import.meta.env.VITE_AGENT_URL,\n  \"/agente\",\n  ORIGIN ? `${ORIGIN}/agente` : null,\n  \"http://localhost:6060\",\n]);\n\nfunction buildUrl(base, path) {\n  if (!base) return path;\n  if (!path) return base;\n  const trimmedBase = base.replace(/\\/$/, \"\");\n  const texto = String(path);\n  if (/^https?:\\/\\//i.test(texto)) return texto;\n  if (texto.startsWith(\"?\")) return `${trimmedBase}${texto}`;\n  const caminho = texto.startsWith(\"/\") ? texto : `/${texto}`;\n  return `${trimmedBase}${caminho}`;\n}\n\nfunction buildTree(list){\n  if(!Array.isArray(list)) return [];\n  const root = { children: {} };\n  const ensureDir = (parent, part, fullPath)=>{\n    if(!parent.children[part]){\n      parent.children[part] = {\n        nome: part,\n        tipo: \"dir\",\n        fullPath,\n        children: {},\n      };\n    }\n    return parent.children[part];\n  };\n\n  for(const item of list){\n    if(!item || !item.path) continue;\n    const partes = item.path.split(\"/\");\n    let cursor = root;\n    partes.forEach((parte, idx)=>{\n      const atualPath = partes.slice(0, idx+1).join(\"/\");\n      const ultimo = idx === partes.length-1;\n      if(ultimo){\n        if(item.tipo === \"dir\"){\n          const dir = ensureDir(cursor, parte, atualPath);\n          dir.tipo = \"dir\";\n        }else{\n          cursor.children[parte] = {\n            nome: parte,\n            tipo: item.tipo || \"file\",\n            fullPath: item.path,\n          };\n        }\n      }else{\n        cursor = ensureDir(cursor, parte, atualPath);\n      }\n    });\n  }\n\n  const ordenar = (nodes)=>{\n    return nodes.sort((a,b)=>{\n      if(a.tipo === b.tipo) return a.nome.localeCompare(b.nome);\n      return a.tipo === \"dir\" ? -1 : 1;\n    });\n  };\n\n  const toArray = (node)=>{\n    return ordenar(Object.values(node.children)).map((item)=>{\n      if(item.tipo === \"dir\"){\n        return {\n          ...item,\n          children: toArray(item),\n        };\n      }\n      return item;\n    });\n  };\n\n  return toArray(root);\n}\n\nfunction calculateDiff(before, after){\n  if(before === after){\n    return { linhas: [], adicionadas: 0, removidas: 0, truncado: false };\n  }\n  const linhasAntes = before.split(\"\\n\");\n  const linhasDepois = after.split(\"\\n\");\n  const limite = 160000;\n  if(linhasAntes.length * linhasDepois.length > limite){\n    return {\n      linhas: [],\n      adicionadas: Math.max(0, linhasDepois.length - linhasAntes.length),\n      removidas: Math.max(0, linhasAntes.length - linhasDepois.length),\n      truncado: true,\n    };\n  }\n\n  const m = linhasAntes.length;\n  const n = linhasDepois.length;\n  const dp = Array.from({ length: m + 1 }, () => Array(n + 1).fill(0));\n\n  for(let i = m - 1; i >= 0; i--){\n    for(let j = n - 1; j >= 0; j--){\n      if(linhasAntes[i] === linhasDepois[j]) dp[i][j] = dp[i + 1][j + 1] + 1;\n      else dp[i][j] = Math.max(dp[i + 1][j], dp[i][j + 1]);\n    }\n  }\n\n  const linhas = [];\n  let adicionadas = 0;\n  let removidas = 0;\n  let i = 0;\n  let j = 0;\n  let linhaAntes = 1;\n  let linhaDepois = 1;\n\n  while(i < m && j < n){\n    if(linhasAntes[i] === linhasDepois[j]){\n      linhas.push({ tipo: \"contexto\", valor: linhasAntes[i], linhaAntes, linhaDepois });\n      i++; j++; linhaAntes++; linhaDepois++;\n    }else if(dp[i + 1][j] >= dp[i][j + 1]){\n      linhas.push({ tipo: \"removida\", valor: linhasAntes[i], linhaAntes, linhaDepois: \"\" });\n      i++; linhaAntes++; removidas++;\n    }else{\n      linhas.push({ tipo: \"adicionada\", valor: linhasDepois[j], linhaAntes: \"\", linhaDepois });\n      j++; linhaDepois++; adicionadas++;\n    }\n  }\n\n  while(i < m){\n    linhas.push({ tipo: \"removida\", valor: linhasAntes[i], linhaAntes, linhaDepois: \"\" });\n    i++; linhaAntes++; removidas++;\n  }\n\n  while(j < n){\n    linhas.push({ tipo: \"adicionada\", valor: linhasDepois[j], linhaAntes: \"\", linhaDepois });\n    j++; linhaDepois++; adicionadas++;\n  }\n\n  return { linhas, adicionadas, removidas, truncado: false };\n}\n\nasync function parseJsonResponse(response, fallbackMessage) {\n  const texto = await response.text();\n  let dados = {};\n  if (texto) {\n    try {\n      dados = JSON.parse(texto);\n    } catch (e) {\n      console.warn(\"Resposta não JSON recebida\", texto);\n      dados = {};\n    }\n  }\n  if (!response.ok) {\n    const bruto = (typeof texto === \"string\" ? texto.trim() : \"\") || \"\";\n    const ehHtml = bruto.startsWith(\"<\") && bruto.endsWith(\">\");\n    const erro = (dados && dados.erro)\n      || (!ehHtml && bruto)\n      || fallbackMessage\n      || \"Falha ao comunicar com o serviço\";\n    throw new Error(erro);\n  }\n  return dados;\n}\n\nfunction useEndpointResolver(candidates, healthPath) {\n  const [base, setBase] = useState(() => candidates[0] || \"\");\n  const [status, setStatus] = useState(\"resolving\");\n  const signature = candidates.join(\"|\");\n\n  useEffect(() => {\n    let active = true;\n    async function resolve() {\n      for (const candidate of candidates) {\n        if (!candidate) continue;\n        try {\n          const response = await fetch(buildUrl(candidate, healthPath));\n          if (response.ok) {\n            if (active) {\n              setBase(candidate);\n              setStatus(\"ready\");\n            }\n            return;\n          }\n        } catch (e) {\n          // tenta o próximo candidato\n        }\n      }\n      if (active) setStatus(\"failed\");\n    }\n    resolve();\n    return () => {\n      active = false;\n    };\n  }, [healthPath, signature]);\n\n  return { base, status };\n}\n\nexport default function App(){\n  const { base: apiUrl, status: apiStatus } = useEndpointResolver(API_CANDIDATES, \"/saude\");\n  const { base: agenteUrl, status: agenteStatus } = useEndpointResolver(AGENTE_CANDIDATES, \"/saude\");\n  const [repo,setRepo]=useState(\"\");\n  const [branchBase,setBranchBase]=useState(\"\");\n  const [erro,setErro]=useState(\"\");\n\n  const requireAgentReady = ()=>{\n    if(agenteStatus === \"failed\"){ setErro(\"Agente indisponível. Verifique o serviço do agente.\"); return false; }\n    if(agenteStatus !== \"ready\"){ setErro(\"Aguardando conexão com o agente...\"); return false; }\n    return true;\n  };\n\n  const [arvore,setArvore]=useState([]);\n  const [arquivoAtual,setArquivoAtual]=useState(\"\");\n  const [conteudo,setConteudo]=useState(\"\");\n  const [original,setOriginal]=useState(\"\");\n  const [chat,setChat]=useState([]);\n  const [entradaChat,setEntradaChat]=useState(\"\");\n  const [mostrarDiff,setMostrarDiff]=useState(false);\n  const [explorerColapsado,setExplorerColapsado]=useState(false);\n  const [chatColapsado,setChatColapsado]=useState(false);\n  const [painelAberto,setPainelAberto]=useState({ conexoes:true, repositorio:true });\n  const [diretoriosAbertos,setDiretoriosAbertos]=useState({});\n\n  const dirty = conteudo !== original;\n  const statusMeta = {\n    ready: { texto: \"Conectado\", cor: \"#34d399\" },\n    resolving: { texto: \"Conectando...\", cor: \"#fbbf24\" },\n    failed: { texto: \"Falha\", cor: \"#f87171\" },\n  };\n\n  const conexoes = [\n    { chave:\"api\", titulo:\"API de tarefas\", status: apiStatus, url: apiUrl },\n    { chave:\"agente\", titulo:\"Agente\", status: agenteStatus, url: agenteUrl },\n  ];\n\n  async function abrir_repo(){\n    setErro(\"\");\n    if(!requireAgentReady()) return;\n    try{\n      const r=await fetch(buildUrl(agenteUrl, \"/repo/abrir\"),{\n        method:\"POST\", headers:{\"Content-Type\":\"application/json\"},\n        body:JSON.stringify({repositorioUrl:repo,branchBase})\n      });\n      const j=await parseJsonResponse(r, \"Falha ao abrir repositório\");\n      setArvore(j.arvore||[]);\n    }catch(e){ setErro(String(e?.message||e)); }\n  }\n\n  async function carregar_arvore(){\n    if(!requireAgentReady()) return;\n    try{\n      const r=await fetch(buildUrl(agenteUrl, \"/repo/tree\"));\n      const j=await parseJsonResponse(r, \"Falha ao carregar árvore\");\n      setArvore(j.arvore||[]);\n    }catch{ /* ignore */ }\n  }\n\n  async function abrir_arquivo(p){\n    if(!requireAgentReady()) return;\n    try{\n      const r=await fetch(buildUrl(agenteUrl, `/repo/file?path=${encodeURIComponent(p)}`));\n      const t=await r.text();\n      setArquivoAtual(p);\n      setConteudo(t);\n      setOriginal(t);\n      setMostrarDiff(false);\n    }catch(e){ setErro(String(e?.message||e)); }\n  }\n\n  async function persistirArquivo(){\n    if(!arquivoAtual) return;\n    if(!requireAgentReady()) return;\n    try{\n      const r = await fetch(buildUrl(agenteUrl, \"/repo/save\"),{\n        method:\"POST\",headers:{\"Content-Type\":\"application/json\"},body:JSON.stringify({path:arquivoAtual,conteudo})\n      });\n      await parseJsonResponse(r, \"Falha ao salvar arquivo\");\n      setOriginal(conteudo);\n      setMostrarDiff(false);\n      await carregar_arvore();\n    }catch(e){ setErro(String(e?.message||e)); }\n  }\n\n  async function commit_push(){\n    if(!requireAgentReady()) return;\n    try{\n      const r = await fetch(buildUrl(agenteUrl, \"/repo/commit\"),{\n        method:\"POST\",headers:{\"Content-Type\":\"application/json\"},body:JSON.stringify({mensagem:`feat: atualizações em ${arquivoAtual||\"repo\"}`})\n      });\n      await parseJsonResponse(r, \"Falha ao realizar commit\");\n    }catch(e){ setErro(String(e?.message||e)); }\n  }\n\n  async function enviar_chat(texto){\n    const msg = texto.trim();\n    if(!msg) return;\n    if(!requireAgentReady()) { setErro(\"Aguardando conexão com o agente para enviar mensagens.\"); return; }\n    const novo = [...chat, {autor:\"Você\", texto: msg}];\n    setChat(novo);\n    setEntradaChat(\"\");\n    try{\n      const r=await fetch(buildUrl(agenteUrl, \"/chat\"),{method:\"POST\",headers:{\"Content-Type\":\"application/json\"},body:JSON.stringify({mensagem:msg})});\n      const j=await parseJsonResponse(r, \"Falha ao enviar mensagem\");\n      setChat([...novo, {autor:\"Agente\", texto:j.resposta||\"\"}]);\n    }catch(e){ setChat([...novo, {autor:\"Agente\", texto:String(e?.message||e)}]); }\n  }\n\n  const arvoreEstruturada = useMemo(()=> buildTree(arvore), [arvore]);\n\n  useEffect(()=>{\n    const inicial = {};\n    const visitar = (nodos)=>{\n      nodos.forEach((n)=>{\n        if(n.tipo === \"dir\"){\n          inicial[n.fullPath] = true;\n          if(n.children) visitar(n.children);\n        }\n      });\n    };\n    visitar(arvoreEstruturada);\n    setDiretoriosAbertos((prev)=> ({ ...inicial, ...prev }));\n  },[arvoreEstruturada]);\n\n  useEffect(()=>{\n    if(!dirty) setMostrarDiff(false);\n  },[dirty]);\n\n  const diffInfo = useMemo(()=> calculateDiff(original, conteudo), [original, conteudo]);\n\n  const styles = {\n    shell:{display:\"flex\",height:\"100vh\",background:\"radial-gradient(circle at top,#1f2a40,#0b1120 65%)\",color:\"#e2e8f0\",fontFamily:\"'Inter', system-ui, -apple-system, BlinkMacSystemFont\"},\n    sidebar:{width:300,display:\"flex\",flexDirection:\"column\",gap:24,padding:\"28px 22px\",background:\"rgba(8,15,27,0.92)\",borderRight:\"1px solid rgba(148,163,184,0.15)\",backdropFilter:\"blur(18px)\"},\n    brand:{display:\"flex\",alignItems:\"center\",gap:12},\n    brandLogo:{width:44,height:44,borderRadius:14,background:\"linear-gradient(135deg,#38bdf8,#2563eb)\",display:\"flex\",alignItems:\"center\",justifyContent:\"center\",fontWeight:700},\n    brandText:{display:\"flex\",flexDirection:\"column\",gap:6,fontWeight:600},\n    section:{display:\"flex\",flexDirection:\"column\",gap:12},\n    sectionHeader:{display:\"flex\",alignItems:\"center\",justifyContent:\"space-between\",fontSize:13,fontWeight:600,letterSpacing:0.4,color:\"#cbd5f5\"},\n    toggleBtn:{background:\"transparent\",border:0,color:\"#94a3b8\",cursor:\"pointer\",fontSize:16},\n    statusCard:{display:\"flex\",flexDirection:\"column\",gap:8,padding:\"12px 14px\",borderRadius:14,background:\"rgba(15,23,42,0.68)\",border:\"1px solid rgba(148,163,184,0.2)\"},\n    statusRow:{display:\"flex\",alignItems:\"center\",gap:8,fontSize:13,fontWeight:600},\n    statusUrl:{fontSize:11,color:\"rgba(226,232,240,0.65)\",wordBreak:\"break-word\"},\n    input:{padding:\"10px 12px\",borderRadius:10,border:\"1px solid rgba(148,163,184,0.2)\",background:\"rgba(15,23,42,0.55)\",color:\"#f8fafc\",fontSize:13},\n    primaryButton:{padding:\"10px 14px\",borderRadius:10,border:0,background:\"linear-gradient(135deg,#4f46e5,#3b82f6)\",color:\"#fff\",fontWeight:600,cursor:\"pointer\",display:\"flex\",gap:8,alignItems:\"center\",justifyContent:\"center\",boxShadow:\"0 12px 28px rgba(59,130,246,0.28)\"},\n    secondaryButton:{padding:\"10px 14px\",borderRadius:10,border:\"1px solid rgba(148,163,184,0.3)\",background:\"rgba(15,23,42,0.35)\",color:\"#e2e8f0\",fontWeight:500,cursor:\"pointer\"},\n    main:{flex:1,display:\"flex\",flexDirection:\"column\",padding:\"28px 30px\",gap:20},\n    chrome:{background:\"rgba(10,12,23,0.85)\",borderRadius:20,border:\"1px solid rgba(148,163,184,0.16)\",boxShadow:\"0 30px 80px -30px rgba(15,23,42,0.6)\",display:\"flex\",flexDirection:\"column\",flex:1,overflow:\"hidden\"},\n    windowBar:{display:\"flex\",alignItems:\"center\",gap:10,padding:\"16px 22px\",borderBottom:\"1px solid rgba(148,163,184,0.18)\",background:\"rgba(15,23,42,0.75)\"},\n    windowDots:{display:\"flex\",gap:8},\n    windowDot:(color)=>({width:12,height:12,borderRadius:\"50%\",background:color,boxShadow:`0 0 0 1px rgba(0,0,0,0.25)`}),\n    tabBar:{display:\"flex\",alignItems:\"center\",gap:10,padding:\"12px 18px\",background:\"rgba(9,10,22,0.95)\",borderBottom:\"1px solid rgba(148,163,184,0.18)\"},\n    tab:{padding:\"8px 14px\",borderRadius:10,fontSize:13,background:\"rgba(15,23,42,0.75)\",color:\"#94a3b8\"},\n    tabActive:{background:\"linear-gradient(135deg,#1d4ed8,#2563eb)\",color:\"#e2e8f0\"},\n    errorBanner:{padding:\"10px 18px\",background:\"rgba(248,113,113,0.15)\",borderBottom:\"1px solid rgba(248,113,113,0.45)\",color:\"#fecaca\",fontSize:13},\n    workspace:{flex:1,display:\"flex\",overflow:\"hidden\",background:\"rgba(2,6,23,0.9)\"},\n    explorer:(colapsado)=>({width:colapsado?56:260,transition:\"width .25s ease\",borderRight:\"1px solid rgba(148,163,184,0.12)\",background:\"rgba(6,11,25,0.92)\",display:\"flex\",flexDirection:\"column\"}),\n    explorerHeader:{display:\"flex\",alignItems:\"center\",justifyContent:\"space-between\",padding:\"14px 16px\",borderBottom:\"1px solid rgba(148,163,184,0.12)\",fontSize:12,letterSpacing:0.3,fontWeight:600,color:\"#cbd5f5\"},\n    explorerBody:{flex:1,overflow:\"auto\",padding:\"12px 10px 40px\",fontFamily:\"ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, 'Liberation Mono', 'Courier New', monospace\",fontSize:12,display:\"flex\",flexDirection:\"column\",gap:4},\n    treeNode:(ativo)=>({display:\"flex\",alignItems:\"center\",gap:8,padding:\"6px 8px\",borderRadius:8,cursor:\"pointer\",background:ativo?\"rgba(37,99,235,0.28)\":\"transparent\",color:\"#cbd5f5\",transition:\"background .2s\"}),\n    treeIndent:(nivel)=>({marginLeft:nivel*16}),\n    editorCol:{flex:1,display:\"flex\",flexDirection:\"column\"},\n    editorSurface:{flex:1,position:\"relative\",background:\"#0f172a\"},\n    editorTextarea:{position:\"absolute\",top:0,left:0,right:0,bottom:0,width:\"100%\",height:\"100%\",background:\"transparent\",color:\"#e2e8f0\",border:0,padding:\"22px 28px\",fontSize:14,lineHeight:1.6,fontFamily:\"'Fira Code', 'JetBrains Mono', ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, 'Liberation Mono', 'Courier New', monospace\"},\n    diffBar:{display:\"flex\",alignItems:\"center\",justifyContent:\"space-between\",padding:\"14px 18px\",borderTop:\"1px solid rgba(148,163,184,0.14)\",background:\"rgba(15,23,42,0.85)\",fontSize:13},\n    diffPanel:{margin:18,padding:18,background:\"rgba(15,23,42,0.9)\",border:\"1px solid rgba(148,163,184,0.22)\",borderRadius:14,display:\"flex\",flexDirection:\"column\",gap:16,maxHeight:260,overflow:\"hidden\"},\n    diffScroll:{flex:1,overflow:\"auto\",background:\"rgba(2,6,23,0.9)\",borderRadius:10,border:\"1px solid rgba(30,64,175,0.35)\",fontFamily:\"'Fira Code', ui-monospace\",fontSize:12},\n    diffLine:(tipo)=>({display:\"grid\",gridTemplateColumns:\"60px 60px 1fr\",gap:12,padding:\"6px 18px\",background:tipo===\"adicionada\"?\"rgba(34,197,94,0.14)\":tipo===\"removida\"?\"rgba(248,113,113,0.12)\":\"transparent\",color:tipo===\"adicionada\"?\"#bbf7d0\":tipo===\"removida\"?\"#fecaca\":\"#cbd5f5\",borderBottom:\"1px solid rgba(148,163,184,0.08)\"}),\n    diffActions:{display:\"flex\",justifyContent:\"flex-end\",gap:12},\n    chatDock:(colapsado)=>({marginTop:18,background:\"rgba(8,12,25,0.92)\",border:\"1px solid rgba(148,163,184,0.16)\",borderRadius:18,overflow:\"hidden\",transition:\"height .25s ease\",height:colapsado?54:320,display:\"flex\",flexDirection:\"column\"}),\n    chatHeader:{display:\"flex\",alignItems:\"center\",justifyContent:\"space-between\",padding:\"14px 18px\",borderBottom:\"1px solid rgba(148,163,184,0.14)\",fontWeight:600,fontSize:13,color:\"#cbd5f5\"},\n    chatMessages:{flex:1,overflow:\"auto\",padding:\"18px 22px\",display:\"flex\",flexDirection:\"column\",gap:12},\n    chatBubble:(autor)=>({alignSelf:autor===\"Você\"?\"flex-end\":\"flex-start\",maxWidth:\"70%\",background:autor===\"Você\"?\"rgba(37,99,235,0.35)\":\"rgba(15,23,42,0.6)\",border:\"1px solid rgba(148,163,184,0.2)\",borderRadius:autor===\"Você\"?\"16px 16px 0 16px\":\"16px 16px 16px 0\",padding:\"12px 14px\",display:\"grid\",gap:6,color:\"#e2e8f0\"}),\n    chatInputRow:{display:\"flex\",gap:12,padding:\"16px 18px\",borderTop:\"1px solid rgba(148,163,184,0.16)\",background:\"rgba(10,12,23,0.92)\"},\n    chatInput:{flex:1,minHeight:44,borderRadius:12,border:\"1px solid rgba(148,163,184,0.25)\",background:\"rgba(15,23,42,0.55)\",color:\"#e2e8f0\",padding:\"10px 12px\",fontSize:13,fontFamily:\"'Inter', system-ui\"},\n  };\n\n  const renderNode = (node, nivel=0)=>{\n    const isDir = node.tipo === \"dir\";\n    const aberto = diretoriosAbertos[node.fullPath] ?? true;\n    const handleClick = ()=>{\n      if(isDir){\n        setDiretoriosAbertos((prev)=> ({...prev, [node.fullPath]: !aberto }));\n      }else{\n        abrir_arquivo(node.fullPath);\n      }\n    };\n    return (\n      <div key={node.fullPath}>\n        <div style={{...styles.treeIndent(nivel), ...styles.treeNode(arquivoAtual===node.fullPath)}} onClick={handleClick}>\n          <span style={{fontSize:12}}>{isDir ? (aberto ? \"▾\" : \"▸\") : \"\"}</span>\n          <span>{isDir ? (aberto ? \"📂\" : \"📁\") : \"📄\"}</span>\n          <span style={{whiteSpace:\"nowrap\",overflow:\"hidden\",textOverflow:\"ellipsis\"}}>{node.nome}</span>\n        </div>\n        {isDir && aberto && node.children && node.children.map((filho)=> renderNode(filho, nivel+1))}\n      </div>\n    );\n  };\n\n  const diffResumo = `+${diffInfo.adicionadas}  -${diffInfo.removidas}`;\n\n  return (\n    <div style={styles.shell}>\n      <aside style={styles.sidebar}>\n        <div style={styles.brand}>\n          <div style={styles.brandLogo}>AI</div>\n          <div style={styles.brandText}>\n            <span style={{fontSize:15}}>Agente de Código</span>\n            <span style={{fontSize:12,color:\"#64748b\"}}>Sessão local conectada</span>\n          </div>\n        </div>\n\n        <div style={styles.section}>\n          <div style={styles.sectionHeader}>\n            <span>Status das conexões</span>\n            <button style={styles.toggleBtn} onClick={()=>setPainelAberto((prev)=>({...prev, conexoes:!prev.conexoes}))}>{painelAberto.conexoes ? \"−\" : \"+\"}</button>\n          </div>\n          {painelAberto.conexoes && (\n            <div style={{display:\"flex\",flexDirection:\"column\",gap:10}}>\n              {conexoes.map((c)=>{\n                const meta = statusMeta[c.status] || statusMeta.resolving;\n                return (\n                  <div key={c.chave} style={styles.statusCard}>\n                    <div style={styles.statusRow}>\n                      <span style={{width:8,height:8,borderRadius:\"50%\",background:meta.cor}}></span>\n                      <span>{c.titulo}</span>\n                      <span style={{marginLeft:\"auto\",fontSize:12,color:\"rgba(226,232,240,0.65)\"}}>{meta.texto}</span>\n                    </div>\n                    <div style={styles.statusUrl}>{c.url || \"Detectando endpoint...\"}</div>\n                  </div>\n                );\n              })}\n            </div>\n          )}\n        </div>\n\n        <div style={styles.section}>\n          <div style={styles.sectionHeader}>\n            <span>Repositório ativo</span>\n            <button style={styles.toggleBtn} onClick={()=>setPainelAberto((prev)=>({...prev, repositorio:!prev.repositorio}))}>{painelAberto.repositorio ? \"−\" : \"+\"}</button>\n          </div>\n          {painelAberto.repositorio && (\n            <div style={{display:\"flex\",flexDirection:\"column\",gap:12}}>\n              <div style={{display:\"flex\",flexDirection:\"column\",gap:6}}>\n                <label style={{fontSize:11,textTransform:\"uppercase\",letterSpacing:0.5,color:\"#64748b\"}}>URL do repositório</label>\n                <input style={styles.input} placeholder=\"https://github.com/org/projeto\" value={repo} onChange={(e)=>setRepo(e.target.value)} />\n              </div>\n              <div style={{display:\"flex\",flexDirection:\"column\",gap:6}}>\n                <label style={{fontSize:11,textTransform:\"uppercase\",letterSpacing:0.5,color:\"#64748b\"}}>Branch base</label>\n                <input style={styles.input} placeholder=\"main\" value={branchBase} onChange={(e)=>setBranchBase(e.target.value)} />\n              </div>\n              <div style={{display:\"flex\",gap:10}}>\n                <button style={styles.primaryButton} onClick={abrir_repo}>Abrir workspace</button>\n                <button style={styles.secondaryButton} onClick={carregar_arvore}>Recarregar árvore</button>\n              </div>\n            </div>\n          )}\n        </div>\n      </aside>\n\n      <main style={styles.main}>\n        <div style={styles.chrome}>\n          <div style={styles.windowBar}>\n            <div style={styles.windowDots}>\n              <div style={styles.windowDot(\"#ef4444\")} />\n              <div style={styles.windowDot(\"#facc15\")} />\n              <div style={styles.windowDot(\"#22c55e\")} />\n            </div>\n            <div style={{marginLeft:12,fontSize:13,color:\"#94a3b8\"}}>Editor do agente</div>\n            <div style={{marginLeft:\"auto\",display:\"flex\",gap:10}}>\n              <button style={styles.secondaryButton} onClick={()=>setExplorerColapsado((v)=>!v)}>{explorerColapsado?\"Mostrar árvore\":\"Ocultar árvore\"}</button>\n              <button style={styles.secondaryButton} onClick={commit_push}>Commit & Push</button>\n            </div>\n          </div>\n          <div style={styles.tabBar}>\n            <div style={{...styles.tab, ...(arquivoAtual ? styles.tabActive : {})}}>{arquivoAtual || \"Sem arquivo aberto\"}</div>\n          </div>\n          {erro && <div style={styles.errorBanner}>{erro}</div>}\n          <div style={styles.workspace}>\n            <div style={styles.explorer(explorerColapsado)}>\n              <div style={styles.explorerHeader}>\n                <span>{explorerColapsado ? \"\" : \"Explorador\"}</span>\n                <button style={styles.toggleBtn} onClick={()=>setExplorerColapsado((v)=>!v)}>{explorerColapsado?\"▸\":\"▾\"}</button>\n              </div>\n              {!explorerColapsado && (\n                <div style={styles.explorerBody}>\n                  {arvoreEstruturada.length ? arvoreEstruturada.map((n)=> renderNode(n)) : <div style={{color:\"#475569\",padding:\"12px 6px\"}}>Nenhum repositório carregado.</div>}\n                </div>\n              )}\n            </div>\n            <div style={styles.editorCol}>\n              <div style={styles.editorSurface}>\n                <textarea value={conteudo} onChange={(e)=>setConteudo(e.target.value)} style={styles.editorTextarea} placeholder=\"Selecione um arquivo para começar a edição\" />\n              </div>\n              {dirty && (\n                <div style={styles.diffBar}>\n                  <div style={{display:\"flex\",flexDirection:\"column\"}}>\n                    <span>Alterações não aplicadas {arquivoAtual ? `em ${arquivoAtual}` : \"\"}</span>\n                    <span style={{fontSize:12,color:\"#64748b\"}}>Resumo {diffResumo}</span>\n                  </div>\n                  <div style={{display:\"flex\",gap:10}}>\n                    <button style={styles.secondaryButton} onClick={()=>setMostrarDiff(true)}>Pré-visualizar</button>\n                    <button style={styles.secondaryButton} onClick={()=>{ setConteudo(original); setMostrarDiff(false); }}>Descartar</button>\n                  </div>\n                </div>\n              )}\n              {mostrarDiff && dirty && (\n                <div style={styles.diffPanel}>\n                  <div style={{display:\"flex\",justifyContent:\"space-between\",alignItems:\"center\"}}>\n                    <div>\n                      <div style={{fontWeight:600,fontSize:14}}>Deseja aplicar as alterações?</div>\n                      <div style={{fontSize:12,color:\"#94a3b8\"}}>Confirme para salvar o arquivo via agente.</div>\n                    </div>\n                    <span style={{fontFamily:\"ui-monospace\",fontSize:12,color:\"#60a5fa\"}}>{diffResumo}</span>\n                  </div>\n                  {diffInfo.truncado ? (\n                    <div style={{padding:12,borderRadius:10,border:\"1px solid rgba(148,163,184,0.2)\",background:\"rgba(15,23,42,0.7)\",fontSize:12,color:\"#cbd5f5\"}}>\n                      Pré-visualização indisponível para arquivos grandes. Deseja aplicar mesmo assim?\n                    </div>\n                  ) : (\n                    <div style={styles.diffScroll}>\n                      {diffInfo.linhas.map((linha,idx)=>(\n                        <div key={idx} style={styles.diffLine(linha.tipo)}>\n                          <span style={{color:\"#64748b\"}}>{linha.linhaAntes || \"\"}</span>\n                          <span style={{color:\"#64748b\"}}>{linha.linhaDepois || \"\"}</span>\n                          <span style={{whiteSpace:\"pre\"}}>{(linha.tipo === \"adicionada\"?\"+\":linha.tipo === \"removida\"?\"-\":\" \") + linha.valor}</span>\n                        </div>\n                      ))}\n                      {!diffInfo.linhas.length && <div style={{padding:16,color:\"#64748b\"}}>Nenhuma diferença detectada.</div>}\n                    </div>\n                  )}\n                  <div style={styles.diffActions}>\n                    <button style={styles.secondaryButton} onClick={()=>setMostrarDiff(false)}>Voltar</button>\n                    <button style={styles.primaryButton} onClick={persistirArquivo}>Aplicar alterações</button>\n                  </div>\n                </div>\n              )}\n            </div>\n          </div>\n        </div>\n\n        <div style={styles.chatDock(chatColapsado)}>\n          <div style={styles.chatHeader}>\n            <span>Chat com o agente</span>\n            <button style={styles.toggleBtn} onClick={()=>setChatColapsado((v)=>!v)}>{chatColapsado?\"▲\":\"▼\"}</button>\n          </div>\n          {!chatColapsado && (\n            <>\n              <div style={styles.chatMessages}>\n                {chat.map((m,i)=>(\n                  <div key={i} style={styles.chatBubble(m.autor)}>\n                    <strong style={{fontSize:11,letterSpacing:0.6,color:\"rgba(226,232,240,0.75)\"}}>{m.autor}</strong>\n                    <span style={{whiteSpace:\"pre-wrap\",fontSize:13}}>{m.texto}</span>\n                  </div>\n                ))}\n                {!chat.length && <div style={{color:\"#475569\",fontSize:13}}>Converse com o agente para orientar edições e automatizar fluxos.</div>}\n              </div>\n              <div style={styles.chatInputRow}>\n                <textarea style={styles.chatInput} placeholder=\"Descreva a alteração desejada...\" value={entradaChat} onChange={(e)=>setEntradaChat(e.target.value)} onKeyDown={(e)=>{ if(e.key===\"Enter\" && !e.shiftKey){ e.preventDefault(); enviar_chat(entradaChat); } }} />\n                <button style={styles.primaryButton} onClick={()=>enviar_chat(entradaChat)}>Enviar</button>\n              </div>\n            </>\n          )}\n        </div>\n      </main>\n    </div>\n  );\n}\n ","size_bytes":28804},"verificar-sistema.sh":{"content":"#!/bin/bash\n\necho \"===================================\"\necho \"Verificação do Sistema Agente IA\"\necho \"===================================\"\necho \"\"\n\n# Cores\nGREEN='\\033[0;32m'\nRED='\\033[0;31m'\nYELLOW='\\033[1;33m'\nNC='\\033[0m' # No Color\n\n# Verificar Node.js\necho -n \"Verificando Node.js... \"\nif command -v node &> /dev/null; then\n    NODE_VERSION=$(node -v)\n    echo -e \"${GREEN}✓ Instalado ($NODE_VERSION)${NC}\"\nelse\n    echo -e \"${RED}✗ Não encontrado${NC}\"\n    echo \"  Instale Node.js 18+ de https://nodejs.org\"\n    exit 1\nfi\n\n# Verificar npm\necho -n \"Verificando npm... \"\nif command -v npm &> /dev/null; then\n    NPM_VERSION=$(npm -v)\n    echo -e \"${GREEN}✓ Instalado ($NPM_VERSION)${NC}\"\nelse\n    echo -e \"${RED}✗ Não encontrado${NC}\"\n    exit 1\nfi\n\n# Verificar Git\necho -n \"Verificando Git... \"\nif command -v git &> /dev/null; then\n    GIT_VERSION=$(git --version | cut -d' ' -f3)\n    echo -e \"${GREEN}✓ Instalado ($GIT_VERSION)${NC}\"\nelse\n    echo -e \"${RED}✗ Não encontrado${NC}\"\n    echo \"  Instale Git de https://git-scm.com\"\n    exit 1\nfi\n\n# Verificar Ollama\necho -n \"Verificando Ollama... \"\nif command -v ollama &> /dev/null; then\n    echo -e \"${GREEN}✓ Instalado${NC}\"\n\n    # Verificar se está rodando\n    echo -n \"Verificando se Ollama está rodando... \"\n    if curl -s http://localhost:11434/api/tags > /dev/null 2>&1; then\n        echo -e \"${GREEN}✓ Rodando${NC}\"\n\n        # Listar modelos disponíveis\n        echo \"\"\n        echo \"Modelos disponíveis:\"\n        MODELS=$(curl -s http://localhost:11434/api/tags | grep -o '\"name\":\"[^\"]*\"' | cut -d'\"' -f4)\n        if [ -z \"$MODELS\" ]; then\n            echo -e \"${YELLOW}  ⚠ Nenhum modelo baixado${NC}\"\n            echo \"  Execute: ollama pull qwen2.5-coder:7b\"\n        else\n            echo \"$MODELS\" | while read -r model; do\n                echo -e \"  ${GREEN}✓${NC} $model\"\n            done\n        fi\n    else\n        echo -e \"${RED}✗ Não está rodando${NC}\"\n        echo \"  Execute: ollama serve\"\n    fi\nelse\n    echo -e \"${RED}✗ Não encontrado${NC}\"\n    echo \"  Instale Ollama de https://ollama.com\"\n    exit 1\nfi\n\n# Verificar dependências do projeto\necho \"\"\necho -n \"Verificando dependências... \"\nif [ -d \"node_modules\" ]; then\n    echo -e \"${GREEN}✓ Instaladas${NC}\"\nelse\n    echo -e \"${YELLOW}⚠ Não instaladas${NC}\"\n    echo \"  Execute: npm run instalar\"\nfi\n\n# Verificar arquivos de configuração\necho \"\"\necho \"Verificando arquivos de configuração:\"\n\necho -n \"  agente/.env... \"\nif [ -f \"agente/.env\" ]; then\n    echo -e \"${GREEN}✓ Existe${NC}\"\nelse\n    echo -e \"${YELLOW}⚠ Não existe${NC}\"\n    echo \"    Execute: cp agente/.env.example agente/.env\"\nfi\n\necho -n \"  api/.env... \"\nif [ -f \"api/.env\" ]; then\n    echo -e \"${GREEN}✓ Existe${NC}\"\nelse\n    echo -e \"${YELLOW}⚠ Não existe (opcional)${NC}\"\nfi\n\necho -n \"  front/.env... \"\nif [ -f \"front/.env\" ]; then\n    echo -e \"${GREEN}✓ Existe${NC}\"\nelse\n    echo -e \"${YELLOW}⚠ Não existe (opcional)${NC}\"\nfi\n\n# Verificar banco de dados\necho \"\"\necho -n \"Verificando banco de dados... \"\nDB_PATH=\"$HOME/.agente-ia/agente.db\"\nif [ -f \"$DB_PATH\" ]; then\n    DB_SIZE=$(du -h \"$DB_PATH\" | cut -f1)\n    echo -e \"${GREEN}✓ Existe ($DB_SIZE)${NC}\"\n    echo \"  Localização: $DB_PATH\"\nelse\n    echo -e \"${YELLOW}⚠ Será criado ao iniciar${NC}\"\n    echo \"  Localização: $DB_PATH\"\nfi\n\n# Verificar portas\necho \"\"\necho \"Verificando portas:\"\n\ncheck_port() {\n    local port=$1\n    local name=$2\n    echo -n \"  Porta $port ($name)... \"\n    if lsof -i:$port > /dev/null 2>&1; then\n        echo -e \"${YELLOW}⚠ Em uso${NC}\"\n    else\n        echo -e \"${GREEN}✓ Disponível${NC}\"\n    fi\n}\n\ncheck_port 5050 \"API\"\ncheck_port 6060 \"Agente\"\ncheck_port 5173 \"Vite\"\n\n# Resumo\necho \"\"\necho \"===================================\"\necho \"Resumo\"\necho \"===================================\"\necho \"\"\necho \"Para iniciar o sistema:\"\necho \"  npm run dev\"\necho \"\"\necho \"Para abrir a interface:\"\necho \"  http://localhost:5173\"\necho \"\"\necho \"Para baixar modelo recomendado:\"\necho \"  ollama pull qwen2.5-coder:7b\"\necho \"\"\n","size_bytes":4068},"agente/src/memoria.js":{"content":"import fs from \"node:fs\";\nimport path from \"node:path\";\n\nfunction dirAgente(base){\n  return path.join(base, \".agent\");\n}\n\nasync function ensureDir(p){\n  await fs.promises.mkdir(p, { recursive: true });\n}\n\nexport async function initMem(base){\n  const dir = dirAgente(base);\n  await ensureDir(dir);\n  const statePath = path.join(dir, \"state.json\");\n  try{ await fs.promises.access(statePath); }\n  catch{ await fs.promises.writeFile(statePath, JSON.stringify({ createdAt: new Date().toISOString() }, null, 2), \"utf-8\"); }\n}\n\nexport async function logEvent(base, tipo, dados={}){\n  try{\n    await initMem(base);\n    const linha = JSON.stringify({ ts: new Date().toISOString(), tipo, ...dados })+\"\\n\";\n    await fs.promises.appendFile(path.join(dirAgente(base), \"history.jsonl\"), linha, \"utf-8\");\n  }catch{}\n}\n\nexport async function loadState(base){\n  try{\n    const raw = await fs.promises.readFile(path.join(dirAgente(base), \"state.json\"), \"utf-8\");\n    return JSON.parse(raw||\"{}\")||{};\n  }catch{ return {}; }\n}\n\nexport async function saveState(base, patch){\n  try{\n    await initMem(base);\n    const atual = await loadState(base);\n    const novo = { ...atual, ...patch, updatedAt: new Date().toISOString() };\n    await fs.promises.writeFile(path.join(dirAgente(base), \"state.json\"), JSON.stringify(novo, null, 2), \"utf-8\");\n    return novo;\n  }catch{ return null; }\n}\n\n","size_bytes":1368},"front/src/app.jsx":{"content":"﻿import React, { useCallback, useEffect, useMemo, useRef, useState } from \"react\";\nimport hljs from \"highlight.js/lib/common\";\nimport \"highlight.js/styles/github-dark-dimmed.css\";\nimport \"@fortawesome/fontawesome-free/css/all.min.css\";\nimport \"./app.css\";\nimport { AttachmentMenu } from \"./AttachmentMenu\";\nimport { MudancaCard } from \"./MudancaCard\";\nimport { HistoricoItem } from \"./HistoricoItem\";\nimport { enviarChatComStreaming, criarDiffVisualizer } from \"./chat-utils\";\n\nconst ORIGIN = typeof window !== \"undefined\" ? window.location.origin.replace(/\\/$/, \"\") : \"\";\n\nfunction normalizeBase(candidate) {\n  if (!candidate) return null;\n  const raw = String(candidate).trim();\n  if (!raw) return null;\n  if (/^https?:\\/\\//i.test(raw)) return raw.replace(/\\/$/, \"\");\n  if (raw.startsWith(\"//\")) {\n    if (!ORIGIN) return null;\n    const protocol = ORIGIN.split(\":\")[0] || \"http\";\n    return `${protocol}:${raw}`.replace(/\\/$/, \"\");\n  }\n  if (raw.startsWith(\"/\")) {\n    if (!ORIGIN) return null;\n    return `${ORIGIN}${raw}`.replace(/\\/$/, \"\");\n  }\n  if (ORIGIN) {\n    try {\n      const url = new URL(raw, `${ORIGIN}/`);\n      return url.toString().replace(/\\/$/, \"\");\n    } catch (e) {\n      console.warn(\"Falha ao normalizar endpoint\", raw, e);\n    }\n  }\n  return null;\n}\n\nfunction uniqueCandidates(list) {\n  const vistos = new Set();\n  const resultado = [];\n  for (const item of list) {\n    const normalizado = normalizeBase(item);\n    if (normalizado && !vistos.has(normalizado)) {\n      vistos.add(normalizado);\n      resultado.push(normalizado);\n    }\n  }\n  return resultado;\n}\n\nconst AGENTE_CANDIDATES = uniqueCandidates([\n  import.meta.env.VITE_AGENT_URL,\n  \"/agente\",\n  ORIGIN ? `${ORIGIN}/agente` : null,\n  \"http://localhost:6060\",\n]);\n\nfunction buildUrl(base, path) {\n  if (!base) return path;\n  if (!path) return base;\n  const trimmedBase = base.replace(/\\/$/, \"\");\n  const texto = String(path);\n  if (/^https?:\\/\\//i.test(texto)) return texto;\n  if (texto.startsWith(\"?\")) return `${trimmedBase}${texto}`;\n  const caminho = texto.startsWith(\"/\") ? texto : `/${texto}`;\n  return `${trimmedBase}${caminho}`;\n}\n\nfunction buildTree(list) {\n  if (!Array.isArray(list)) return [];\n  const root = { children: {} };\n\n  const ensureDir = (parent, part, fullPath) => {\n    if (!parent.children[part]) {\n      parent.children[part] = { nome: part, tipo: \"dir\", fullPath, children: {} };\n    }\n    return parent.children[part];\n  };\n\n  for (const item of list) {\n    if (!item || !item.path) continue;\n    const partes = item.path.split(\"/\");\n    let cursor = root;\n\n    partes.forEach((parte, idx) => {\n      const atualPath = partes.slice(0, idx + 1).join(\"/\");\n      const ultimo = idx === partes.length - 1;\n\n      if (ultimo) {\n        if (item.tipo === \"dir\") {\n          const dir = ensureDir(cursor, parte, atualPath);\n          dir.tipo = \"dir\";\n        } else {\n          cursor.children[parte] = { nome: parte, tipo: item.tipo || \"file\", fullPath: item.path };\n        }\n      } else {\n        cursor = ensureDir(cursor, parte, atualPath);\n      }\n    });\n  }\n\n  const ordenar = (nodes) => {\n    return nodes.sort((a, b) => {\n      if (a.tipo === b.tipo) return a.nome.localeCompare(b.nome);\n      return a.tipo === \"dir\" ? -1 : 1;\n    });\n  };\n\n  const toArray = (node) => {\n    return ordenar(Object.values(node.children)).map((item) => {\n      if (item.tipo === \"dir\") {\n        return { ...item, children: toArray(item) };\n      }\n      return item;\n    });\n  };\n\n  return toArray(root);\n}\n\nasync function parseJsonResponse(response, fallbackMessage) {\n  const texto = await response.text();\n  let dados = {};\n\n  if (texto) {\n    try {\n      dados = JSON.parse(texto);\n    } catch (e) {\n      console.warn(\"Resposta não JSON recebida\", texto);\n      dados = {};\n    }\n  }\n\n  if (!response.ok) {\n    const erro = dados?.erro || fallbackMessage || \"Falha ao comunicar com o serviço\";\n    throw new Error(erro);\n  }\n\n  return dados;\n}\n\nfunction useEndpointResolver(candidates, healthPath) {\n  const [base, setBase] = useState(() => candidates[0] || \"\");\n  const [status, setStatus] = useState(\"resolving\");\n  const signature = candidates.join(\"|\");\n\n  useEffect(() => {\n    let active = true;\n\n    async function resolve() {\n      for (const candidate of candidates) {\n        if (!candidate) continue;\n        try {\n          const response = await fetch(buildUrl(candidate, healthPath));\n          if (response.ok) {\n            if (active) {\n              setBase(candidate);\n              setStatus(\"ready\");\n            }\n            return;\n          }\n        } catch {\n          // tenta o próximo candidato\n        }\n      }\n      if (active) setStatus(\"failed\");\n    }\n\n    resolve();\n    return () => {\n      active = false;\n    };\n  }, [healthPath, signature]);\n\n  return { base, status };\n}\n\nfunction classNames(...classes) {\n  return classes.filter(Boolean).join(\" \");\n}\n\nfunction createMessage(role, text, options = {}) {\n  return {\n    id: `${role}-${Date.now()}-${Math.random().toString(16).slice(2)}`,\n    role,\n    text,\n    pending: Boolean(options.pending),\n    timestamp: options.timestamp || new Date().toISOString(),\n  };\n}\n\nfunction mapConversasParaMensagens(lista = []) {\n  const mensagens = [];\n  lista.forEach((item, index) => {\n    if (item.mensagem) {\n      mensagens.push({\n        id: `hist-${index}-user`,\n        role: \"user\",\n        text: item.mensagem,\n        timestamp: item.timestamp,\n      });\n    }\n    if (item.resposta) {\n      mensagens.push({\n        id: `hist-${index}-agent`,\n        role: \"agent\",\n        text: item.resposta,\n        timestamp: item.timestamp,\n      });\n    }\n  });\n  return mensagens;\n}\n\nfunction extractFileFromDescription(descricao) {\n  if (!descricao) return null;\n  const match = descricao.match(/Arquivo\\s+(.+?)\\s+(salvo|alterado)/i);\n  return match ? match[1] : null;\n}\n\nfunction formatTimestamp(timestamp) {\n  if (!timestamp) return \"\";\n  try {\n    return new Intl.DateTimeFormat(\"pt-BR\", {\n      dateStyle: \"short\",\n      timeStyle: \"short\",\n    }).format(new Date(timestamp));\n  } catch {\n    return timestamp;\n  }\n}\n\nexport default function App() {\n  const { base: agenteUrl, status: agenteStatus } = useEndpointResolver(AGENTE_CANDIDATES, \"/saude\");\n\n  const [repo, setRepo] = useState(\"\");\n  const [repoUrl, setRepoUrl] = useState(\"\");\n  const [caminhoLocal, setCaminhoLocal] = useState(\"\");\n  const [branchBase, setBranchBase] = useState(\"main\");\n  const [erro, setErro] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n  const [loadingMessage, setLoadingMessage] = useState(\"\");\n\n  const [arvore, setArvore] = useState([]);\n  const [abas, setAbas] = useState([]);\n  const [abaAtiva, setAbaAtiva] = useState(null);\n  \n  const [chatSessions, setChatSessions] = useState(() => {\n    const saved = localStorage.getItem('chatSessions');\n    return saved ? JSON.parse(saved) : [{ \n      id: 1, \n      name: 'Chat Principal', \n      messages: [],\n      projeto: null,\n      arvore: [],\n      historico: []\n    }];\n  });\n  const [activeChatId, setActiveChatId] = useState(1);\n  const [chatMessages, setChatMessages] = useState([]);\n  const [entradaChat, setEntradaChat] = useState(\"\");\n  const [expandedHistory, setExpandedHistory] = useState({});\n  const [explorerColapsado, setExplorerColapsado] = useState(false);\n  const [chatColapsado, setChatColapsado] = useState(false);\n  const [sidebarColapsada, setSidebarColapsada] = useState(false);\n  const [tema, setTema] = useState(() => {\n    const saved = localStorage.getItem('theme');\n    return saved || 'dark';\n  });\n  const [diretoriosAbertos, setDiretoriosAbertos] = useState({});\n  const [projetoAtual, setProjetoAtual] = useState(null);\n  const [arvoreAtual, setArvoreAtual] = useState([]);\n  const [historicoAtual, setHistoricoAtual] = useState([]);\n  const [mudancasPendentes, setMudancasPendentes] = useState([]);\n  const [mostrarMudancas, setMostrarMudancas] = useState(false);\n  const [historico, setHistorico] = useState([]);\n  const [activeWorkspaceTab, setActiveWorkspaceTab] = useState(\"editor\");\n  const [chatWidth, setChatWidth] = useState(360);\n  const [isResizingChat, setIsResizingChat] = useState(false);\n  const [copiando, setCopiando] = useState(false);\n  const [menuAberto, setMenuAberto] = useState(null);\n  const [buscaAberta, setBuscaAberta] = useState(false);\n  const [textoBusca, setTextoBusca] = useState(\"\");\n  const [resultadosBusca, setResultadosBusca] = useState([]);\n  const [indiceBuscaAtual, setIndiceBuscaAtual] = useState(0);\n  const [diffViewerAberto, setDiffViewerAberto] = useState(false);\n  const [diffAtual, setDiffAtual] = useState(null);\n  const [indiceMudancaAtual, setIndiceMudancaAtual] = useState(0);\n\n  const chatResizeDataRef = useRef(null);\n  const chatListRef = useRef(null);\n  const menuRef = useRef(null);\n\n  const textareaRef = useRef(null);\n  const gutterRef = useRef(null);\n  const highlightRef = useRef(null);\n\n  const requireAgentReady = useCallback(() => {\n    if (agenteStatus === \"failed\") {\n      setErro(\"Agente indisponível. Verifique o serviço do agente.\");\n      return false;\n    }\n    if (agenteStatus !== \"ready\") {\n      setErro(\"Aguardando conexão com o agente...\");\n      return false;\n    }\n    return true;\n  }, [agenteStatus]);\n\n  const runWithLoading = useCallback(async (message, task) => {\n    setLoading(true);\n    setLoadingMessage(message || \"Processando...\");\n    try {\n      await task();\n    } finally {\n      setLoading(false);\n      setLoadingMessage(\"\");\n    }\n  }, []);\n\n  // Salvar tema no localStorage e aplicar classe\n  useEffect(() => {\n    localStorage.setItem('theme', tema);\n    document.documentElement.setAttribute('data-theme', tema);\n  }, [tema]);\n\n  const toggleTema = () => {\n    setTema(prev => prev === 'dark' ? 'light' : 'dark');\n  };\n\n  const carregarMudancasPendentes = useCallback(async () => {\n    if (!requireAgentReady()) return;\n    try {\n      const r = await fetch(buildUrl(agenteUrl, \"/mudancas/pendentes\"));\n      const j = await parseJsonResponse(r, \"Falha ao carregar mudanças\");\n      setMudancasPendentes(j.mudancas || []);\n    } catch (e) {\n      console.error(\"Erro ao carregar mudanças:\", e);\n    }\n  }, [agenteUrl, requireAgentReady]);\n\n  const carregarHistorico = useCallback(async () => {\n    if (!requireAgentReady()) return;\n    try {\n      const r = await fetch(buildUrl(agenteUrl, \"/historico\"));\n      const j = await parseJsonResponse(r, \"Falha ao carregar histórico\");\n      setHistorico(j.historico || []);\n    } catch (e) {\n      console.error(\"Erro ao carregar histórico:\", e);\n    }\n  }, [agenteUrl, requireAgentReady]);\n\n  async function abrir_repo() {\n    setErro(\"\");\n    if (!requireAgentReady()) return;\n\n    await runWithLoading(\"Lendo repositório...\", async () => {\n      const body = {};\n      if (caminhoLocal) {\n        body.caminhoLocal = caminhoLocal;\n      } else if (repo) {\n        body.repositorioUrl = repo;\n        body.branchBase = branchBase;\n      } else {\n        throw new Error(\"Informe a URL do repositório ou o caminho local\");\n      }\n\n      const r = await fetch(buildUrl(agenteUrl, \"/repo/abrir\"), {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify(body),\n      });\n\n      const j = await parseJsonResponse(r, \"Falha ao abrir repositório\");\n      setArvore(j.arvore || []);\n      setProjetoAtual(j.projeto);\n      setArvoreAtual(j.arvore || []);\n      setHistoricoAtual(j.historico || []);\n      setChatMessages(mapConversasParaMensagens(j.conversas));\n      setHistorico(j.historico || []);\n      setActiveWorkspaceTab(\"editor\");\n      setChatColapsado(false);\n      setAbas([]);\n      setAbaAtiva(null);\n      await carregarMudancasPendentes();\n      \n      // Salvar projeto no chat atual\n      setChatSessions(sessions => sessions.map(s => \n        s.id === activeChatId ? {\n          ...s,\n          projeto: j.projeto,\n          arvore: j.arvore || [],\n          historico: j.historico || []\n        } : s\n      ));\n    });\n  }\n\n  async function abrir_arquivo(p) {\n    if (!requireAgentReady()) return;\n\n    // Verificar se o arquivo já está aberto em uma aba\n    const abaExistente = abas.find(aba => aba.path === p);\n    if (abaExistente) {\n      setAbaAtiva(abaExistente.id);\n      return;\n    }\n\n    try {\n      const r = await fetch(buildUrl(agenteUrl, `/repo/file?path=${encodeURIComponent(p)}`));\n      const t = await r.text();\n\n      const novaAba = {\n        id: `tab-${Date.now()}-${Math.random().toString(16).slice(2)}`,\n        path: p,\n        nome: p.split('/').pop(),\n        conteudo: t,\n        original: t,\n        dirty: false\n      };\n\n      setAbas(prev => [...prev, novaAba]);\n      setAbaAtiva(novaAba.id);\n    } catch (e) {\n      setErro(String(e?.message || e));\n    }\n  }\n\n  function fecharAba(abaId, e) {\n    if (e) {\n      e.stopPropagation();\n    }\n\n    const abaIndex = abas.findIndex(a => a.id === abaId);\n    if (abaIndex === -1) return;\n\n    const aba = abas[abaIndex];\n    if (aba.dirty) {\n      if (!confirm(`O arquivo ${aba.nome} tem alterações não salvas. Deseja fechar mesmo assim?`)) {\n        return;\n      }\n    }\n\n    const novasAbas = abas.filter(a => a.id !== abaId);\n    setAbas(novasAbas);\n\n    if (abaAtiva === abaId) {\n      if (novasAbas.length > 0) {\n        const proximaAba = novasAbas[Math.max(0, abaIndex - 1)];\n        setAbaAtiva(proximaAba.id);\n      } else {\n        setAbaAtiva(null);\n      }\n    }\n  }\n\n  function atualizarConteudoAba(conteudoNovo) {\n    if (!abaAtiva) return;\n\n    setAbas(prev => prev.map(aba => {\n      if (aba.id === abaAtiva) {\n        return {\n          ...aba,\n          conteudo: conteudoNovo,\n          dirty: conteudoNovo !== aba.original\n        };\n      }\n      return aba;\n    }));\n  }\n\n  async function persistirArquivo() {\n    const abaAtual = abas.find(a => a.id === abaAtiva);\n    if (!abaAtual) return;\n    if (!requireAgentReady()) return;\n\n    await runWithLoading(\"Salvando arquivo...\", async () => {\n      const r = await fetch(buildUrl(agenteUrl, \"/repo/save\"), {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({ path: abaAtual.path, conteudo: abaAtual.conteudo }),\n      });\n\n      await parseJsonResponse(r, \"Falha ao salvar arquivo\");\n\n      setAbas(prev => prev.map(aba => {\n        if (aba.id === abaAtiva) {\n          return { ...aba, original: aba.conteudo, dirty: false };\n        }\n        return aba;\n      }));\n\n      setErro(\"\");\n      await carregarMudancasPendentes();\n      await carregarHistorico();\n    });\n  }\n\n  async function commit_push() {\n    if (!requireAgentReady()) return;\n\n    await runWithLoading(\"Realizando commit...\", async () => {\n      const r = await fetch(buildUrl(agenteUrl, \"/repo/commit\"), {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({ mensagem: `feat: atualizações em ${arquivoAtual || \"projeto\"}` }),\n      });\n\n      await parseJsonResponse(r, \"Falha ao realizar commit\");\n      setErro(\"\");\n      await carregarHistorico();\n      alert(\"Commit realizado com sucesso!\");\n    });\n  }\n\n  async function enviar_chat(texto) {\n    const msg = texto.trim();\n    if (!msg) return;\n    if (!requireAgentReady()) {\n      setErro(\"Aguardando conexão com o agente para enviar mensagens.\");\n      return;\n    }\n\n    const userMessage = createMessage(\"user\", msg);\n    const etapasMsg = createMessage(\"agent\", \"\", { pending: true });\n    etapasMsg.isSteps = true;\n    etapasMsg.steps = [];\n\n    setChatMessages((prev) => [...prev, userMessage, etapasMsg]);\n    setEntradaChat(\"\");\n    setLoading(true);\n    setLoadingMessage(\"Processando...\");\n\n    await enviarChatComStreaming(\n      msg,\n      agenteUrl,\n      (etapa) => {\n        setChatMessages((prev) => \n          prev.map((m) => \n            m.id === etapasMsg.id\n              ? { ...m, steps: [...(m.steps || []), etapa] }\n              : m\n          )\n        );\n      },\n      (resultado) => {\n        const resposta = resultado.resposta || \"Sem resposta\";\n        const mudancas = resultado.mudancas || [];\n\n        setChatMessages((prev) => {\n          const filtered = prev.filter(m => m.id !== etapasMsg.id);\n          const respostaMsg = createMessage(\"agent\", resposta);\n          \n          let novasMensagens = [...filtered, respostaMsg];\n          \n          if (mudancas.length > 0) {\n            mudancas.forEach((mudanca) => {\n              const mudancaMsg = createMessage(\"agent\", \"\", { pending: false });\n              mudancaMsg.isMudanca = true;\n              mudancaMsg.mudanca = mudanca;\n              novasMensagens.push(mudancaMsg);\n            });\n          }\n          \n          setChatSessions(sessions => sessions.map(s => \n            s.id === activeChatId ? { ...s, messages: novasMensagens } : s\n          ));\n          \n          return novasMensagens;\n        });\n\n        carregarHistorico();\n        const activeSession = chatSessions.find(s => s.id === activeChatId);\n        if (activeSession && activeSession.messages.filter(m => m.role === 'user').length === 1) {\n          setTimeout(() => gerarTituloAutomatico(activeChatId), 500);\n        }\n\n        setLoading(false);\n        setLoadingMessage(\"\");\n      },\n      (erro) => {\n        setChatMessages((prev) =>\n          prev.map((item) =>\n            item.id === etapasMsg.id\n              ? { ...item, text: `Erro: ${erro}`, pending: false, isSteps: false, steps: [] }\n              : item\n          )\n        );\n        setLoading(false);\n        setLoadingMessage(\"\");\n      }\n    );\n  }\n\n  useEffect(() => {\n    localStorage.setItem('chatSessions', JSON.stringify(chatSessions));\n  }, [chatSessions]);\n\n  useEffect(() => {\n    const activeSession = chatSessions.find(s => s.id === activeChatId);\n    if (activeSession) {\n      setChatMessages(activeSession.messages || []);\n      setProjetoAtual(activeSession.projeto || null);\n      setArvoreAtual(activeSession.arvore || []);\n      setHistoricoAtual(activeSession.historico || []);\n      setArvore(activeSession.arvore || []);\n      setHistorico(activeSession.historico || []);\n    }\n  }, [activeChatId, chatSessions]);\n\n  function criarNovoChat() {\n    const novoId = Math.max(...chatSessions.map(s => s.id), 0) + 1;\n    const novoChat = {\n      id: novoId,\n      name: `Chat ${novoId}`,\n      messages: [],\n      projeto: null,\n      arvore: [],\n      historico: []\n    };\n    setChatSessions(prev => [...prev, novoChat]);\n    setActiveChatId(novoId);\n  }\n\n  function renomearChat(chatId, novoNome) {\n    setChatSessions(prev => prev.map(session =>\n      session.id === chatId\n        ? { ...session, name: novoNome }\n        : session\n    ));\n  }\n\n  function deletarChat(chatId) {\n    if (chatSessions.length === 1) {\n      alert('Você precisa ter pelo menos um chat ativo.');\n      return;\n    }\n    if (confirm('Tem certeza que deseja deletar este chat?')) {\n      setChatSessions(prev => prev.filter(s => s.id !== chatId));\n      if (activeChatId === chatId) {\n        setActiveChatId(chatSessions[0].id);\n      }\n    }\n  }\n\n  async function gerarTituloAutomatico(chatId) {\n    const session = chatSessions.find(s => s.id === chatId);\n    if (!session || !session.messages || session.messages.length === 0) return;\n    if (!requireAgentReady()) return;\n\n    const primeiras3Mensagens = session.messages\n      .filter(m => m.role === 'user')\n      .slice(0, 3)\n      .map(m => m.text)\n      .join(' ');\n\n    if (!primeiras3Mensagens) return;\n\n    try {\n      const r = await fetch(buildUrl(agenteUrl, \"/chat/gerar-titulo\"), {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({ contexto: primeiras3Mensagens }),\n      });\n\n      const j = await parseJsonResponse(r, \"Falha ao gerar título\");\n      if (j.titulo) {\n        renomearChat(chatId, j.titulo);\n      }\n    } catch (e) {\n      console.error(\"Erro ao gerar título automático:\", e);\n    }\n  }\n\n  async function aprovarMudanca(mudancaId) {\n    if (!requireAgentReady()) return;\n\n    await runWithLoading(\"Aplicando mudança...\", async () => {\n      const r = await fetch(buildUrl(agenteUrl, \"/mudancas/aprovar\"), {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({ mudancaId }),\n      });\n\n      await parseJsonResponse(r, \"Falha ao aprovar mudança\");\n      await carregarMudancasPendentes();\n      await carregarHistorico();\n      setErro(\"\");\n      alert(\"mudança aprovada e aplicada!\");\n    });\n  }\n\n  async function rejeitarMudanca(mudancaId) {\n    if (!requireAgentReady()) return;\n\n    await runWithLoading(\"Rejeitando mudança...\", async () => {\n      const r = await fetch(buildUrl(agenteUrl, \"/mudancas/rejeitar\"), {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({ mudancaId }),\n      });\n\n      await parseJsonResponse(r, \"Falha ao rejeitar mudança\");\n      await carregarMudancasPendentes();\n      await carregarHistorico();\n      setErro(\"\");\n    });\n  }\n\n  // Copiar código inteiro do editor\n  async function copiar_codigo() {\n    const abaAtual = abas.find(a => a.id === abaAtiva);\n    const conteudo = abaAtual?.conteudo || \"\";\n\n    try {\n      await navigator.clipboard.writeText(conteudo);\n      setCopiando(true);\n      setTimeout(() => setCopiando(false), 1500);\n    } catch {\n      const ta = document.createElement(\"textarea\");\n      ta.value = conteudo;\n      document.body.appendChild(ta);\n      ta.select();\n      document.execCommand(\"copy\");\n      document.body.removeChild(ta);\n      setCopiando(true);\n      setTimeout(() => setCopiando(false), 1500);\n    }\n  }\n\n  // Sistema de busca (Ctrl+F)\n  function realizarBusca(termo) {\n    setTextoBusca(termo);\n\n    const abaAtual = abas.find(a => a.id === abaAtiva);\n    if (!abaAtual || !termo) {\n      setResultadosBusca([]);\n      setIndiceBuscaAtual(0);\n      return;\n    }\n\n    const conteudo = abaAtual.conteudo;\n    const linhas = conteudo.split('\\n');\n    const resultados = [];\n\n    linhas.forEach((linha, numLinha) => {\n      let index = 0;\n      while ((index = linha.toLowerCase().indexOf(termo.toLowerCase(), index)) !== -1) {\n        resultados.push({\n          linha: numLinha,\n          coluna: index,\n          texto: linha\n        });\n        index += termo.length;\n      }\n    });\n\n    setResultadosBusca(resultados);\n    setIndiceBuscaAtual(0);\n\n    if (resultados.length > 0) {\n      scrollParaBusca(resultados[0]);\n    }\n  }\n\n  function proximaBusca() {\n    if (resultadosBusca.length === 0) return;\n    const novoIndice = (indiceBuscaAtual + 1) % resultadosBusca.length;\n    setIndiceBuscaAtual(novoIndice);\n    scrollParaBusca(resultadosBusca[novoIndice]);\n  }\n\n  function buscaAnterior() {\n    if (resultadosBusca.length === 0) return;\n    const novoIndice = (indiceBuscaAtual - 1 + resultadosBusca.length) % resultadosBusca.length;\n    setIndiceBuscaAtual(novoIndice);\n    scrollParaBusca(resultadosBusca[novoIndice]);\n  }\n\n  function scrollParaBusca(resultado) {\n    if (!textareaRef.current) return;\n\n    const abaAtual = abas.find(a => a.id === abaAtiva);\n    if (!abaAtual) return;\n\n    const linhas = abaAtual.conteudo.split('\\n');\n    let posicao = 0;\n\n    for (let i = 0; i < resultado.linha; i++) {\n      posicao += linhas[i].length + 1;\n    }\n    posicao += resultado.coluna;\n\n    textareaRef.current.focus();\n    textareaRef.current.setSelectionRange(posicao, posicao + textoBusca.length);\n    textareaRef.current.scrollIntoView({ behavior: 'smooth', block: 'center' });\n  }\n\n  // Download de arquivo\n  async function downloadArquivo(filePath) {\n    if (!requireAgentReady()) return;\n    try {\n      const r = await fetch(buildUrl(agenteUrl, `/repo/file?path=${encodeURIComponent(filePath)}`));\n      const conteudoArquivo = await r.text();\n\n      const blob = new Blob([conteudoArquivo], { type: 'text/plain' });\n      const url = window.URL.createObjectURL(blob);\n      const a = document.createElement('a');\n      a.href = url;\n      a.download = filePath.split('/').pop();\n      document.body.appendChild(a);\n      a.click();\n      window.URL.revokeObjectURL(url);\n      document.body.removeChild(a);\n\n      setMenuAberto(null);\n    } catch (e) {\n      setErro(`Erro ao baixar arquivo: ${e?.message || e}`);\n    }\n  }\n\n  // Renomear arquivo (placeholder para implementação futura)\n  async function renomearArquivo(filePath) {\n    // TODO: Implementar modal de renomeação\n    alert(`Função de renomear em desenvolvimento. Arquivo: ${filePath}`);\n    setMenuAberto(null);\n  }\n\n  const arvoreEstruturada = useMemo(() => buildTree(arvore), [arvore]);\n\n  const abaAtual = abas.find(a => a.id === abaAtiva);\n  const conteudo = abaAtual?.conteudo || \"\";\n  const dirty = abaAtual?.dirty || false;\n  const arquivoAtual = abaAtual?.path || null;\n\n\n  const linhasEditor = useMemo(() => {\n    const total = Math.max(1, String(conteudo).split(\"\\n\").length);\n    return Array.from({ length: total }, (_, i) => i + 1).join(\"\\n\");\n  }, [conteudo]);\n\n  function guessLanguage(file) {\n    if (!file) return null;\n    const f = String(file).toLowerCase();\n    if (f.endsWith(\".js\")) return \"javascript\";\n    if (f.endsWith(\".jsx\")) return \"jsx\";\n    if (f.endsWith(\".ts\")) return \"typescript\";\n    if (f.endsWith(\".tsx\")) return \"tsx\";\n    if (f.endsWith(\".json\")) return \"json\";\n    if (f.endsWith(\".css\")) return \"css\";\n    if (f.endsWith(\".scss\") || f.endsWith(\".sass\")) return \"scss\";\n    if (f.endsWith(\".html\") || f.endsWith(\".htm\")) return \"xml\";\n    if (f.endsWith(\".md\")) return \"markdown\";\n    if (f.endsWith(\".yml\") || f.endsWith(\".yaml\")) return \"yaml\";\n    if (f.endsWith(\".py\")) return \"python\";\n    if (f.endsWith(\".rb\")) return \"ruby\";\n    if (f.endsWith(\".go\")) return \"go\";\n    if (f.endsWith(\".rs\")) return \"rust\";\n    if (f.endsWith(\".java\")) return \"java\";\n    if (f.endsWith(\".kt\")) return \"kotlin\";\n    if (f.endsWith(\".php\")) return \"php\";\n    if (f.endsWith(\".swift\")) return \"swift\";\n    if (f.endsWith(\".sql\")) return \"sql\";\n    if (f.includes(\"dockerfile\")) return \"dockerfile\";\n    if (f.endsWith(\"makefile\")) return \"makefile\";\n    return null;\n  }\n\n  const highlightedHtml = useMemo(() => {\n    try {\n      const lang = guessLanguage(abaAtual?.path);\n      if (lang && hljs.getLanguage(lang)) {\n        return hljs.highlight(conteudo, { language: lang, ignoreIllegals: true }).value;\n      }\n      return hljs.highlightAuto(conteudo).value;\n    } catch {\n      const esc = String(conteudo).replace(/[&<>\"']/g, (m) => ({ \"&\": \"&amp;\", \"<\": \"&lt;\", \">\": \"&gt;\", '\"': \"&quot;\", \"'\": \"&#39;\" }[m]));\n      return esc;\n    }\n  }, [conteudo, abaAtual?.path]);\n\n  const onEditorScroll = (e) => {\n    const top = e.currentTarget.scrollTop;\n    if (gutterRef.current) gutterRef.current.style.transform = `translateY(-${top}px)`;\n    if (highlightRef.current) highlightRef.current.style.transform = `translateY(-${top}px)`;\n  };\n\n  useEffect(() => {\n    if (gutterRef.current) gutterRef.current.style.transform = \"translateY(0px)\";\n    if (highlightRef.current) highlightRef.current.style.transform = \"translateY(0px)\";\n  }, [arquivoAtual]);\n\n  function parseUnifiedDiff(text) {\n    if (!text || typeof text !== \"string\") return [];\n    const lines = text.split(/\\r?\\n/);\n    const out = [];\n    let oldNo = 0, newNo = 0;\n    for (const raw of lines) {\n      if (raw.startsWith(\"@@\")) {\n        const m = raw.match(/@@ -([0-9]+),?([0-9]*) \\+([0-9]+),?([0-9]*) @@/);\n        if (m) { oldNo = parseInt(m[1], 10); newNo = parseInt(m[3], 10); }\n        out.push({ type: \"context\", gutter: \"\", code: raw });\n        continue;\n      }\n      if (raw.startsWith(\"+\") && !raw.startsWith(\"+++\")) {\n        out.push({ type: \"add\", gutter: `  ${newNo++}`, code: raw });\n        continue;\n      }\n      if (raw.startsWith(\"-\") && !raw.startsWith(\"---\")) {\n        out.push({ type: \"remove\", gutter: `${oldNo++}  `, code: raw });\n        continue;\n      }\n      if (raw.startsWith(\"diff \") || raw.startsWith(\"index \") || raw.startsWith(\"--- \") || raw.startsWith(\"+++ \")) {\n        out.push({ type: \"context\", gutter: \"\", code: raw });\n        continue;\n      }\n      out.push({ type: \"context\", gutter: `${oldNo} ${newNo}`, code: raw });\n      oldNo++; newNo++;\n    }\n    return out;\n  }\n\n  function parseDiffForSplitView(diffText) {\n    if (!diffText) return { original: [], modified: [], changes: [] };\n\n    const lines = diffText.split(/\\r?\\n/);\n    const original = [];\n    const modified = [];\n    const changes = [];\n\n    let originalLineNum = 1;\n    let modifiedLineNum = 1;\n    let changeIndex = 0;\n\n    for (let i = 0; i < lines.length; i++) {\n      const line = lines[i];\n\n      if (line.startsWith('@@')) {\n        const match = line.match(/@@ -([0-9]+),?([0-9]*) \\+([0-9]+),?([0-9]*) @@/);\n        if (match) {\n          originalLineNum = parseInt(match[1], 10);\n          modifiedLineNum = parseInt(match[3], 10);\n        }\n        continue;\n      }\n\n      if (line.startsWith('---') || line.startsWith('+++') || line.startsWith('diff ') || line.startsWith('index ')) {\n        continue;\n      }\n\n      if (line.startsWith('+')) {\n        modified.push({\n          lineNum: modifiedLineNum++,\n          content: line.substring(1),\n          type: 'added'\n        });\n        original.push({\n          lineNum: null,\n          content: '',\n          type: 'empty'\n        });\n        changes.push(modified.length - 1);\n        changeIndex++;\n      } else if (line.startsWith('-')) {\n        original.push({\n          lineNum: originalLineNum++,\n          content: line.substring(1),\n          type: 'removed'\n        });\n        modified.push({\n          lineNum: null,\n          content: '',\n          type: 'empty'\n        });\n        changes.push(original.length - 1);\n        changeIndex++;\n      } else {\n        original.push({\n          lineNum: originalLineNum++,\n          content: line.startsWith(' ') ? line.substring(1) : line,\n          type: 'context'\n        });\n        modified.push({\n          lineNum: modifiedLineNum++,\n          content: line.startsWith(' ') ? line.substring(1) : line,\n          type: 'context'\n        });\n      }\n    }\n\n    return { original, modified, changes };\n  }\n\n  function abrirDiffViewer(itemHistorico) {\n    const diffData = parseDiffForSplitView(itemHistorico.diff || '');\n    setDiffAtual({\n      arquivo: extractFileFromDescription(itemHistorico.descricao) || 'arquivo',\n      timestamp: itemHistorico.timestamp,\n      tipo: itemHistorico.tipo,\n      ...diffData\n    });\n    setIndiceMudancaAtual(0);\n    setDiffViewerAberto(true);\n  }\n\n  function navegarParaMudanca(direcao) {\n    if (!diffAtual || !diffAtual.changes.length) return;\n\n    const novoIndice = direcao === 'next'\n      ? Math.min(indiceMudancaAtual + 1, diffAtual.changes.length - 1)\n      : Math.max(indiceMudancaAtual - 1, 0);\n\n    setIndiceMudancaAtual(novoIndice);\n\n    const linhaAlvo = diffAtual.changes[novoIndice];\n    const elementos = document.querySelectorAll('.diff-code-line');\n    if (elementos[linhaAlvo]) {\n      elementos[linhaAlvo].scrollIntoView({ behavior: 'smooth', block: 'center' });\n    }\n  }\n\n  const diffPaneLeftRef = useRef(null);\n  const diffPaneRightRef = useRef(null);\n\n  const sincronizarScroll = useCallback((source) => {\n    if (source === 'left' && diffPaneRightRef.current && diffPaneLeftRef.current) {\n      diffPaneRightRef.current.scrollTop = diffPaneLeftRef.current.scrollTop;\n    } else if (source === 'right' && diffPaneLeftRef.current && diffPaneRightRef.current) {\n      diffPaneLeftRef.current.scrollTop = diffPaneRightRef.current.scrollTop;\n    }\n  }, []);\n\n  function renderDiff(text) {\n    const rows = parseUnifiedDiff(text);\n    if (!rows.length) return null;\n    return (\n      <div className=\"diff-block\">\n        {rows.map((r, i) => (\n          <div key={i} className={\"diff-line diff-line--\" + (r.type === \"add\" ? \"add\" : r.type === \"remove\" ? \"remove\" : \"context\")}>\n            <div className=\"diff-gutter\">{r.gutter}</div>\n            <div className=\"diff-code\">{r.code}</div>\n          </div>\n        ))}\n      </div>\n    );\n  }\n\n  useEffect(() => {\n    const inicial = {};\n    const visitar = (nodos) => {\n      nodos.forEach((n) => {\n        if (n.tipo === \"dir\") {\n          inicial[n.fullPath] = true;\n          if (n.children) visitar(n.children);\n        }\n      });\n    };\n    visitar(arvoreEstruturada);\n    setDiretoriosAbertos((prev) => ({ ...inicial, ...prev }));\n  }, [arvoreEstruturada]);\n\n  useEffect(() => {\n    if (chatListRef.current) {\n      chatListRef.current.scrollTop = chatListRef.current.scrollHeight;\n    }\n  }, [chatMessages]);\n\n  useEffect(() => {\n    if (activeWorkspaceTab === \"history\") {\n      carregarHistorico();\n    }\n  }, [activeWorkspaceTab, carregarHistorico]);\n\n  const handleChatResize = useCallback((event) => {\n    if (!chatResizeDataRef.current) return;\n    const delta = chatResizeDataRef.current.startX - event.clientX;\n    const nextWidth = chatResizeDataRef.current.startWidth + delta;\n    const clamped = Math.min(520, Math.max(260, nextWidth));\n    setChatWidth(clamped);\n  }, []);\n\n  const stopChatResize = useCallback(() => {\n    chatResizeDataRef.current = null;\n    setIsResizingChat(false);\n    window.removeEventListener(\"mousemove\", handleChatResize);\n    window.removeEventListener(\"mouseup\", stopChatResize);\n  }, [handleChatResize]);\n\n  const startChatResize = useCallback(\n    (event) => {\n      if (chatColapsado) return;\n      event.preventDefault();\n      chatResizeDataRef.current = { startX: event.clientX, startWidth: chatWidth };\n      setIsResizingChat(true);\n      window.addEventListener(\"mousemove\", handleChatResize);\n      window.addEventListener(\"mouseup\", stopChatResize);\n    },\n    [chatColapsado, chatWidth, handleChatResize, stopChatResize]\n  );\n\n  useEffect(() => {\n    return () => {\n      window.removeEventListener(\"mousemove\", handleChatResize);\n      window.removeEventListener(\"mouseup\", stopChatResize);\n    };\n  }, [handleChatResize, stopChatResize]);\n\n  const renderNode = (node, nivel = 0) => {\n    const isDir = node.tipo === \"dir\";\n    const aberto = diretoriosAbertos[node.fullPath] ?? true;\n    const menuEstaAberto = menuAberto === node.fullPath;\n\n    const toggle = () => {\n      if (isDir) {\n        setDiretoriosAbertos((prev) => ({ ...prev, [node.fullPath]: !aberto }));\n      } else {\n        abrir_arquivo(node.fullPath);\n      }\n    };\n\n    const toggleMenu = (e) => {\n      e.stopPropagation();\n      setMenuAberto(menuEstaAberto ? null : node.fullPath);\n    };\n\n    return (\n      <div key={node.fullPath} className=\"file-tree-branch\">\n        <button\n          type=\"button\"\n          onClick={toggle}\n          className={classNames(\n            \"file-tree-item\",\n            isDir && \"file-tree-item--directory\",\n            isDir && aberto && \"is-open\",\n            arquivoAtual === node.fullPath && \"is-active\"\n          )}\n          style={{ \"--indent-level\": nivel }}\n        >\n          <span className=\"file-tree-expander\">{isDir ? (aberto ? <i className=\"fas fa-chevron-down\"></i> : <i className=\"fas fa-chevron-right\"></i>) : \"\"}</span>\n          <span className=\"file-tree-icon\">{isDir ? <i className={`fas fa-folder${aberto ? \"-open\" : \"\"}`}></i> : <i className=\"fas fa-file-code\"></i>}</span>\n          <span className=\"file-tree-label\">{node.nome}</span>\n\n          {!isDir && (\n            <div className=\"file-tree-actions\">\n              <button\n                type=\"button\"\n                className=\"file-action-button\"\n                onClick={toggleMenu}\n                aria-label=\"Mais opções\"\n              >\n                <i className=\"fas fa-ellipsis-v\"></i>\n              </button>\n\n              {menuEstaAberto && (\n                <div className=\"file-context-menu\" ref={menuRef}>\n                  <button\n                    type=\"button\"\n                    className=\"file-context-item\"\n                    onClick={(e) => {\n                      e.stopPropagation();\n                      renomearArquivo(node.fullPath);\n                    }}\n                  >\n                    <span className=\"file-context-item-icon\"><i className=\"fas fa-edit\"></i></span>\n                    <span>Renomear</span>\n                  </button>\n\n                  <button\n                    type=\"button\"\n                    className=\"file-context-item\"\n                    onClick={(e) => {\n                      e.stopPropagation();\n                      downloadArquivo(node.fullPath);\n                    }}\n                  >\n                    <span className=\"file-context-item-icon\"><i className=\"fas fa-download\"></i></span>\n                    <span>Download</span>\n                  </button>\n                </div>\n              )}\n            </div>\n          )}\n        </button>\n        {isDir && aberto && node.children && node.children.map((filho) => renderNode(filho, nivel + 1))}\n      </div>\n    );\n  };\n\n  // Atalhos de teclado\n  useEffect(() => {\n    const onKey = (e) => {\n      // Ctrl/Cmd+Shift+C para copiar código\n      if ((e.ctrlKey || e.metaKey) && e.shiftKey && e.key.toLowerCase() === \"c\") {\n        e.preventDefault();\n        copiar_codigo();\n      }\n\n      // Ctrl/Cmd+F para busca\n      if ((e.ctrlKey || e.metaKey) && e.key.toLowerCase() === \"f\") {\n        e.preventDefault();\n        setBuscaAberta(prev => !prev);\n      }\n\n      // ESC para fechar busca\n      if (e.key === \"Escape\" && buscaAberta) {\n        setBuscaAberta(false);\n        setTextoBusca(\"\");\n        setResultadosBusca([]);\n      }\n    };\n    window.addEventListener(\"keydown\", onKey);\n    return () => window.removeEventListener(\"keydown\", onKey);\n  }, [buscaAberta]);\n\n  // Fechar menu ao clicar fora\n  useEffect(() => {\n    const handleClickOutside = (e) => {\n      if (menuRef.current && !menuRef.current.contains(e.target)) {\n        setMenuAberto(null);\n      }\n    };\n\n    if (menuAberto) {\n      document.addEventListener(\"mousedown\", handleClickOutside);\n      return () => document.removeEventListener(\"mousedown\", handleClickOutside);\n    }\n  }, [menuAberto]);\n\n  return (\n    <div className=\"app-shell\">\n      <aside className={classNames(\"app-sidebar\", sidebarColapsada && \"is-collapsed\")}>\n        <div className=\"brand-header\">\n          <div className=\"brand-logo\"><i className=\"fas fa-robot\"></i></div>\n          {!sidebarColapsada && (\n            <div className=\"brand-copy\">\n              <span className=\"brand-title\">Agente IA</span>\n              <span className=\"brand-subtitle\">Sistema de Desenvolvimento</span>\n            </div>\n          )}\n          <button\n            type=\"button\"\n            className=\"button button-tertiary sidebar-toggle\"\n            onClick={() => setSidebarColapsada(v => !v)}\n            title={sidebarColapsada ? \"Expandir sidebar\" : \"Minimizar sidebar\"}\n          >\n            <i className={`fas fa-chevron-${sidebarColapsada ? \"right\" : \"left\"}`}></i>\n          </button>\n        </div>\n\n        {!sidebarColapsada && (\n          <>\n            <section className=\"sidebar-section\">\n              <h2 className=\"section-title\">Status da conexão</h2>\n              <div\n                className={classNames(\n                  \"status-card\",\n                  agenteStatus === \"ready\" && \"status-card--ready\",\n                  agenteStatus === \"failed\" && \"status-card--failed\"\n                )}\n              >\n                {agenteStatus === \"ready\"\n                  ? <><i className=\"fas fa-check-circle\"></i> Conectado</>\n                  : agenteStatus === \"resolving\"\n                    ? <><i className=\"fas fa-spinner fa-spin\"></i> Conectando...</>\n                    : <><i className=\"fas fa-times-circle\"></i> Desconectado</>}\n              </div>\n            </section>\n\n            {projetoAtual && (\n              <section className=\"sidebar-section\">\n                <h2 className=\"section-title\">Projeto Atual</h2>\n                <div className=\"project-card\">{projetoAtual.nome}</div>\n                <div className=\"field-grid\" style={{ marginTop: '12px' }}>\n                  <label className=\"field-label\" htmlFor=\"projetoRepoUrl\">URL do Repositório</label>\n                  <input\n                    id=\"projetoRepoUrl\"\n                    className=\"form-input\"\n                    placeholder=\"https://github.com/org/projeto\"\n                    value={repoUrl}\n                    onChange={(e) => setRepoUrl(e.target.value)}\n                  />\n                </div>\n              </section>\n            )}\n\n            <section className=\"sidebar-section\">\n              <h2 className=\"section-title\">Abrir Projeto</h2>\n              <div className=\"field-grid\">\n                <label className=\"field-label\" htmlFor=\"caminhoLocal\">Caminho Local</label>\n                <input\n                  id=\"caminhoLocal\"\n                  className=\"form-input\"\n                  placeholder=\"/caminho/para/projeto\"\n                  value={caminhoLocal}\n                  onChange={(e) => setCaminhoLocal(e.target.value)}\n                />\n\n                <label className=\"field-label\" htmlFor=\"repoUrl\">URL do repositório</label>\n                <input\n                  id=\"repoUrl\"\n                  className=\"form-input\"\n                  placeholder=\"https://github.com/org/projeto\"\n                  value={repo}\n                  onChange={(e) => setRepo(e.target.value)}\n                />\n\n                <label className=\"field-label\" htmlFor=\"branchBase\">Branch Base</label>\n                <input\n                  id=\"branchBase\"\n                  className=\"form-input\"\n                  placeholder=\"main\"\n                  value={branchBase}\n                  onChange={(e) => setBranchBase(e.target.value)}\n                />\n\n                <button className=\"button button-primary\" onClick={abrir_repo} disabled={loading}>\n                  {loading ? \"Processando...\" : \"Abrir Projeto\"}\n                </button>\n              </div>\n            </section>\n\n            <section className=\"sidebar-section\">\n              <div className=\"chat-sessions-header\">\n                <h2 className=\"section-title\">Conversas</h2>\n                <button\n                  type=\"button\"\n                  className=\"button button-tertiary\"\n                  onClick={criarNovoChat}\n                  style={{ padding: '4px 8px', fontSize: '12px' }}\n                >\n                  <i className=\"fas fa-plus\"></i>\n                </button>\n              </div>\n              <div className=\"chat-sessions-list\">\n                {chatSessions.map(session => (\n                  <div\n                    key={session.id}\n                    className={classNames(\"chat-session-item\", session.id === activeChatId && \"is-active\")}\n                    onClick={() => setActiveChatId(session.id)}\n                  >\n                    <span className=\"chat-session-name\">{session.name}</span>\n                    <div className=\"chat-session-actions\">\n                      <button\n                        type=\"button\"\n                        className=\"chat-session-btn\"\n                        onClick={(e) => {\n                          e.stopPropagation();\n                          const novoNome = prompt('Novo nome:', session.name);\n                          if (novoNome) renomearChat(session.id, novoNome);\n                        }}\n                        title=\"Renomear\"\n                      >\n                        <i className=\"fas fa-edit\"></i>\n                      </button>\n                      <button\n                        type=\"button\"\n                        className=\"chat-session-btn\"\n                        onClick={(e) => {\n                          e.stopPropagation();\n                          deletarChat(session.id);\n                        }}\n                        title=\"Deletar\"\n                      >\n                        <i className=\"fas fa-trash\"></i>\n                      </button>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </section>\n\n            {mudancasPendentes.length > 0 && (\n              <section className=\"sidebar-section\">\n                <button\n                  className=\"button button-attention\"\n                  type=\"button\"\n                  onClick={() => setMostrarMudancas(true)}\n                  disabled={loading}\n                >\n                  {mudancasPendentes.length} mudança(s) pendente(s)\n                </button>\n              </section>\n            )}\n          </>\n        )}\n      </aside>\n\n      <main className=\"main-content\">\n        <div className=\"window-chrome\">\n          <div className=\"window-bar\">\n            <div className=\"window-dots\">\n              <span className=\"window-dot window-dot--red\" />\n              <span className=\"window-dot window-dot--yellow\" />\n              <span className=\"window-dot window-dot--green\" />\n            </div>\n            <span className=\"window-title\">Editor do Agente</span>\n            <div className=\"window-actions\">\n              <button\n                type=\"button\"\n                className=\"button button-secondary\"\n                onClick={() => setExplorerColapsado((v) => !v)}\n                disabled={loading}\n              >\n                {explorerColapsado ? \"Mostrar árvore\" : \"Ocultar árvore\"}\n              </button>\n\n              <button\n                type=\"button\"\n                className=\"button button-secondary\"\n                onClick={toggleTema}\n                title={tema === 'dark' ? 'Mudar para tema claro' : 'Mudar para tema escuro'}\n              >\n                <i className={`fas fa-${tema === 'dark' ? 'sun' : 'moon'}`}></i>\n              </button>\n\n              <button\n                type=\"button\"\n                className=\"button button-secondary\"\n                onClick={commit_push}\n                disabled={loading}\n              >\n                Commit & Push\n              </button>\n            </div>\n          </div>\n\n          <div className=\"tab-bar\">\n            <div className=\"tab-group\">\n              <button\n                type=\"button\"\n                className={classNames(\"tab-item\", activeWorkspaceTab === \"editor\" && \"is-active\")}\n                onClick={() => setActiveWorkspaceTab(\"editor\")}\n              >\n                Editor\n              </button>\n              <button\n                type=\"button\"\n                className={classNames(\"tab-item\", activeWorkspaceTab === \"history\" && \"is-active\")}\n                onClick={() => setActiveWorkspaceTab(\"history\")}\n              >\n                Histórico\n              </button>\n            </div>\n          </div>\n\n          {erro && <div className=\"error-banner\">{erro}</div>}\n\n          <div\n            className=\"workspace-panels\"\n            style={{ \"--chat-panel-width\": chatColapsado ? \"40px\" : `${chatWidth}px`, position: \"relative\" }}\n          >\n            <div className=\"editor-stack\">\n              <aside className={classNames(\"file-explorer\", explorerColapsado && \"is-collapsed\")}>\n                <div className=\"file-explorer-header\">\n                  <span>{explorerColapsado ? \"\" : \"Explorador\"}</span>\n                  <button\n                    type=\"button\"\n                    className=\"button button-tertiary\"\n                    onClick={() => setExplorerColapsado((v) => !v)}\n                  >\n                    <i className={`fas fa-chevron-${explorerColapsado ? \"right\" : \"down\"}`}></i>\n                  </button>\n                </div>\n                {!explorerColapsado && (\n                  <div className=\"file-tree\">\n                    {arvoreEstruturada.length ? (\n                      arvoreEstruturada.map((nodo) => renderNode(nodo))\n                    ) : (\n                      <div className=\"empty-state\">Nenhum projeto carregado.</div>\n                    )}\n                  </div>\n                )}\n              </aside>\n\n              <section className=\"editor-content\">\n                {activeWorkspaceTab === \"editor\" ? (\n                  <div className=\"editor-column\">\n                    {/* Barra de abas de arquivos */}\n                    <div className=\"file-tabs-bar\">\n                      {abas.map(aba => (\n                        <div\n                          key={aba.id}\n                          className={classNames(\"file-tab\", abaAtiva === aba.id && \"is-active\")}\n                          onClick={() => setAbaAtiva(aba.id)}\n                        >\n                          <span className=\"file-tab-icon\"><i className=\"fas fa-file-code\"></i></span>\n                          <span className=\"file-tab-name\">{aba.nome}</span>\n                          {aba.dirty && <span className=\"file-tab-dot\">●</span>}\n                          <button\n                            type=\"button\"\n                            className=\"file-tab-close\"\n                            onClick={(e) => fecharAba(aba.id, e)}\n                            aria-label=\"Fechar aba\"\n                          >\n                            <i className=\"fas fa-times\"></i>\n                          </button>\n                        </div>\n                      ))}\n                    </div>\n\n                    {/* Barra de ações do arquivo */}\n                    {abaAtual && (\n                      <div className=\"editor-actions-bar\">\n                        <span className=\"editor-file-path\">{abaAtual.path}</span>\n                        <div className=\"editor-actions\">\n                          <button\n                            type=\"button\"\n                            className=\"button button-tertiary\"\n                            onClick={() => setBuscaAberta(prev => !prev)}\n                            title=\"Buscar no arquivo (Ctrl+F)\"\n                          >\n                            🔍 Buscar\n                          </button>\n                          <button\n                            type=\"button\"\n                            className=\"button button-tertiary\"\n                            onClick={copiar_codigo}\n                            disabled={loading}\n                            title=\"Copiar código (Ctrl+Shift+C)\"\n                          >\n                            {copiando ? <><i className=\"fas fa-check\"></i> Copiado!</> : <><i className=\"fas fa-clipboard\"></i> Copiar</>}\n                          </button>\n                          {dirty && (\n                            <button\n                              type=\"button\"\n                              className=\"button button-primary\"\n                              onClick={persistirArquivo}\n                              disabled={loading}\n                            >\n                              💾 Salvar\n                            </button>\n                          )}\n                        </div>\n                      </div>\n                    )}\n\n                    {/* Barra de busca (Ctrl+F) */}\n                    {buscaAberta && abaAtual && (\n                      <div className=\"search-bar\">\n                        <input\n                          type=\"text\"\n                          className=\"search-input\"\n                          placeholder=\"Buscar no arquivo...\"\n                          value={textoBusca}\n                          onChange={(e) => realizarBusca(e.target.value)}\n                          autoFocus\n                        />\n                        <div className=\"search-controls\">\n                          <span className=\"search-count\">\n                            {resultadosBusca.length > 0\n                              ? `${indiceBuscaAtual + 1} de ${resultadosBusca.length}`\n                              : textoBusca ? \"0 resultados\" : \"\"}\n                          </span>\n                          <button\n                            type=\"button\"\n                            className=\"button button-tertiary\"\n                            onClick={buscaAnterior}\n                            disabled={resultadosBusca.length === 0}\n                            title=\"Anterior\"\n                          >\n                            <i className=\"fas fa-chevron-up\"></i>\n                          </button>\n                          <button\n                            type=\"button\"\n                            className=\"button button-tertiary\"\n                            onClick={proximaBusca}\n                            disabled={resultadosBusca.length === 0}\n                            title=\"Próximo\"\n                          >\n                            <i className=\"fas fa-chevron-down\"></i>\n                          </button>\n                          <button\n                            type=\"button\"\n                            className=\"button button-tertiary\"\n                            onClick={() => {\n                              setBuscaAberta(false);\n                              setTextoBusca(\"\");\n                              setResultadosBusca([]);\n                            }}\n                            title=\"Fechar (ESC)\"\n                          >\n                            <i className=\"fas fa-times\"></i>\n                          </button>\n                        </div>\n                      </div>\n                    )}\n\n                    <div className=\"code-surface\" style={{ position: \"relative\", display: \"flex\" }}>\n                      <pre\n                        ref={gutterRef}\n                        className=\"editor-gutter\"\n                        style={{\n                          margin: 0,\n                          padding: \"22px 8px\",\n                          width: 56,\n                          boxSizing: \"border-box\",\n                          textAlign: \"right\",\n                          color: \"#64748b\",\n                          background: \"rgba(10,16,30,0.9)\",\n                          borderRight: \"1px solid rgba(30,41,59,0.7)\",\n                          fontFamily: \"'Fira Code', 'JetBrains Mono', monospace\",\n                          fontSize: 14,\n                          lineHeight: 1.6,\n                          whiteSpace: \"pre\",\n                          tabSize: 2,\n                          MozTabSize: 2,\n                        }}\n                        onWheel={(e) => {\n                          if (textareaRef.current) {\n                            textareaRef.current.scrollTop += e.deltaY;\n                            e.preventDefault();\n                          }\n                        }}\n                      >\n                        {linhasEditor}\n                      </pre>\n\n                      <div style={{ position: \"relative\", flex: 1 }}>\n                        <pre\n                          ref={highlightRef}\n                          aria-hidden\n                          style={{\n                            position: \"absolute\",\n                            top: 0, left: 0, right: 0,\n                            margin: 0,\n                            pointerEvents: \"none\",\n                            padding: \"22px 28px\",\n                            fontSize: 14,\n                            lineHeight: 1.6,\n                            fontFamily: \"'Fira Code', 'JetBrains Mono', monospace\",\n                            color: \"#e2e8f0\",\n                            whiteSpace: \"pre\",\n                            height: \"auto\",\n                            minHeight: \"100%\",\n                            zIndex: 0,\n                          }}\n                          dangerouslySetInnerHTML={{ __html: highlightedHtml }}\n                        />\n\n                        <textarea\n                          ref={textareaRef}\n                          value={conteudo}\n                          onChange={(e) => atualizarConteudoAba(e.target.value)}\n                          onScroll={onEditorScroll}\n                          className=\"code-textarea\"\n                          style={{\n                            width: \"100%\",\n                            height: \"100%\",\n                            boxSizing: \"border-box\",\n                            background: \"transparent\",\n                            color: \"transparent\",\n                            WebkitTextFillColor: \"transparent\",\n                            caretColor: \"#e2e8f0\",\n                            fontFamily:\n                              \"ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, 'Liberation Mono', 'Courier New', monospace\",\n                            border: 0,\n                            outline: \"none\",\n                            resize: \"none\",\n                            whiteSpace: \"pre\",\n                            position: \"relative\",\n                            zIndex: 1,\n                          }}\n                          wrap=\"off\"\n                          placeholder=\"Selecione um arquivo para começar a edição\"\n                          spellCheck={false}\n                          autoComplete=\"off\"\n                          autoCorrect=\"off\"\n                          autoCapitalize=\"off\"\n                          translate=\"no\"\n                        />\n                      </div>\n\n                      {dirty && abaAtual && (\n                        <div className=\"diff-bar\">\n                          <div className=\"diff-info\">\n                            <span>alterações não salvas em {abaAtual.path}</span>\n                            <button\n                              type=\"button\"\n                              className=\"button button-tertiary\"\n                              onClick={() => {\n                                setAbas(prev => prev.map(aba => {\n                                  if (aba.id === abaAtiva) {\n                                    return { ...aba, conteudo: aba.original, dirty: false };\n                                  }\n                                  return aba;\n                                }));\n                              }}\n                              disabled={loading}\n                            >\n                              Descartar alterações\n                            </button>\n                          </div>\n                        </div>\n                      )}\n                    </div>\n                  </div>\n                ) : (\n                  <div className=\"history-panel\">\n                    {historico.length ? (\n                      historico.map((item) => (\n                        <HistoricoItem\n                          key={`${item.timestamp}-${item.tipo}`}\n                          item={item}\n                          onVisualizarDiff={(diffData) => {\n                            setDiffAtual(diffData);\n                            setIndiceMudancaAtual(0);\n                            setDiffViewerAberto(true);\n                          }}\n                        />\n                      ))\n                    ) : (\n                      <div className=\"empty-state\">Nenhum histórico disponível ainda.</div>\n                    )}\n                  </div>\n                )}\n              </section>\n            </div>\n\n            {!chatColapsado && (\n              <div\n                className={classNames(\"resize-handle\", isResizingChat && \"is-active\")}\n                onMouseDown={startChatResize}\n              />\n            )}\n\n            <aside className={classNames(\"chat-panel\", chatColapsado && \"is-collapsed\")}>\n              <div className=\"chat-header\">\n                <span className=\"chat-title\">\n                  <i className=\"fas fa-comments\"></i> {chatSessions.find(s => s.id === activeChatId)?.name || 'Chat'}\n                </span>\n                <div className=\"chat-actions\">\n                  {mudancasPendentes.length > 0 && (\n                    <button\n                      type=\"button\"\n                      className=\"button button-tertiary\"\n                      onClick={() => setMostrarMudancas(true)}\n                    >\n                      <i className=\"fas fa-file-code\"></i> Revisar ({mudancasPendentes.length})\n                    </button>\n                  )}\n                  <button\n                    type=\"button\"\n                    className=\"button button-tertiary\"\n                    onClick={() => setChatColapsado((v) => !v)}\n                  >\n                    <i className={`fas fa-chevron-${chatColapsado ? \"left\" : \"right\"}`}></i>\n                  </button>\n                </div>\n              </div>\n\n              <div className=\"chat-message-list\" ref={chatListRef}>\n                {chatMessages.length ? (\n                  chatMessages.map((msg) => {\n                    if (msg.isMudanca) {\n                      return (\n                        <div key={msg.id} className=\"chat-message chat-message--agent\">\n                          <MudancaCard\n                            mudanca={msg.mudanca}\n                            onVisualizar={(mudanca) => {\n                              const diffData = criarDiffVisualizer(\n                                mudanca.conteudo_original || '',\n                                mudanca.conteudo_novo || ''\n                              );\n                              setDiffAtual({\n                                arquivo: mudanca.arquivo,\n                                tipo: 'mudanca_pendente',\n                                timestamp: new Date().toISOString(),\n                                ...diffData\n                              });\n                              setIndiceMudancaAtual(0);\n                              setDiffViewerAberto(true);\n                            }}\n                            onAprovar={aprovarMudanca}\n                            onRejeitar={rejeitarMudanca}\n                            loading={loading}\n                          />\n                        </div>\n                      );\n                    }\n\n                    if (msg.isSteps && msg.steps) {\n                      return (\n                        <div key={msg.id} className=\"chat-message chat-message--agent\">\n                          <span className=\"chat-author\">\n                            <i className=\"fas fa-robot\"></i> Agente\n                          </span>\n                          <div className=\"chat-steps\">\n                            {msg.steps.map((step, idx) => (\n                              <div key={idx} className=\"chat-step-message\">\n                                {step}\n                              </div>\n                            ))}\n                            {msg.pending && (\n                              <div className=\"chat-step-message\">\n                                <i className=\"fas fa-spinner fa-spin\"></i> Processando...\n                              </div>\n                            )}\n                          </div>\n                        </div>\n                      );\n                    }\n\n                    const passos = msg.text?.startsWith(\"Passo a passo:\") ? msg.text.split('\\n').slice(1) : null;\n                    const textoSemPassos = passos ? null : msg.text;\n                    \n                    return (\n                      <div\n                        key={msg.id}\n                        className={classNames(\n                          \"chat-message\",\n                          msg.role === \"user\" ? \"chat-message--user\" : \"chat-message--agent\",\n                          msg.pending && \"is-pending\"\n                        )}\n                      >\n                        <span className=\"chat-author\">\n                          <i className={`fas fa-${msg.role === \"user\" ? \"user\" : \"robot\"}`}></i> {msg.role === \"user\" ? \"Você\" : \"Agente\"}\n                        </span>\n                        {textoSemPassos && <p className=\"chat-text\">{textoSemPassos}</p>}\n                        {passos && (\n                          <div className=\"chat-steps\">\n                            <div className=\"chat-steps-title\">\n                              <i className=\"fas fa-list-ol\"></i> Etapas\n                            </div>\n                            {passos.map((passo, idx) => (\n                              <div key={idx} className=\"chat-step\">\n                                <i className=\"fas fa-check-circle chat-step-icon\"></i>\n                                <span className=\"chat-step-text\">{passo.replace(/^\\d+\\.\\s*/, '')}</span>\n                              </div>\n                            ))}\n                          </div>\n                        )}\n                      </div>\n                    );\n                  })\n                ) : (\n                  <div className=\"empty-state\">Converse com o agente para orientar edições e automatizar fluxos.</div>\n                )}\n              </div>\n\n              <div className=\"chat-composer\">\n                <AttachmentMenu \n                  agenteUrl={agenteUrl}\n                  onAnaliseCompleta={(resultado, tipo, nomeArquivo) => {\n                    const icone = tipo === 'pdf' ? <i className=\"fas fa-file-pdf\"></i> : <i className=\"fas fa-image\"></i>;\n                    setChatMessages(prev => [\n                      ...prev,\n                      { id: Date.now(), role: 'agent', text: `Análise de ${tipo} concluída (${nomeArquivo}):\\n\\n${resultado}` }\n                    ]);\n                  }}\n                />\n                <textarea\n                  className=\"chat-textarea\"\n                  placeholder=\"Descreva a alteração desejada...\"\n                  value={entradaChat}\n                  onChange={(e) => setEntradaChat(e.target.value)}\n                  onKeyDown={(e) => {\n                    if (e.key === \"Enter\" && !e.shiftKey) {\n                      e.preventDefault();\n                      enviar_chat(entradaChat);\n                    }\n                  }}\n                  spellCheck={false}\n                  autoComplete=\"off\"\n                  autoCorrect=\"off\"\n                  autoCapitalize=\"off\"\n                />\n                <button\n                  type=\"button\"\n                  className=\"button button-tertiary\"\n                  onClick={() => enviar_chat(entradaChat)}\n                  disabled={loading}\n                  title=\"Enviar\"\n                  style={{ padding: '8px 12px' }}\n                >\n                  <i className=\"fas fa-paper-plane\"></i>\n                </button>\n              </div>\n            </aside>\n          </div>\n        </div>\n        {/* Botão flutuante para alternar o chat (fixo, não some no scroll) */}\n        <button\n          type=\"button\"\n          className={classNames(\"chat-fab\", !chatColapsado && \"is-hidden\")}\n          onClick={() => setChatColapsado((v) => !v)}\n          title={chatColapsado ? \"Abrir chat\" : \"Esconder chat\"}\n          aria-label={chatColapsado ? \"Abrir chat\" : \"Esconder chat\"}\n        >\n          {chatColapsado ? \"Abrir chat\" : \"Esconder chat\"}\n        </button>\n\n      </main>\n\n      {mostrarMudancas && (\n        <div className=\"modal-layer\" onClick={() => setMostrarMudancas(false)}>\n          <div className=\"modal-card\" onClick={(e) => e.stopPropagation()}>\n            <h2 className=\"modal-title\">Mudanças pendentes de aprovação</h2>\n\n            {mudancasPendentes.map((mudanca) => (\n              <article key={mudanca.id} className=\"change-card\">\n                <header className=\"change-header\">\n                  <h3 className=\"change-title\">{mudanca.arquivo}</h3>\n                  <span className=\"change-meta\">{formatTimestamp(mudanca.criado_em)}</span>\n                </header>\n\n                <p className=\"change-description\">{mudanca.descricao}</p>\n                <pre className=\"diff-preview\">{(mudanca.diff || \"\").slice(0, 2000)}</pre>\n\n                <div className=\"modal-actions\">\n                  <button\n                    type=\"button\"\n                    className=\"button button-primary\"\n                    onClick={() => aprovarMudanca(mudanca.id)}\n                    disabled={loading}\n                  >\n                    <i className=\"fas fa-check\"></i> Aprovar e aplicar\n                  </button>\n\n                  <button\n                    type=\"button\"\n                    className=\"button button-secondary\"\n                    onClick={() => rejeitarMudanca(mudanca.id)}\n                    disabled={loading}\n                  >\n                    <i className=\"fas fa-times\"></i> Rejeitar\n                  </button>\n                </div>\n              </article>\n            ))}\n\n            <button\n              type=\"button\"\n              className=\"button button-tertiary\"\n              onClick={() => setMostrarMudancas(false)}\n            >\n              Fechar\n            </button>\n          </div>\n        </div>\n      )}\n\n      {diffViewerAberto && diffAtual && (\n        <div className=\"diff-viewer-modal\" onClick={() => setDiffViewerAberto(false)}>\n          <div className=\"diff-viewer-container\" onClick={(e) => e.stopPropagation()}>\n            <div className=\"diff-viewer-header\">\n              <div className=\"diff-viewer-title\">\n                <div className=\"diff-viewer-file\">{diffAtual.arquivo}</div>\n                <div className=\"diff-viewer-meta\">\n                  {diffAtual.tipo.replace(/_/g, ' ')} • {formatTimestamp(diffAtual.timestamp)}\n                </div>\n              </div>\n              <div className=\"diff-viewer-controls\">\n                <div className=\"diff-stats\">\n                  <span className=\"diff-stat-add\">\n                    +{diffAtual.modified.filter(l => l.type === 'added').length}\n                  </span>\n                  <span className=\"diff-stat-remove\">\n                    -{diffAtual.original.filter(l => l.type === 'removed').length}\n                  </span>\n                </div>\n                <button\n                  type=\"button\"\n                  className=\"button button-tertiary\"\n                  onClick={() => setDiffViewerAberto(false)}\n                >\n                  <i className=\"fas fa-times\"></i> Fechar\n                </button>\n              </div>\n            </div>\n\n            <div className=\"diff-split-view\">\n              <div className=\"diff-pane\">\n                <div className=\"diff-pane-header diff-pane-header--original\">\n                  <span>━</span>\n                  Original\n                </div>\n                <div\n                  className=\"diff-pane-content\"\n                  ref={diffPaneLeftRef}\n                  onScroll={() => sincronizarScroll('left')}\n                >\n                  <div className=\"diff-line-container\">\n                    <div className=\"diff-gutter\">\n                      {diffAtual.original.map((line, idx) => (\n                        <div key={idx} style={{ minHeight: '21px', padding: '2px 0' }}>\n                          {line.lineNum || ''}\n                        </div>\n                      ))}\n                    </div>\n                    <div className=\"diff-code-lines\">\n                      {diffAtual.original.map((line, idx) => (\n                        <div\n                          key={idx}\n                          className={classNames(\n                            'diff-code-line',\n                            line.type === 'removed' && 'diff-line-removed',\n                            line.type === 'empty' && 'diff-line-empty',\n                            line.type === 'context' && 'diff-line-context'\n                          )}\n                        >\n                          <div className=\"diff-code-line-content\">\n                            {line.content}\n                          </div>\n                        </div>\n                      ))}\n                    </div>\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"diff-separator\" />\n\n              <div className=\"diff-pane\">\n                <div className=\"diff-pane-header diff-pane-header--modified\">\n                  <span>+</span>\n                  Modificado\n                </div>\n                <div\n                  className=\"diff-pane-content\"\n                  ref={diffPaneRightRef}\n                  onScroll={() => sincronizarScroll('right')}\n                >\n                  <div className=\"diff-line-container\">\n                    <div className=\"diff-gutter\">\n                      {diffAtual.modified.map((line, idx) => (\n                        <div key={idx} style={{ minHeight: '21px', padding: '2px 0' }}>\n                          {line.lineNum || ''}\n                        </div>\n                      ))}\n                    </div>\n                    <div className=\"diff-code-lines\">\n                      {diffAtual.modified.map((line, idx) => (\n                        <div\n                          key={idx}\n                          className={classNames(\n                            'diff-code-line',\n                            line.type === 'added' && 'diff-line-added',\n                            line.type === 'empty' && 'diff-line-empty',\n                            line.type === 'context' && 'diff-line-context'\n                          )}\n                        >\n                          <div className=\"diff-code-line-content\">\n                            {line.content}\n                          </div>\n                        </div>\n                      ))}\n                    </div>\n                  </div>\n                </div>\n              </div>\n\n              {diffAtual.changes.length > 0 && (\n                <div className=\"diff-navigation\">\n                  <button\n                    type=\"button\"\n                    className=\"diff-nav-button\"\n                    onClick={() => navegarParaMudanca('prev')}\n                    disabled={indiceMudancaAtual === 0}\n                    title=\"Mudança anterior\"\n                  >\n                    ↑\n                  </button>\n                  <div style={{\n                    fontSize: '11px',\n                    color: '#94a3b8',\n                    textAlign: 'center',\n                    padding: '4px',\n                    fontFamily: '\"Fira Code\", monospace'\n                  }}>\n                    {indiceMudancaAtual + 1}/{diffAtual.changes.length}\n                  </div>\n                  <button\n                    type=\"button\"\n                    className=\"diff-nav-button\"\n                    onClick={() => navegarParaMudanca('next')}\n                    disabled={indiceMudancaAtual === diffAtual.changes.length - 1}\n                    title=\"Próxima mudança\"\n                  >\n                    ↓\n                  </button>\n                </div>\n              )}\n            </div>\n\n            <div className=\"diff-viewer-footer\">\n              <button\n                type=\"button\"\n                className=\"button button-secondary\"\n                onClick={() => setDiffViewerAberto(false)}\n              >\n                Fechar visualizador\n              </button>\n            </div>\n          </div>\n        </div>\n      )}\n\n      {loading && (\n        <div className=\"loading-overlay\" role=\"status\" aria-live=\"polite\">\n          <div className=\"loading-indicator\">\n            <span className=\"loading-spinner\" />\n            <p className=\"loading-text\">{loadingMessage || \"Processando...\"}</p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n","size_bytes":75444},"agente/src/ferramentas.js":{"content":"import simpleGit from \"simple-git\"; import { exec } from \"node:child_process\"; import { promisify } from \"node:util\"; import fs from \"node:fs\"; import path from \"node:path\";\nconst sh=promisify(exec);\n\nfunction urlComToken(url, token){\n  try{\n    if(!token) return url;\n    const u=new URL(url);\n    if(u.protocol.startsWith('http')){\n      // usa x-access-token:token@host para GitHub\n      u.username='x-access-token';\n      u.password=token;\n      return u.toString();\n    }\n    return url;\n  }catch{ return url; }\n}\n\nexport async function clonar_repositorio(url,destino,token){\n  await fs.promises.mkdir(destino,{recursive:true});\n  const git=simpleGit();\n  const authUrl = urlComToken(url, token||process.env.GIT_TOKEN||process.env.GITHUB_TOKEN);\n  await git.clone(authUrl,destino);\n}\n\nexport async function criar_branch(destino,nome,base){ const git=simpleGit(destino); if(base){ try{ await git.fetch(); await git.checkout(base); }catch{} } await git.checkoutLocalBranch(nome); }\nexport async function rodar_testes(destino){ const {stdout,stderr}=await sh(\"npm test --silent || true\",{cwd:destino,timeout:120000}); return stdout+stderr; }\nexport async function aplicar_patch(destino,diff){ const arquivo=path.join(destino,\"alteracao.patch\"); await fs.promises.writeFile(arquivo,diff,\"utf-8\"); const {stdout,stderr}=await sh(`git apply --whitespace=fix ${arquivo}`,{cwd:destino,timeout:60000}); return stdout+stderr; }\nexport async function commit_e_push(destino,msg){ const git=simpleGit(destino); await git.add(\"./*\"); await git.commit(msg); try{ await git.push(\"origin\"); }catch{} }\n","size_bytes":1590},"agente/src/llm.js":{"content":"import \"dotenv/config\";\n\nconst OLLAMA_URL = process.env.OLLAMA_URL || \"http://localhost:11434\";\nconst LLM_MODEL = process.env.LLM_MODEL || \"qwen2.5-coder:7b\";\n\nconst PLANO_PADRAO = {\n  objetivos: [\"Entender tarefa\", \"Editar repo\", \"Rodar testes\", \"Preparar PR\"],\n  passos: [\"analisar\", \"planejar\", \"editar\", \"testar\", \"abrir_pr\"],\n  criteriosAceite: [\"build ok\", \"testes ok\", \"mudan\\u00e7as m\\u00ednimas e seguras\"],\n};\n\nasync function ensureModel(model){\n  try{\n    const tagsResp = await fetch(`${OLLAMA_URL}/api/tags`);\n    if(tagsResp.ok){\n      const tags = await tagsResp.json();\n      if((tags?.models||[]).some(m=>m?.name===model)) return true;\n    }\n  }catch{}\n  try{\n    const pull = await fetch(`${OLLAMA_URL}/api/pull`,{\n      method:\"POST\",\n      headers:{\"Content-Type\":\"application/json\"},\n      body: JSON.stringify({ name: model, stream:false })\n    });\n    return pull.ok;\n  }catch{ return false; }\n}\n\nasync function pickModel(){\n  const preferido = LLM_MODEL;\n  if(await ensureModel(preferido)) return preferido;\n  const fallbacks = [\n    \"qwen2.5-coder:7b\",\n    \"llama3.1:8b\",\n    \"mistral:7b\"\n  ];\n  for(const m of fallbacks){\n    if(await ensureModel(m)) return m;\n  }\n  return preferido; // tenta mesmo assim\n}\n\nexport async function pedir_plano(contexto, tarefa) {\n  const prompt = `Voc\\u00ea \\u00e9 um engenheiro de software. Gere um plano conciso:\\n- Objetivos\\n- Passos (1..N)\\n- Crit\\u00e9rios de Aceite\\n\\nContexto: ${contexto}\\nTarefa: ${JSON.stringify(tarefa, null, 2)}\\nResponda em JSON com chaves: objetivos, passos, criteriosAceite.`;\n  try {\n    const model = await pickModel();\n    const r = await fetch(`${OLLAMA_URL}/api/generate`, {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify({ model, prompt, stream: false, options:{ temperature: 0.2 } }),\n    });\n    if (!r.ok) throw new Error(`HTTP ${r.status}`);\n    const data = await r.json();\n    const resp = data?.response || \"\";\n    const ini = resp.indexOf(\"{\");\n    if (ini >= 0) {\n      const j = JSON.parse(resp.slice(ini));\n      if (Array.isArray(j.objetivos) && Array.isArray(j.passos)) return j;\n    }\n    return PLANO_PADRAO;\n  } catch {\n    return PLANO_PADRAO;\n  }\n}\n\nexport async function chat_simples(mensagem, contexto = \"\"){\n  try{\n    const model = await pickModel();\n    const prompt = `${contexto ? `Contexto:\\n${contexto}\\n\\n` : \"\"}Usu\\u00e1rio: ${mensagem}\\nAssistente:`;\n    let r = await fetch(`${OLLAMA_URL}/api/generate`,{\n      method:\"POST\",\n      headers:{\"Content-Type\":\"application/json\"},\n      body:JSON.stringify({model, prompt, stream:false, options:{ temperature: 0.2 }})\n    });\n    if(r.status===404 || r.status===405){\n      // fallback para /api/chat\n      r = await fetch(`${OLLAMA_URL}/api/chat`,{\n        method:\"POST\",\n        headers:{\"Content-Type\":\"application/json\"},\n        body:JSON.stringify({\n          model,\n          messages:[\n            ...(contexto?[{role:\"system\", content: contexto }]:[]),\n            {role:\"user\", content: mensagem}\n          ],\n          stream:false,\n          options:{ temperature: 0.2 }\n        })\n      });\n    }\n    if(!r.ok) throw new Error(`HTTP ${r.status}`);\n    const data = await r.json();\n    return data?.response || data?.message?.content || \"\";\n  }catch(e){\n    return `Ollama indispon\\u00edvel ou modelo n\\u00e3o carregado. Detalhes: ${e?.message||e}`;\n  }\n}\n\nexport async function analisar_imagem_stream(imagemBase64, prompt, onChunk, onComplete) {\n  try {\n    const visionModel = process.env.VISION_MODEL || \"llava:7b\";\n    \n    const response = await fetch(`${OLLAMA_URL}/api/generate`, {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify({\n        model: visionModel,\n        prompt: prompt || \"Descreva esta imagem em detalhes para ajudar um agente de IA a entender o contexto.\",\n        images: [imagemBase64],\n        stream: true,\n        options: { temperature: 0.3 }\n      }),\n    });\n\n    if (!response.ok) throw new Error(`HTTP ${response.status}`);\n\n    const reader = response.body.getReader();\n    const decoder = new TextDecoder();\n    let textoCompleto = \"\";\n\n    while (true) {\n      const { done, value } = await reader.read();\n      if (done) break;\n\n      const chunk = decoder.decode(value, { stream: true });\n      const lines = chunk.split('\\n').filter(line => line.trim());\n\n      for (const line of lines) {\n        try {\n          const data = JSON.parse(line);\n          if (data.response) {\n            textoCompleto += data.response;\n            if (onChunk) onChunk(data.response, textoCompleto);\n          }\n          if (data.done && onComplete) {\n            onComplete(textoCompleto);\n          }\n        } catch (e) {\n          console.warn(\"Erro ao parsear chunk:\", e);\n        }\n      }\n    }\n\n    return textoCompleto;\n  } catch (e) {\n    const erro = `Erro ao analisar imagem: ${e?.message || e}`;\n    if (onComplete) onComplete(erro);\n    return erro;\n  }\n}\n\nexport { OLLAMA_URL, LLM_MODEL };\n\n","size_bytes":5030},"replit.md":{"content":"# Agente IA - Sistema de Desenvolvimento Autônomo\n\n## Visão Geral\n\nSistema completo de agente de IA para desenvolvimento de software com interface interativa, memória persistente e fluxo de aprovação de mudanças. O sistema utiliza Ollama (LLM local) para análise de código e geração inteligente de alterações.\n\n## Arquitetura\n\nO projeto é estruturado em 3 workspaces principais:\n\n### 1. Frontend (`front/`)\n- **Tecnologia**: React + Vite\n- **Porta**: 5000\n- **Função**: Interface do usuário com editor de código, explorador de arquivos, chat interativo e sistema de aprovação de mudanças\n\n### 2. API (`api/`)\n- **Tecnologia**: Express.js\n- **Porta**: 5050\n- **Função**: Proxy para o agente, gerenciamento de tarefas e fila de execução\n\n### 3. Agente (`agente/`)\n- **Tecnologia**: Express.js + SQLite + Ollama\n- **Porta**: 6060\n- **Função**: Serviço principal do agente IA com análise de código, geração de mudanças e integração Git\n\n## Funcionalidades\n\n### 🤖 Agente Inteligente\n- Análise automática de projetos e contexto\n- Compreensão de intenções usando LLM (Ollama local)\n- Geração inteligente de mudanças de código\n- Memória persistente em SQLite (`~/.agente-ia/agente.db`)\n\n### 🖼️ Análise de Imagem com IA\n- Upload e análise de imagens usando modelo de visão (LLaVA)\n- Streaming em tempo real com visualização progressiva\n- Timeline interativa mostrando o progresso da análise\n- Botão de interromper análise a qualquer momento\n- Contextualização automática para o agente entender imagens\n\n### 📊 Sistema de Memória\n- Histórico completo de projetos e mudanças\n- Contexto de arquivos acessados\n- Conversas salvas para continuidade\n- Tabelas: projetos, arquivos_contexto, mudancas_pendentes, historico, conversas\n\n### ✅ Fluxo de Aprovação\n- Mudanças propostas pelo agente aguardam aprovação\n- Visualização de diff antes de aplicar\n- Aprovação/rejeição individual\n- Commit automático após aprovação\n\n### 🔄 Integração Git\n- Clonagem automática de repositórios\n- Criação de branches automáticas\n- Commits e push automáticos\n- Suporte a tokens de autenticação\n\n## Configuração no Replit\n\nO projeto está configurado para funcionar perfeitamente no Replit:\n\n1. **Workflow**: Executa todos os 3 serviços simultaneamente usando concurrently\n2. **Porta Frontend**: 5000 (configurada para aceitar proxy do Replit)\n3. **Portas Backend**: API (5050) e Agente (6060) em localhost\n4. **Deployment**: Configurado para VM com build do frontend\n\n## Como Usar\n\n### 1. Abrir um Projeto\n\n**Opção A - Projeto Local:**\n- Informe o caminho completo no campo \"Caminho Local\"\n- Exemplo: `/home/runner/workspace/meu-projeto`\n\n**Opção B - Clonar Repositório:**\n- Informe a URL do repositório\n- Defina a branch base (padrão: main)\n- O agente clonará automaticamente para `~/Downloads/agente/`\n\n### 2. Conversar com o Agente\n\nDigite solicitações no chat, como:\n- \"Alterar o título da página inicial\"\n- \"Adicionar um botão de logout no header\"\n- \"Criar um componente de loading\"\n- \"Refatorar a função de validação\"\n\n### 3. Aprovar Mudanças\n\nQuando o agente propor mudanças:\n1. Clique em \"X Mudança(s) Pendente(s)\"\n2. Revise o diff de cada mudança\n3. Aprove ou rejeite individualmente\n4. Mudanças aprovadas são aplicadas automaticamente\n\n### 4. Analisar Imagens (Novo!)\n\nPara adicionar contexto visual ao agente:\n1. Clique em \"📎 Selecionar Imagem\"\n2. Escolha uma imagem (screenshot, diagrama, mockup)\n3. Clique em \"🚀 Analisar Imagem\"\n4. Veja a análise em tempo real com streaming\n5. Use \"⏸️ Interromper\" se quiser cancelar\n6. O resultado será automaticamente contextualizado no chat\n\n### 5. Fazer Commit\n\nApós aprovar e testar:\n- Clique em \"Commit & Push\"\n- O agente fará commit e push automático\n\n## Requisitos Importantes\n\n### ⚠️ Ollama (LLM Local)\n\nO sistema requer **Ollama** rodando localmente em `http://localhost:11434`:\n\n```bash\n# Modelos de código (obrigatório)\nollama pull qwen2.5-coder:7b\n# ou\nollama pull codellama:7b\n\n# Modelo de visão para análise de imagem (opcional)\nollama pull llava:7b\n```\n\n### Variáveis de Ambiente\n\n**agente/.env:**\n```env\nAGENTE_PORTA=6060\nOLLAMA_URL=http://localhost:11434\nLLM_MODEL=qwen2.5-coder:7b\nVISION_MODEL=llava:7b\n```\n\n**api/.env (opcional):**\n```env\nAPI_PORTA=5050\nAGENTE_PORTA=6060\n```\n\n**front/.env:**\n```env\nVITE_API_URL=/api\nVITE_AGENT_URL=/agente\n```\n\n## Estrutura de Diretórios\n\n```\nagente-ia-js/\n├── agente/           # Serviço do agente IA\n│   └── src/\n│       ├── index.js       # API e rotas principais\n│       ├── database.js    # Sistema de memória SQLite\n│       ├── analisador.js  # Análise inteligente de mudanças\n│       ├── llm.js         # Integração com Ollama\n│       ├── ferramentas.js # Utilitários Git\n│       └── memoria.js     # Sistema legado de memória\n│\n├── api/              # API de tarefas\n│   └── src/\n│       ├── index.js       # Proxy e gerenciamento\n│       └── fila.js        # Fila de tarefas\n│\n├── front/            # Interface React\n│   └── src/\n│       ├── app.jsx        # Componente principal\n│       └── main.jsx       # Entry point\n│\n└── package.json      # Configuração workspaces\n```\n\n## Limitações e Notas\n\n1. **Ollama Local**: O sistema usa apenas Ollama local, sem APIs cloud\n2. **Contexto LLM**: Limitado pelo tamanho de contexto do modelo escolhido\n3. **Projetos Grandes**: Análise pode ser lenta em projetos muito grandes\n4. **Segurança**: Tokens Git mantidos em memória, não salvos\n5. **Banco de Dados**: SQLite local, não compartilhado\n\n## Troubleshooting\n\n### Porta em Uso\nAs portas são detectadas automaticamente. Se houver conflito, o sistema tenta as próximas 50 portas.\n\n### Banco de Dados Corrompido\n```bash\nrm ~/.agente-ia/agente.db\n```\n\n### Mudanças Não Detectadas\n- Verifique se o projeto foi aberto corretamente\n- Certifique-se de que o agente está conectado\n- Reabra o projeto se necessário\n\n## Funcionalidades Recentes\n\n### ✅ Repaginada Completa de Design (Implementado - 10/10/2025)\n- **Sistema de Tema Dark/Light**: Toggle no header para alternar entre temas\n  - Salvo automaticamente no localStorage\n  - Paleta de cores profissional em ambos os temas\n- **Nova Paleta de Cores**: Roxo/Violeta profissional\n  - Substituiu o esquema azul sobre azul anterior\n  - Cores harmoniosas e profissionais\n  - Variáveis CSS para fácil customização\n- **Design Arredondado**: Border-radius de 10px-16px\n  - Todos botões, cards, inputs e elementos arredondados\n  - Visual moderno e suave\n- **Visual Clean**: Sombras suaves, menos brilho\n  - Efeitos de hover melhorados\n  - Transições suaves\n  - Profissionalismo e elegância\n\n### ✅ Nova UI de Conversas na Sidebar (Implementado - 10/10/2025)\n- Lista de conversas/chats movida para a sidebar esquerda (abaixo de \"Abrir Projeto\")\n- Botão de minimizar/expandir a sidebar esquerda (ícone de seta)\n- Geração automática de títulos para conversas usando IA\n  - Analisa o contexto das primeiras mensagens\n  - Cria títulos curtos e descritivos (máximo 4 palavras)\n  - Atualiza automaticamente após a primeira mensagem do usuário\n- Interface mais organizada e intuitiva, similar ao ChatGPT\n\n### ✅ Análise de Imagem com Streaming (Implementado!)\n- Upload e análise de imagens com LLaVA\n- Visualização progressiva tipo \"thinking\"\n- Timeline interativa com timestamps\n- Botão de interromper análise\n- Integração automática com chat\n\n## Próximas Melhorias Planejadas\n\nCom base nas instruções recebidas, o sistema pode ser aprimorado para ser mais autônomo:\n\n- [ ] Sistema de planejamento (quebrar objetivos em passos)\n- [ ] Executor de ações com sandbox\n- [ ] Validador/Verificador automático (testes, lint)\n- [ ] Guardrails de segurança\n- [ ] Observabilidade avançada (traces, snapshots)\n- [ ] Loop percepção-ação completo\n- [ ] Ferramentas adicionais (navegador, shell, APIs)\n\n## Tecnologias Utilizadas\n\n- **Frontend**: React 18, Vite 5, Highlight.js\n- **Backend**: Node.js 18+, Express 4\n- **Database**: better-sqlite3\n- **LLM**: Ollama (local)\n- **Git**: simple-git\n- **Dev Tools**: nodemon, concurrently\n\n## Segurança\n\n- Nenhuma informação enviada para servidores externos\n- Apenas Ollama local é usado\n- Tokens Git não são persistidos\n- Banco de dados local (não compartilhado)\n","size_bytes":8451},"VISION-GUIDE.md":{"content":"# 🖼️ Guia de Análise de Imagem com IA\n\n## O que é?\n\nSistema de análise de imagem integrado ao agente, usando **Ollama + LLaVA** (100% local e gratuito). A IA \"vê\" a imagem e contextualiza para o agente entender visualmente o que você precisa.\n\n## Como Funciona\n\n### 1. **Upload de Imagem**\n- Clique em \"📎 Selecionar Imagem\"\n- Escolha qualquer imagem:\n  - Screenshots de interfaces\n  - Mockups de design\n  - Diagramas de arquitetura\n  - Prints de código\n  - Wireframes\n  - Fotos de quadros brancos\n\n### 2. **Análise com Streaming**\n- Clique em \"🚀 Analisar Imagem\"\n- Veja a análise acontecendo em **tempo real**:\n  - 🔍 \"Analisando imagem...\"\n  - 💭 Texto aparecendo progressivamente (como eu penso)\n  - ⏱️ Timeline com timestamps\n  - ✅ \"Análise completa!\"\n\n### 3. **Controles**\n- **⏸️ Interromper**: Cancela análise a qualquer momento\n- **🗑️ Limpar**: Remove imagem e histórico\n\n### 4. **Integração Automática**\n- Resultado vai direto pro chat\n- Agente usa contexto da imagem\n- Pode fazer mudanças baseado no visual\n\n## Exemplos de Uso\n\n### 📱 Screenshot de Interface\n```\nVocê envia: [Screenshot de uma tela com botão quebrado]\nIA analisa: \"Vejo uma interface com botão azul desalinhado no canto superior direito...\"\nVocê pede: \"Corrige esse botão que a IA viu\"\n```\n\n### 🎨 Mockup de Design  \n```\nVocê envia: [Mockup do Figma]\nIA analisa: \"Design mostra header com logo à esquerda, menu centralizado...\"\nVocê pede: \"Implementa esse layout que a IA descreveu\"\n```\n\n### 📊 Diagrama de Arquitetura\n```\nVocê envia: [Diagrama de fluxo]\nIA analisa: \"Diagrama mostra banco de dados conectado à API REST...\"\nVocê pede: \"Cria essa arquitetura baseado no diagrama\"\n```\n\n## Tecnologia\n\n### Backend (100% Local)\n- **Ollama** rodando em `localhost:11434`\n- **Modelo LLaVA 7B** para visão\n- **Streaming SSE** (Server-Sent Events)\n- **Cancelamento** via close connection\n\n### Frontend\n- **Upload de imagem** (base64)\n- **Timeline progressiva** com animações\n- **Visualização tipo \"thinking\"** (como assistentes IA)\n- **Integração automática** com chat\n\n## Instalação do Modelo\n\n```bash\n# Baixar modelo de visão (primeira vez)\nollama pull llava:7b\n\n# Verificar se está disponível\nollama list | grep llava\n```\n\n## Configuração\n\n**agente/.env**:\n```env\nVISION_MODEL=llava:7b\nOLLAMA_URL=http://localhost:11434\n```\n\n## Características Técnicas\n\n### ✨ Streaming Visual\n- Texto aparece progressivamente\n- Cursor piscante durante análise\n- Animações de fade-in\n- Scroll automático\n\n### 🎯 Timeline Interativa\n- Timestamp de cada evento\n- Status visual com cores:\n  - 🔵 Azul = processando\n  - 🟢 Verde = sucesso\n  - 🔴 Vermelho = erro\n- Histórico completo navegável\n\n### ⚡ Performance\n- Análise local (sem latência de API)\n- Cancelamento instantâneo\n- Memória persistente no SQLite\n- Hot reload no frontend\n\n## Limitações\n\n- **Modelo local**: Depende de Ollama instalado\n- **Tamanho**: Imagens muito grandes podem demorar\n- **Qualidade**: LLaVA 7B é bom mas não perfeito\n- **Idioma**: Respostas podem vir em inglês (depende do modelo)\n\n## Dicas\n\n1. **Imagens claras**: Use screenshots nítidos\n2. **Contexto**: Adicione descrição no prompt se quiser\n3. **Interrompa**: Se demorar demais, cancele e tente de novo\n4. **Combine**: Use análise + chat para refinar\n\n## Próximos Passos\n\n- [ ] Suporte a múltiplas imagens\n- [ ] Comparação lado a lado\n- [ ] Extração de texto (OCR)\n- [ ] Geração de código direto da imagem\n- [ ] Templates de prompts por tipo de imagem\n\n---\n\n**100% Local | 100% Grátis | 100% Open Source** 🚀\n","size_bytes":3615},"front/src/AttachmentMenu.jsx":{"content":"import React, { useState, useRef } from 'react';\n\nexport function AttachmentMenu({ agenteUrl, onAnaliseCompleta }) {\n  const [menuAberto, setMenuAberto] = useState(false);\n  const [analisando, setAnalisando] = useState(false);\n  const [progresso, setProgresso] = useState(null);\n  const [tipoArquivo, setTipoArquivo] = useState(null);\n  const imagemInputRef = useRef(null);\n  const pdfInputRef = useRef(null);\n\n  const handleAnexar = (tipo) => {\n    setMenuAberto(false);\n    if (tipo === 'imagem') {\n      imagemInputRef.current?.click();\n    } else if (tipo === 'pdf') {\n      pdfInputRef.current?.click();\n    }\n  };\n\n  const interromperAnalise = () => {\n    setAnalisando(false);\n    setProgresso(null);\n  };\n\n  const analisarArquivo = async (file, tipo) => {\n    if (!file || !agenteUrl) return;\n\n    setAnalisando(true);\n    setTipoArquivo(tipo);\n    setProgresso({ tipo: 'inicio', texto: `🔍 Analisando ${tipo}...`, timestamp: Date.now() });\n\n    const reader = new FileReader();\n    reader.onload = async (event) => {\n      try {\n        const base64 = event.target.result;\n        \n        const response = await fetch(`${agenteUrl}/vision/analisar`, {\n          method: 'POST',\n          headers: { 'Content-Type': 'application/json' },\n          body: JSON.stringify({\n            imagem: base64,\n            prompt: tipo === 'pdf' \n              ? 'Analise este documento PDF. Extraia e descreva todo o conteúdo, incluindo texto, estrutura e elementos importantes.'\n              : 'Analise esta imagem em detalhes. Descreva o que você vê e contextualize para ajudar um agente de IA.'\n          })\n        });\n\n        const reader = response.body.getReader();\n        const decoder = new TextDecoder();\n        let textoCompleto = '';\n\n        while (true) {\n          const { done, value } = await reader.read();\n          if (done) break;\n\n          const chunk = decoder.decode(value, { stream: true });\n          const lines = chunk.split('\\n').filter(line => line.trim());\n\n          for (const line of lines) {\n            if (line.startsWith('data: ')) {\n              try {\n                const data = JSON.parse(line.slice(6));\n                \n                if (data.tipo === 'chunk') {\n                  textoCompleto = data.textoCompleto || '';\n                  setProgresso({ tipo: 'streaming', texto: textoCompleto, timestamp: Date.now() });\n                } else if (data.tipo === 'completo') {\n                  setProgresso({ tipo: 'sucesso', texto: data.resultado, timestamp: Date.now() });\n                  if (onAnaliseCompleta) {\n                    onAnaliseCompleta(data.resultado, tipo, file.name);\n                  }\n                  setTimeout(() => {\n                    setAnalisando(false);\n                    setProgresso(null);\n                  }, 2000);\n                }\n              } catch (e) {\n                console.warn('Erro ao parsear SSE:', e);\n              }\n            }\n          }\n        }\n      } catch (e) {\n        setProgresso({ tipo: 'erro', texto: `❌ Erro: ${e.message}`, timestamp: Date.now() });\n        setTimeout(() => {\n          setAnalisando(false);\n          setProgresso(null);\n        }, 3000);\n      }\n    };\n\n    reader.readAsDataURL(file);\n  };\n\n  return (\n    <div style={{ position: 'relative', display: 'flex', alignItems: 'center' }}>\n      {/* Botão de anexar */}\n      <button\n        type=\"button\"\n        onClick={() => setMenuAberto(!menuAberto)}\n        disabled={analisando}\n        style={{\n          background: 'none',\n          border: 'none',\n          cursor: analisando ? 'not-allowed' : 'pointer',\n          fontSize: '18px',\n          padding: '8px',\n          opacity: analisando ? 0.4 : 0.7\n        }}\n        title=\"Anexar\"\n      >\n        📎\n      </button>\n\n      {/* Menu dropdown */}\n      {menuAberto && (\n        <>\n          <div \n            style={{\n              position: 'fixed',\n              inset: 0,\n              zIndex: 999\n            }}\n            onClick={() => setMenuAberto(false)}\n          />\n          <div\n            style={{\n              position: 'absolute',\n              bottom: '100%',\n              left: 0,\n              marginBottom: '4px',\n              background: '#1a1d29',\n              border: '1px solid #2e3338',\n              borderRadius: '4px',\n              padding: '4px',\n              zIndex: 1000,\n              minWidth: '140px'\n            }}\n          >\n            <button\n              onClick={() => handleAnexar('imagem')}\n              style={{\n                width: '100%',\n                padding: '8px 10px',\n                background: 'none',\n                border: 'none',\n                color: '#dcddde',\n                cursor: 'pointer',\n                textAlign: 'left',\n                fontSize: '13px',\n                display: 'flex',\n                alignItems: 'center',\n                gap: '8px'\n              }}\n            >\n              <span>🖼️</span>\n              <span>Imagem</span>\n            </button>\n            \n            <button\n              onClick={() => handleAnexar('pdf')}\n              style={{\n                width: '100%',\n                padding: '8px 10px',\n                background: 'none',\n                border: 'none',\n                color: '#dcddde',\n                cursor: 'pointer',\n                textAlign: 'left',\n                fontSize: '13px',\n                display: 'flex',\n                alignItems: 'center',\n                gap: '8px'\n              }}\n            >\n              <span>📄</span>\n              <span>PDF</span>\n            </button>\n          </div>\n        </>\n      )}\n\n      {/* Inputs ocultos */}\n      <input\n        ref={imagemInputRef}\n        type=\"file\"\n        accept=\"image/*\"\n        onChange={(e) => {\n          const file = e.target.files?.[0];\n          if (file) analisarArquivo(file, 'imagem');\n        }}\n        style={{ display: 'none' }}\n      />\n      <input\n        ref={pdfInputRef}\n        type=\"file\"\n        accept=\"application/pdf\"\n        onChange={(e) => {\n          const file = e.target.files?.[0];\n          if (file) analisarArquivo(file, 'pdf');\n        }}\n        style={{ display: 'none' }}\n      />\n\n      {/* Indicador de progresso */}\n      {analisando && progresso && (\n        <div style={{\n          position: 'absolute',\n          bottom: '100%',\n          left: '40px',\n          marginBottom: '4px',\n          background: '#1a1d29',\n          border: '1px solid #2e3338',\n          borderRadius: '4px',\n          padding: '8px',\n          zIndex: 1000,\n          minWidth: '250px',\n          maxWidth: '350px'\n        }}>\n          <div style={{ fontSize: '11px', color: '#8b9dc3', marginBottom: '4px', display: 'flex', justifyContent: 'space-between' }}>\n            <span>{progresso.tipo === 'streaming' ? 'Analisando...' : progresso.tipo === 'sucesso' ? 'Completo' : 'Erro'}</span>\n            <button onClick={interromperAnalise} style={{ background: 'none', border: 'none', color: '#ed4245', cursor: 'pointer', fontSize: '11px', padding: 0 }}>\n              Parar\n            </button>\n          </div>\n          <div style={{ fontSize: '12px', color: '#dcddde', maxHeight: '80px', overflowY: 'auto' }}>\n            {progresso.texto?.slice(0, 200)}...\n          </div>\n        </div>\n      )}\n\n      <style>{`\n        @keyframes blink {\n          0%, 50% { opacity: 1; }\n          51%, 100% { opacity: 0; }\n        }\n      `}</style>\n    </div>\n  );\n}\n","size_bytes":7491},"front/src/chat-utils.js":{"content":"export async function enviarChatComStreaming(\n  mensagem,\n  agenteUrl,\n  onEtapa,\n  onCompleto,\n  onErro\n) {\n  try {\n    const response = await fetch(`${agenteUrl}/chat/stream`, {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({ mensagem }),\n    });\n\n    if (!response.ok) {\n      throw new Error('Falha ao conectar com o servidor');\n    }\n\n    const reader = response.body.getReader();\n    const decoder = new TextDecoder();\n    let buffer = '';\n\n    while (true) {\n      const { done, value } = await reader.read();\n      if (done) break;\n\n      buffer += decoder.decode(value, { stream: true });\n      const lines = buffer.split('\\n');\n      buffer = lines.pop() || '';\n\n      for (const line of lines) {\n        if (line.startsWith('data: ')) {\n          try {\n            const data = JSON.parse(line.slice(6));\n            \n            if (data.tipo === 'etapa') {\n              onEtapa(data.conteudo);\n            } else if (data.tipo === 'completo') {\n              onCompleto(data);\n            } else if (data.tipo === 'erro') {\n              onErro(data.mensagem);\n            }\n          } catch (e) {\n            console.error('Erro ao parsear evento SSE:', e);\n          }\n        }\n      }\n    }\n  } catch (error) {\n    onErro(error.message || 'Erro desconhecido');\n  }\n}\n\nexport function criarDiffVisualizer(originalText, modifiedText) {\n  const originalLines = originalText.split('\\n');\n  const modifiedLines = modifiedText.split('\\n');\n  \n  const original = [];\n  const modified = [];\n  const changes = [];\n  \n  const maxLines = Math.max(originalLines.length, modifiedLines.length);\n  \n  for (let i = 0; i < maxLines; i++) {\n    const origLine = originalLines[i];\n    const modLine = modifiedLines[i];\n    \n    if (origLine === undefined && modLine !== undefined) {\n      // Linha adicionada\n      original.push({ lineNum: '', content: '', type: 'empty' });\n      modified.push({ lineNum: i + 1, content: modLine, type: 'added' });\n      changes.push(i);\n    } else if (origLine !== undefined && modLine === undefined) {\n      // Linha removida\n      original.push({ lineNum: i + 1, content: origLine, type: 'removed' });\n      modified.push({ lineNum: '', content: '', type: 'empty' });\n      changes.push(i);\n    } else if (origLine !== modLine) {\n      // Linha modificada\n      original.push({ lineNum: i + 1, content: origLine, type: 'removed' });\n      modified.push({ lineNum: i + 1, content: modLine, type: 'added' });\n      changes.push(i);\n    } else {\n      // Linha sem alteração\n      original.push({ lineNum: i + 1, content: origLine, type: 'context' });\n      modified.push({ lineNum: i + 1, content: modLine, type: 'context' });\n    }\n  }\n  \n  return { original, modified, changes };\n}\n","size_bytes":2779},"front/src/MudancaCard.jsx":{"content":"import React from 'react';\n\nexport function MudancaCard({ mudanca, onVisualizar, onAprovar, onRejeitar, loading }) {\n  const { arquivo, descricao, analise } = mudanca;\n\n  return (\n    <div className=\"mudanca-card-chat\">\n      <div className=\"mudanca-header-chat\">\n        <div className=\"mudanca-icon\">📝</div>\n        <div className=\"mudanca-info\">\n          <div className=\"mudanca-arquivo\">{arquivo}</div>\n          <div className=\"mudanca-descricao\">{descricao}</div>\n        </div>\n      </div>\n\n      {analise && (\n        <div className=\"mudanca-stats\">\n          <span className=\"stat-add\">+{analise.linhas_adicionadas || 0}</span>\n          <span className=\"stat-remove\">-{analise.linhas_removidas || 0}</span>\n          <span className=\"stat-modify\">~{analise.linhas_modificadas || 0}</span>\n        </div>\n      )}\n\n      <div className=\"mudanca-actions\">\n        <button\n          type=\"button\"\n          className=\"button button-tertiary button-sm\"\n          onClick={() => onVisualizar(mudanca)}\n        >\n          <i className=\"fas fa-code\"></i> Ver Código\n        </button>\n        <button\n          type=\"button\"\n          className=\"button button-primary button-sm\"\n          onClick={() => onAprovar(mudanca.id)}\n          disabled={loading}\n        >\n          <i className=\"fas fa-check\"></i> Aprovar\n        </button>\n        <button\n          type=\"button\"\n          className=\"button button-secondary button-sm\"\n          onClick={() => onRejeitar(mudanca.id)}\n          disabled={loading}\n        >\n          <i className=\"fas fa-times\"></i> Rejeitar\n        </button>\n      </div>\n    </div>\n  );\n}\n","size_bytes":1629},"agente/src/chat-stream.js":{"content":"import { gerarMudancaInteligente, gerarDiff, analisarDiferencas } from \"./analisador.js\";\nimport { criarMudancaPendente, salvarConversa, registrarHistorico } from \"./database.js\";\nimport { chat_simples } from \"./llm.js\";\nimport path from \"node:path\";\nimport fs from \"node:fs\";\n\nexport async function processarChatComStreaming(mensagem, estado, arvore, res) {\n  res.setHeader('Content-Type', 'text/event-stream');\n  res.setHeader('Cache-Control', 'no-cache');\n  res.setHeader('Connection', 'keep-alive');\n  res.setHeader('Access-Control-Allow-Origin', '*');\n\n  let abortado = false;\n  const enviarEtapa = (etapa) => {\n    if (!abortado) {\n      res.write(`data: ${JSON.stringify({ tipo: 'etapa', conteudo: etapa })}\\n\\n`);\n    }\n  };\n\n  try {\n    enviarEtapa('🔍 Analisando solicitação...');\n    \n    enviarEtapa(`📁 Carregados ${arvore.filter(a => a.tipo === 'file').length} arquivos do projeto`);\n    \n    const resultado = await gerarMudancaInteligente(mensagem, estado.projetoId, estado.pasta, arvore);\n    \n    if (resultado.analise && resultado.analise.passos) {\n      for (const passo of resultado.analise.passos) {\n        enviarEtapa(`✓ ${passo}`);\n      }\n    }\n\n    if (resultado.mudancas && resultado.mudancas.length > 0) {\n      enviarEtapa(`🔧 Gerando ${resultado.mudancas.length} alteração(ões)...`);\n      \n      const mudancasComId = [];\n      for (const mudanca of resultado.mudancas) {\n        const arquivoPath = path.join(estado.pasta, mudanca.arquivo);\n        let original = \"\";\n\n        try {\n          original = await fs.promises.readFile(arquivoPath, \"utf-8\");\n        } catch (e) {\n          original = \"\";\n        }\n\n        const diff = gerarDiff(original, mudanca.conteudo_novo, mudanca.arquivo);\n        const analise = await analisarDiferencas(original, mudanca.conteudo_novo);\n\n        const mudancaId = criarMudancaPendente(\n          estado.projetoId,\n          mudanca.arquivo,\n          original,\n          mudanca.conteudo_novo,\n          diff,\n          mudanca.descricao || \"Alteração gerada pelo agente\"\n        );\n\n        mudancasComId.push({\n          id: mudancaId,\n          arquivo: mudanca.arquivo,\n          descricao: mudanca.descricao,\n          diff: diff.slice(0, 5000),\n          analise: analise,\n          conteudo_original: original,\n          conteudo_novo: mudanca.conteudo_novo\n        });\n\n        enviarEtapa(`✏️ Preparada alteração em ${mudanca.arquivo}`);\n      }\n\n      const resposta = `Analisei sua solicitação e preparei ${resultado.mudancas.length} alteração(ões). Revise as mudanças abaixo:`;\n\n      salvarConversa(estado.projetoId, mensagem, resposta, JSON.stringify(resultado.analise));\n      registrarHistorico(estado.projetoId, \"mudancas_propostas\", `${resultado.mudancas.length} alterações propostas`);\n\n      enviarEtapa('✅ Análise concluída!');\n\n      res.write(`data: ${JSON.stringify({\n        tipo: 'completo',\n        resposta,\n        mudancas: mudancasComId,\n        analise: resultado.analise,\n        mensagem_commit: resultado.mensagem_commit\n      })}\\n\\n`);\n      res.end();\n    } else {\n      enviarEtapa('💬 Processando resposta...');\n      const resposta = await chat_simples(mensagem, \"Repositório local aberto\");\n      salvarConversa(estado.projetoId, mensagem, resposta);\n      \n      res.write(`data: ${JSON.stringify({\n        tipo: 'completo',\n        resposta,\n        mudancas: []\n      })}\\n\\n`);\n      res.end();\n    }\n  } catch (e) {\n    res.write(`data: ${JSON.stringify({ tipo: 'erro', mensagem: String(e?.message || e) })}\\n\\n`);\n    res.end();\n  }\n}\n","size_bytes":3592},"front/src/HistoricoItem.jsx":{"content":"import React, { useState } from 'react';\nimport { criarDiffVisualizer } from './chat-utils';\n\nexport function HistoricoItem({ item, onVisualizarDiff }) {\n  const [expandido, setExpandido] = useState(false);\n  const [copiado, setCopiado] = useState(null);\n\n  const copiarCodigo = async (codigo, tipo) => {\n    try {\n      await navigator.clipboard.writeText(codigo);\n      setCopiado(tipo);\n      setTimeout(() => setCopiado(null), 2000);\n    } catch (e) {\n      console.error('Erro ao copiar:', e);\n    }\n  };\n\n  const iconesPorTipo = {\n    'projeto_criado': '📁',\n    'projeto_reaberto': '🔄',\n    'mudanca_aprovada': '✅',\n    'mudancas_propostas': '📝',\n    'mudanca_rejeitada': '❌',\n    'arquivo_salvo': '💾',\n    'commit_realizado': '🚀'\n  };\n\n  const icone = iconesPorTipo[item.tipo] || '📌';\n\n  // Verificar se tem dados de mudança\n  const temMudanca = item.dados && typeof item.dados === 'string';\n  let dadosMudanca = null;\n  \n  if (temMudanca) {\n    try {\n      dadosMudanca = JSON.parse(item.dados);\n    } catch (e) {\n      dadosMudanca = null;\n    }\n  }\n\n  return (\n    <div className=\"historico-item-card\">\n      <div \n        className=\"historico-item-header\"\n        onClick={() => setExpandido(!expandido)}\n        style={{ cursor: temMudanca ? 'pointer' : 'default' }}\n      >\n        <div className=\"historico-item-icon\">{icone}</div>\n        <div className=\"historico-item-info\">\n          <div className=\"historico-item-tipo\">{item.tipo.replace(/_/g, ' ')}</div>\n          <div className=\"historico-item-descricao\">{item.descricao}</div>\n          <div className=\"historico-item-timestamp\">\n            {new Date(item.timestamp).toLocaleString('pt-BR')}\n          </div>\n        </div>\n        {temMudanca && (\n          <button\n            type=\"button\"\n            className=\"historico-expand-btn\"\n            onClick={(e) => {\n              e.stopPropagation();\n              setExpandido(!expandido);\n            }}\n          >\n            <i className={`fas fa-chevron-${expandido ? 'up' : 'down'}`}></i>\n          </button>\n        )}\n      </div>\n\n      {expandido && dadosMudanca && dadosMudanca.arquivo && (\n        <div className=\"historico-item-detalhes\">\n          <div className=\"historico-arquivo-path\">\n            <i className=\"fas fa-file-code\"></i> {dadosMudanca.arquivo}\n          </div>\n\n          {dadosMudanca.conteudo_original && dadosMudanca.conteudo_novo && (\n            <>\n              <div className=\"historico-codigo-comparacao\">\n                <div className=\"historico-codigo-bloco\">\n                  <div className=\"historico-codigo-header\">\n                    <span>Código Anterior</span>\n                    <button\n                      type=\"button\"\n                      className=\"button button-tertiary button-sm\"\n                      onClick={() => copiarCodigo(dadosMudanca.conteudo_original, 'original')}\n                    >\n                      {copiado === 'original' ? (\n                        <><i className=\"fas fa-check\"></i> Copiado!</>\n                      ) : (\n                        <><i className=\"fas fa-copy\"></i> Copiar</>\n                      )}\n                    </button>\n                  </div>\n                  <pre className=\"historico-codigo-preview\">\n                    {dadosMudanca.conteudo_original.slice(0, 500)}\n                    {dadosMudanca.conteudo_original.length > 500 && '...'}\n                  </pre>\n                </div>\n\n                <div className=\"historico-codigo-bloco\">\n                  <div className=\"historico-codigo-header\">\n                    <span>Código Novo</span>\n                    <button\n                      type=\"button\"\n                      className=\"button button-tertiary button-sm\"\n                      onClick={() => copiarCodigo(dadosMudanca.conteudo_novo, 'novo')}\n                    >\n                      {copiado === 'novo' ? (\n                        <><i className=\"fas fa-check\"></i> Copiado!</>\n                      ) : (\n                        <><i className=\"fas fa-copy\"></i> Copiar</>\n                      )}\n                    </button>\n                  </div>\n                  <pre className=\"historico-codigo-preview\">\n                    {dadosMudanca.conteudo_novo.slice(0, 500)}\n                    {dadosMudanca.conteudo_novo.length > 500 && '...'}\n                  </pre>\n                </div>\n              </div>\n\n              <button\n                type=\"button\"\n                className=\"button button-primary\"\n                onClick={() => {\n                  const diffData = criarDiffVisualizer(\n                    dadosMudanca.conteudo_original,\n                    dadosMudanca.conteudo_novo\n                  );\n                  onVisualizarDiff({\n                    arquivo: dadosMudanca.arquivo,\n                    tipo: item.tipo,\n                    timestamp: item.timestamp,\n                    ...diffData\n                  });\n                }}\n                style={{ marginTop: '12px', width: '100%' }}\n              >\n                <i className=\"fas fa-code-compare\"></i> Ver Comparação Completa\n              </button>\n            </>\n          )}\n        </div>\n      )}\n    </div>\n  );\n}\n","size_bytes":5231}},"version":2}