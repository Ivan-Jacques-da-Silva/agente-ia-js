Adicione uma metodologia de agente (opção ao lado do botão “Enviar”)

Nome da opção: Executar metodologia de provisionamento e simulação
Tipo: checkbox (desmarcado por padrão)

Como funciona quando marcado:

Analisar repositório

Lê configs (package.json, requirements.txt, Dockerfile, compose.yml, prisma/schema.prisma, vite/next).

Detectar stack

Decide se backend e frontend estão juntos ou separados.

Define a URL do front para simulação.

Preparar ambiente

Gera .env a partir de um modelo local.

Cria relatorios/ e videos/.

Gerar orquestração

Monta docker-compose.yml local (db, backend, frontend).

Se já existir compose, cria docker-compose.local.yml (merge lógico).

Subir serviços

Executa docker compose up -d, aguarda saúde básica, coleta logs iniciais.

Health-check: tenta GET /health (se existir).

Simular interface (com vídeo)

Abre o front, executa roteiro (login/navegação) e grava vídeo.

Salva em videos/ e prints on error.

Relatório final

Gera JSON em relatorios/ com diagnóstico, decisões, artefatos, tempo total, erros e checklist.

O que aparece na interface

Estados do botão: Enviando… → Provisionando… → Simulando… → Finalizado (ou Falhou).

Progresso: 7 etapas (Analisar → Detectar → .env → Compose → Subir → Simular → Relatório).

Saídas: links locais para relatorios/*.json e videos/*.webm, resumo de serviços e URLs.

Parâmetros (Avançado, opcional)

Cenário de simulação (arquivo JSON com passos)

Timeout por etapa (padrão 120s)

Tentar reaproveitar compose existente (sim/não)

Requisitos & limites

100% local: Node + Docker + Playwright instalados.

Sem internet: usa apenas o que já existe localmente.

Não altera infra externa: só cria arquivos na pasta atual (ou .local).

Tratamento de erro

Compose existente conflitante → avisa e oferece .local.

Front não sobe → pula simulação e sinaliza “Back/DB ok, Front indisponível”.

Falha na simulação → mantém vídeo e print para depuração.

Boas práticas

Rodar em branch de trabalho.

Manter cenario-login.json simples para validação.

Nomear serviços de forma previsível para health-check (db, backend, frontend).