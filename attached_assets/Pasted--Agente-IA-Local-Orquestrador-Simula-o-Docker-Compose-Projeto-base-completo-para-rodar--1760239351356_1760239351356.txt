# Agente IA Local ‚Äì Orquestrador + Simula√ß√£o + Docker Compose

Projeto base completo para rodar **100% local**: analisa reposit√≥rio, detecta stack, gera `docker-compose.yml`, sobe servi√ßos, faz simula√ß√£o E2E com **v√≠deo** via Playwright e salva relat√≥rio.

## Estrutura de pastas

```
agente-ia-local/
‚îú‚îÄ agente/
‚îÇ  ‚îú‚îÄ index.js
‚îÇ  ‚îî‚îÄ lib/
‚îÇ     ‚îú‚îÄ analisar.js
‚îÇ     ‚îú‚îÄ detectar.js
‚îÇ     ‚îú‚îÄ gerarCompose.js
‚îÇ     ‚îú‚îÄ prepararAmbiente.js
‚îÇ     ‚îú‚îÄ subirServicos.js
‚îÇ     ‚îî‚îÄ registrarRelatorio.js
‚îú‚îÄ ferramentas/
‚îÇ  ‚îî‚îÄ simular_interface.js
‚îú‚îÄ scripts/
‚îÇ  ‚îî‚îÄ cenarios/
‚îÇ     ‚îî‚îÄ exemplo-login.json
‚îú‚îÄ templates/
‚îÇ  ‚îî‚îÄ docker-compose.tpl.yml
‚îú‚îÄ .env.example
‚îú‚îÄ package.json
‚îú‚îÄ playwright.config.js
‚îî‚îÄ README.md
```

---

## package.json

```json
{
  "name": "agente-ia-local",
  "version": "0.1.0",
  "type": "module",
  "private": true,
  "scripts": {
    "iniciar": "node agente/index.js",
    "simular": "node ferramentas/simular_interface.js",
    "playwright:install": "npx playwright install",
    "playwright:drivers": "npx playwright install-deps || exit 0"
  },
  "dependencies": {
    "ajv": "^8.17.1",
    "dotenv": "^16.4.5",
    "fast-glob": "^3.3.2",
    "playwright": "^1.48.0",
    "yaml": "^2.5.1"
  }
}
```

---

## .env.example

```env
# Ajuste e renomeie para .env
PORTA_BACK=5052
PORTA_FRONT=5173
DB_USER=app
DB_PASS=app
DB_NAME=appdb
DB_PORT=5432
# URL gerada para o front (usada na simula√ß√£o)
URL_FRONT=http://localhost:5173
```

---

## playwright.config.js

```js
// Config simples. V√≠deos ficam em ./videos
export default {
  testDir: "./",
  reporter: "list",
  use: {
    video: "on",
    viewport: { width: 1366, height: 768 }
  },
};
```

---

## templates/docker-compose.tpl.yml

```yaml
version: "3.9"
services:
  db:
    image: postgres:16
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASS}
      POSTGRES_DB: ${DB_NAME}
    ports:
      - "${DB_PORT}:${DB_PORT}"
    volumes:
      - pg:/var/lib/postgresql/data

  backend:
    build: ./back
    env_file:
      - .env
    depends_on:
      - db
    ports:
      - "${PORTA_BACK}:${PORTA_BACK}"

  frontend:
    build: ./front
    environment:
      - VITE_API_URL=http://localhost:${PORTA_BACK}
    ports:
      - "${PORTA_FRONT}:${PORTA_FRONT}"

volumes:
  pg: {}
```

---

## agente/index.js

```js
import "dotenv/config";
import path from "node:path";
import { fileURLToPath } from "node:url";
import { analisar_repositorio } from "./lib/analisar.js";
import { detectar_stack } from "./lib/detectar.js";
import { gerar_compose } from "./lib/gerarCompose.js";
import { preparar_ambiente } from "./lib/prepararAmbiente.js";
import { subir_servicos } from "./lib/subirServicos.js";
import { registrar_relatorio } from "./lib/registrarRelatorio.js";
import { simular_interface } from "../ferramentas/simular_interface.js";

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

(async function iniciar() {
  try {
    const pastaAlvo = process.argv[2] ? path.resolve(process.argv[2]) : process.cwd();

    console.log("üì¶ Pasta alvo:", pastaAlvo);
    const diagnostico = await analisar_repositorio(pastaAlvo);

    console.log("üîç Diagn√≥stico b√°sico:", JSON.stringify(diagnostico, null, 2));
    const alvo = await detectar_stack(diagnostico);

    console.log("üß© Stack detectada:", JSON.stringify(alvo, null, 2));
    await preparar_ambiente(pastaAlvo, alvo);

    await gerar_compose(pastaAlvo, alvo);
    await subir_servicos(pastaAlvo);

    const urlFront = process.env.URL_FRONT || alvo.urlFront || "http://localhost:5173";
    const resultadoUI = await simular_interface(urlFront, path.join(pastaAlvo, "scripts/cenarios/exemplo-login.json"));

    const relatorio = await registrar_relatorio({
      pastaAlvo,
      diagnostico,
      alvo,
      simulacao: resultadoUI
    });

    console.log("‚úÖ Finalizado. Relat√≥rio:", relatorio.caminho);
  } catch (e) {
    console.error("üí• Erro fatal:", e.message);
    process.exit(1);
  }
})();
```

---

## agente/lib/analisar.js

```js
import fg from "fast-glob";
import path from "node:path";
import fs from "node:fs/promises";

export async function analisar_repositorio(pasta) {
  const padroes = [
    "**/package.json",
    "**/requirements.txt",
    "**/pyproject.toml",
    "**/pom.xml",
    "**/Dockerfile",
    "**/docker-compose.yml",
    "**/compose.yml",
    "**/prisma/schema.prisma",
    "**/vite.config.*",
    "**/next.config.*"
  ];
  const arquivos = await fg(padroes, { cwd: pasta, dot: true, ignore: ["**/node_modules/**", "**/.git/**"] });

  const dados = [];
  for (const rel of arquivos) {
    const abs = path.join(pasta, rel);
    let conteudo = "";
    try { conteudo = await fs.readFile(abs, "utf8"); } catch {}
    dados.push({ rel, conteudo });
  }

  const temFrontVite = dados.some(d => /vite\.config\./.test(d.rel));
  const temNext = dados.some(d => /next\.config\./.test(d.rel));
  const temPrisma = dados.some(d => d.rel.endsWith("prisma/schema.prisma"));
  const temCompose = dados.some(d => /(docker-compose|compose)\.yml$/.test(d.rel));

  return { arquivos: dados.map(d => d.rel), indicadores: { temFrontVite, temNext, temPrisma, temCompose } };
}
```

---

## agente/lib/detectar.js

```js
import path from "node:path";
import fs from "node:fs/promises";

export async function detectar_stack(diagnostico) {
  // Heur√≠stica simples
  const urlFront = process.env.URL_FRONT || "http://localhost:5173";
  const portaBack = Number(process.env.PORTA_BACK || 5052);
  const portaFront = Number(process.env.PORTA_FRONT || 5173);
  const dbPort = Number(process.env.DB_PORT || 5432);

  // Descobrir se h√° back/front pelas pastas
  const provaveisFront = ["front", "frontend", "web", "app"];
  const provaveisBack = ["back", "backend", "api", "server"];

  function existeDir(nome) {
    return diagnostico.arquivos.some(r => r.startsWith(`${nome}/`) || r === `${nome}/package.json`);
  }

  const pastaFront = provaveisFront.find(existeDir) || null;
  const pastaBack = provaveisBack.find(existeDir) || null;

  return {
    pastaFront,
    pastaBack,
    portas: { portaBack, portaFront, dbPort },
    urlFront
  };
}
```

---

## agente/lib/gerarCompose.js

```js
import path from "node:path";
import fs from "node:fs/promises";

export async function gerar_compose(pasta, alvo) {
  const tpl = await fs.readFile(path.join(pasta, "templates/docker-compose.tpl.yml"), "utf8");
  await fs.writeFile(path.join(pasta, "docker-compose.yml"), tpl, "utf8");
  console.log("üß± docker-compose.yml gerado.");
}
```

---

## agente/lib/prepararAmbiente.js

```js
import path from "node:path";
import fs from "node:fs/promises";

export async function preparar_ambiente(pasta, alvo) {
  // Gera .env se n√£o existir
  const envAlvo = path.join(pasta, ".env");
  try { await fs.access(envAlvo); }
  catch {
    const padrao = await fs.readFile(path.join(pasta, ".env.example"), "utf8");
    await fs.writeFile(envAlvo, padrao, "utf8");
    console.log("üóíÔ∏è  .env criado a partir de .env.example");
  }
}
```

---

## agente/lib/subirServicos.js

```js
import { spawn } from "node:child_process";

export async function subir_servicos(pasta) {
  console.log("üê≥ Subindo servi√ßos com docker compose...");
  await executar(["compose", "up", "-d"], pasta);
  console.log("‚è≥ Aguardando sa√∫de b√°sica (10s)...");
  await new Promise(r => setTimeout(r, 10_000));
}

function executar(args, cwd) {
  return new Promise((resolve, reject) => {
    const p = spawn("docker", args, { cwd, stdio: "inherit" });
    p.on("close", (code) => code === 0 ? resolve() : reject(new Error("docker falhou")));
  });
}
```

---

## agente/lib/registrarRelatorio.js

```js
import path from "node:path";
import fs from "node:fs/promises";

export async function registrar_relatorio(dados) {
  const dir = path.join(process.cwd(), "relatorios");
  await fs.mkdir(dir, { recursive: true });
  const carimbo = new Date().toISOString().replace(/[:.]/g, "-");
  const caminho = path.join(dir, `relatorio-${carimbo}.json`);
  await fs.writeFile(caminho, JSON.stringify(dados, null, 2));
  return { caminho };
}
```

---

## ferramentas/simular_interface.js

```js
import "dotenv/config";
import { chromium } from "playwright";
import fs from "node:fs/promises";

export async function simular_interface(urlBase, caminhoCenario) {
  const navegador = await chromium.launch();
  const contexto = await navegador.newContext({ recordVideo: { dir: "videos" } });
  const pagina = await contexto.newPage();

  console.log("üé¨ Abrindo:", urlBase);
  await pagina.goto(urlBase);

  // Executa passos de um cen√°rio simples (opcional)
  try {
    const texto = await fs.readFile(caminhoCenario, "utf8");
    const passos = JSON.parse(texto);
    for (const passo of passos) {
      if (passo.acao === "digitar") {
        await pagina.fill(passo.seletor, passo.valor);
      } else if (passo.acao === "clicar") {
        await pagina.click(passo.seletor);
      } else if (passo.acao === "esperar_url") {
        await pagina.waitForURL(passo.padrao);
      } else if (passo.acao === "esperar_texto") {
        await pagina.waitForSelector(`text=${passo.texto}`);
      }
    }
  } catch (e) {
    console.warn("(cen√°rio opcional)", e.message);
  }

  await contexto.close();
  await navegador.close();
  return { videoDir: "videos" };
}

// Execu√ß√£o direta opcional: `npm run simular`
if (import.meta.url === `file://${process.argv[1]}`) {
  const url = process.env.URL_FRONT || "http://localhost:5173";
  simular_interface(url).then(() => console.log("üé• Simula√ß√£o ok"));
}
```

---

## scripts/cenarios/exemplo-login.json

```json
[
  { "acao": "digitar", "seletor": "input[name=\\"email\\"]", "valor": "admin@demo.com" },
  { "acao": "digitar", "seletor": "input[name=\\"senha\\"]", "valor": "123456" },
  { "acao": "clicar",  "seletor": "button:has-text(\"Entrar\")" },
  { "acao": "esperar_url", "padrao": "**/dashboard" },
  { "acao": "clicar",  "seletor": "text=Unidades" },
  { "acao": "esperar_texto", "texto": "Lista de Unidades" }
]
```

---

## README.md

````md
# Agente IA Local

### Requisitos
- Node 18+
- Docker + Docker Compose
- (Linux/macOS) `npx playwright install-deps` (opcional)

### Instala√ß√£o
```bash
npm i
npm run playwright:install
npm run playwright:drivers # opcional
cp .env.example .env
````

### Uso

```bash
# Analisar projeto atual (pasta que cont√©m front/back/templates)
node agente/index.js

# ou apontando para outra pasta do seu projeto
node agente/index.js /caminho/do/seu/projeto
```

Sa√≠das:

* `docker-compose.yml` gerado na raiz.
* V√≠deos da simula√ß√£o em `./videos`.
* Relat√≥rios JSON em `./relatorios`.

```
```
